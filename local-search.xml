<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Typescript</title>
    <link href="/2022/06/20/Typescript/"/>
    <url>/2022/06/20/Typescript/</url>
    
    <content type="html"><![CDATA[<h1>Typescript</h1><h2 id="介绍">介绍</h2><ol><li>TypeScript简称TS。</li><li>TS和JS之间的关系其实就是Less/Sass和CSS之间的关系。</li><li>就像Less/Sass是对CSS进行扩展一样, TS也是对JS进行扩展。</li><li>就像Less/Sass最终会转换成CSS一样, 我们编写好的TS代码最终也会换成JS。</li><li>TypeScript是JavaScript的超集，因为它扩展了JavaScript，有JavaScript没有的东西。</li></ol><h2 id="类型声明">类型声明</h2><h3 id="字面量">字面量</h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> a = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//如果变量的声明与赋值是同时进行的，ts可以自动对变量进行类型检测</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a:<span class="hljs-built_in">number</span>,b:<span class="hljs-built_in">number</span></span>):<span class="hljs-built_in">number</span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-comment">//返回值的类型声明</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">b</span>:<span class="hljs-built_in">boolean</span> | <span class="hljs-built_in">string</span>;<br><span class="hljs-comment">//联合类型，b可以是boolean或者string</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>:<span class="hljs-built_in">any</span>;<br><span class="hljs-comment">//any表示的是任意类型，一个变量设置类型为any后相当于对该变量关闭了TS的类型检测</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">d</span>:<span class="hljs-built_in">unknown</span>;<br><span class="hljs-comment">//unknown表示未知类型的值</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">s</span>:<span class="hljs-built_in">string</span>;<br>c = <span class="hljs-literal">false</span>;<br>d = <span class="hljs-literal">false</span>;<br>s = c; <span class="hljs-comment">//不会报错</span><br>s = d; <span class="hljs-comment">//会报错</span><br><br><span class="hljs-comment">//类型断言</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*语法：</span><br><span class="hljs-comment">*变量 as 类型</span><br><span class="hljs-comment">* &lt;类型&gt;变量</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>):<span class="hljs-built_in">void</span>&#123;<br>    <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-comment">//void 用来表示空，没有返回值的函数</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>):<span class="hljs-built_in">never</span>&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br><span class="hljs-comment">//return undefined也不行</span><br></code></pre></div></td></tr></table></figure><h3 id="对象">对象</h3><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> b：&#123;<span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>,<span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span>&#125;;<br><span class="hljs-comment">//&#123;&#125;用来指定对象中可以包含哪些属性</span><br><span class="hljs-comment">//语法：&#123;属性名：属性值，属性名：属性值&#125;</span><br><br><span class="hljs-keyword">let</span> c：&#123;<span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>,age?:<span class="hljs-built_in">number</span>&#125;;<br><span class="hljs-comment">//在属性名后加上?，表示属性是可选的</span><br>       <br><span class="hljs-keyword">let</span> <span class="hljs-attr">d</span>:&#123;<span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>,[<span class="hljs-attr">propName</span>:srting]:<span class="hljs-built_in">any</span>&#125;;<br><span class="hljs-comment">//写上任意类型的属性，这样写代表了有name的基础上可以有其他任意属性。</span><br>       <br><span class="hljs-keyword">let</span> <span class="hljs-attr">e</span>:<span class="hljs-function">(<span class="hljs-params">x:<span class="hljs-built_in">number</span>,y:<span class="hljs-built_in">number</span></span>)=&gt;</span><span class="hljs-built_in">number</span>;<br><span class="hljs-comment">//设置函数结构的类型声明：</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*语法：</span><br><span class="hljs-comment">*  (形参：类型，形参：类型...) =&gt; 返回值</span><br><span class="hljs-comment">*/</span><br>       <br><span class="hljs-keyword">let</span> <span class="hljs-attr">f</span>:<span class="hljs-built_in">number</span>[];<br><span class="hljs-keyword">let</span> <span class="hljs-attr">g</span>:<span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>&gt;;<br><span class="hljs-comment">//表示数值类型数组</span><br>       <br><span class="hljs-keyword">let</span> <span class="hljs-attr">h</span>:[<span class="hljs-built_in">string</span>,<span class="hljs-built_in">number</span>];<br><span class="hljs-comment">//元组，固定长度的数组。</span><br>       <br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Gender</span>&#123;<br>    <span class="hljs-title class_">Male</span> = <span class="hljs-number">0</span>,<br>    <span class="hljs-title class_">Female</span> = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//枚举类（ts独有）</span><br>       <br><span class="hljs-keyword">type</span> myType = <span class="hljs-number">1</span> | <span class="hljs-number">2</span> | <span class="hljs-number">3</span> | <span class="hljs-number">4</span> | <span class="hljs-number">5</span>；<br><span class="hljs-keyword">let</span> <span class="hljs-attr">i</span>:myType;<br><span class="hljs-comment">//类型别名</span><br></code></pre></div></td></tr></table></figure><h2 id="编译选项">编译选项</h2><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&quot;include&quot;用来表示哪些些ts文件需要被编译</span><br><span class="hljs-comment">路径：**表示任意目录，*表示任意文件</span><br><span class="hljs-comment">&quot;exclude&quot;用来表示哪些ts文件不需要被编译</span><br><span class="hljs-comment">该配置项有默认值：[&quot;node_modules&quot;,&quot;bower_components&quot;,&quot;jspm_packages&quot;]</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br><span class="hljs-string">&quot;./src/**/*&quot;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">// &quot;exclude&quot;:[</span><br><br><span class="hljs-comment">// ]</span><br><span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ES2015&quot;</span><span class="hljs-punctuation">,</span> <br><span class="hljs-comment">//用来指定转换后ES版本</span><br><span class="hljs-comment">// &quot;module&quot;:&quot;ES2015&quot;, </span><br><span class="hljs-comment">//用来指定使用的模块化的规范</span><br><span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;AMD&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;lib&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;ES2015&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;ES2015.Symbol&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;ES2015.Promise&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <br><span class="hljs-comment">//用来指定项目中需要使用的库，有默认值(浏览器运行环境），一般不需要改</span><br><span class="hljs-attr">&quot;outDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist&quot;</span><span class="hljs-punctuation">,</span> <br><span class="hljs-comment">//用来指定编译后文件所在的目录</span><br><span class="hljs-attr">&quot;outFile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./dist/app.js&quot;</span><span class="hljs-punctuation">,</span>  <br><span class="hljs-comment">//使编译后的代码合并成一个文件 </span><br><span class="hljs-comment">// Only &#x27;amd&#x27; and &#x27;system&#x27; modules are supported alongside --outFile.</span><br><br><span class="hljs-attr">&quot;allowJs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span> <br><span class="hljs-comment">//默认值：false；是否允许src目录下的JS代码同时编译到dist中</span><br><span class="hljs-attr">&quot;checkJs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">//默认值：false；JS代码语法检查</span><br><span class="hljs-attr">&quot;removeComments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">//默认值：false；编译的时候是否移除注释</span><br><span class="hljs-attr">&quot;noEmit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">//默认值：false；编译后不生成文件，一般用来只想检查语法的情况。</span><br><span class="hljs-attr">&quot;noEmitOnError&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">//默认值：false；当有错误的时候不生成编译后的文件。</span><br>        <br>        <br><span class="hljs-comment">// &quot;strict&quot;:true,</span><br><span class="hljs-comment">// 严格检查的总开关</span><br>        <br>        <span class="hljs-attr">&quot;alwaysStrict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">//编译后的JS代码开启严格模式，如果有export等会省略“use strict”</span><br><span class="hljs-attr">&quot;noImplicitAny&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">//不允许隐式的any类型</span><br><span class="hljs-attr">&quot;noImplicitThis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">//不允许不明确类型的this</span><br><span class="hljs-attr">&quot;strictNullChecks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">//严格的检查空值，比如dom元素，如果不存在这个dom元素就会报错</span><br><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><h2 id="TypeScript打包">TypeScript打包</h2><h3 id="webpack整合">webpack整合</h3><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包；</p><p>TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS；</p><p>步骤如下：</p><h4 id="初始化项目">初始化项目</h4><p>进入项目根目录，执行命令 <code>npm init -y</code>，创建package.json文件</p><h4 id="下载构建工具">下载构建工具</h4><p>命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin<br></code></pre></div></td></tr></table></figure><p>共安装了7个包:</p><ul><li><code>webpack</code>：构建工具webpack</li><li><code>webpack-cli</code>：webpack的命令行工具</li><li><code>webpack-dev-server</code>：webpack的开发服务器</li><li><code>typescript</code>：ts编译器</li><li><code>ts-loader</code>：ts加载器，用于在webpack中编译ts文件</li><li><code>html-webpack-plugin</code>：webpack中html插件，用来自动创建html文件</li><li><code>clean-webpack-plugin</code>：webpack中的清除插件，每次编译都会先清除dist目录。</li></ul><h4 id="配置webpack">配置webpack</h4><p>根目录下创建webpack的配置文件<code>webpack.config.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">CleanWebpackPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;clean-webpack-plugin&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>   <span class="hljs-attr">optimization</span>:&#123;<br>       <span class="hljs-attr">minimize</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 关闭代码压缩，可选</span><br>   &#125;,<br><br>   <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/index.ts&quot;</span>,<br><br>   <span class="hljs-attr">devtool</span>: <span class="hljs-string">&quot;inline-source-map&quot;</span>,<br><br>   <span class="hljs-attr">devServer</span>: &#123;<br>       <span class="hljs-attr">contentBase</span>: <span class="hljs-string">&#x27;./dist&#x27;</span><br>   &#125;,<br><br>   <span class="hljs-attr">output</span>: &#123;<br>       <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>       <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>       <span class="hljs-attr">environment</span>: &#123;<br>           <span class="hljs-attr">arrowFunction</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 关闭webpack的箭头函数，可选</span><br>       &#125;<br>   &#125;,<br><br>   <span class="hljs-attr">resolve</span>: &#123;<br>       <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&quot;.ts&quot;</span>, <span class="hljs-string">&quot;.js&quot;</span>]<br>   &#125;,<br><br>   <span class="hljs-attr">module</span>: &#123;<br>       <span class="hljs-attr">rules</span>: [<br>           &#123;<br>               <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.ts$/</span>,<br>               <span class="hljs-attr">use</span>: &#123;<br>                   <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;ts-loader&quot;</span>     <br>               &#125;,<br>               <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span><br>           &#125;<br>       ]<br>   &#125;,<br>   <span class="hljs-comment">//添加webpack插件</span><br>   <span class="hljs-attr">plugins</span>: [<br>       <span class="hljs-keyword">new</span> <span class="hljs-title class_">CleanWebpackPlugin</span>(),<br>       <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>           <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;TS测试&#x27;</span><br>       &#125;),<br>   ],<br>   <span class="hljs-comment">//用来设置引用模块,告诉webpack哪些文件可以被当做模块引用。</span><br>   <span class="hljs-attr">resolve</span>:&#123;<br><span class="hljs-attr">extensions</span>:[<span class="hljs-string">&#x27;.ts&#x27;</span>,<span class="hljs-string">&#x27;.js&#x27;</span>]<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="配置TS编译选项">配置TS编译选项</h4><p>根目录下创建tsconfig.json，配置可以根据自己需要</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>       <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ES2015&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ES2015&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;strict&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br>   <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><h4 id="修改package-json配置">修改package.json配置</h4><p>修改package.json添加如下配置</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>       <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-comment">//编译</span><br>       <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack serve --open --mode production&quot;</span><br>       <span class="hljs-comment">//webpack-dev-server：webpack的开发服务器(启动)</span><br>   <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></div></td></tr></table></figure><h4 id="项目使用">项目使用</h4><p>在src下创建ts文件，并在并命令行执行<code>npm run build</code>对代码进行编译；</p><p>或者执行<code>npm start</code>来启动开发服务器；</p><h3 id="Babel">Babel</h3><p>除了webpack，开发中还经常需要结合babel来对代码进行转换；</p><p>以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中；</p><blockquote><p>虽然TS在编译时也支持代码转换，但是只支持简单的代码转换；</p><p>对于例如：Promise等ES6特性，TS无法直接转换，这时还要用到babel来做转换；</p></blockquote><p>安装依赖包：</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i -D @babel/core @babel/preset-env babel-loader core-js<br></code></pre></div></td></tr></table></figure><p>共安装了4个包，分别是：</p><ul><li><code>@babel/core</code>：babel的核心工具</li><li><code>@babel/preset-env</code>：babel的预定义环境</li><li><code>@babel-loader</code>：babel在webpack中的加载器</li><li><code>core-js</code>：core-js用来使老版本的浏览器支持新版ES语法</li></ul><p>修改webpack.config.js配置文件</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//引入路径包</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-comment">//引入html插件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HTMLWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><span class="hljs-comment">//引入clean插件</span><br><span class="hljs-keyword">const</span> &#123;<span class="hljs-title class_">CleanWebpackPlugin</span>&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>);<br><br><span class="hljs-comment">//webpack中的所有配置信息都应该卸载module.exports中</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-comment">//入口文件</span><br><span class="hljs-attr">entry</span>:<span class="hljs-string">&quot;./src/index.ts&quot;</span>,<br><span class="hljs-comment">//指定打包文件所在目录</span><br><span class="hljs-attr">output</span>:&#123;<br><span class="hljs-comment">//指定打包文件的目录</span><br><span class="hljs-attr">path</span>:path.<span class="hljs-title function_">resolve</span>(__dirname,<span class="hljs-string">&#x27;dist&#x27;</span>),<br><span class="hljs-comment">//打包后文件的名字</span><br><span class="hljs-attr">filename</span>:<span class="hljs-string">&quot;bundle.js&quot;</span>,<br>        <span class="hljs-comment">//告诉webpack不使用箭头函数</span><br><span class="hljs-attr">environment</span>:&#123;<br><span class="hljs-attr">arrowFunction</span>:<span class="hljs-literal">false</span><br>&#125;<br>&#125;,<br><span class="hljs-comment">//webpack打包时使用的模块</span><br><span class="hljs-attr">module</span>:&#123;<br> <span class="hljs-comment">//指定要加载的规则</span><br> <span class="hljs-attr">rules</span>:[<br> &#123;<br><span class="hljs-comment">//test指定的是规则生成的文件</span><br><span class="hljs-comment">//以.ts结尾的结尾的文件用ts-loader去处理</span><br><span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.ts$/</span>,<br><span class="hljs-comment">//loader的执行顺序是从后往前执行</span><br><span class="hljs-comment">//我们的需求：先把ts的代码转换为js代码，然后在用babel处理js代码</span><br><span class="hljs-attr">use</span>: [<br> &#123;<br>  <span class="hljs-comment">//指定加载器</span><br>  <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>  <span class="hljs-comment">//设置babel</span><br>  <span class="hljs-attr">options</span>:&#123;<br>  <span class="hljs-comment">//设置预定义的环境</span><br><span class="hljs-attr">presets</span>: [<br>[<br>  <span class="hljs-comment">//指定环境的插件</span><br>  <span class="hljs-string">&quot;@babel/preset-env&quot;</span>,<br>  <span class="hljs-comment">//配置信息</span><br>  &#123;<br><span class="hljs-comment">//兼容的目标浏览器版本</span><br><span class="hljs-string">&quot;targets&quot;</span>:&#123;<br>                    <span class="hljs-comment">//最新的chrome是102(2022.6.21)</span><br><span class="hljs-string">&quot;chrome&quot;</span>: <span class="hljs-string">&quot;58&quot;</span>,<br><span class="hljs-string">&quot;ie&quot;</span>: <span class="hljs-string">&quot;11&quot;</span><br>&#125;,<br><span class="hljs-comment">//corejs的版本</span><br><span class="hljs-string">&quot;corejs&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>,<br><span class="hljs-comment">//使用corejs的方式，“usage”表示按需加载</span><br><span class="hljs-string">&quot;useBuiltIns&quot;</span>: <span class="hljs-string">&quot;usage&quot;</span><br>  &#125;<br>]<br>]<br> &#125;,<br> &#123;<br><span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;ts-loader&quot;</span>,<br> &#125;<br>],<br><span class="hljs-comment">//要排除的文件</span><br><span class="hljs-attr">exclude</span>:<span class="hljs-regexp">/node-modules/</span><br>  &#125;<br>  ]<br>&#125;,<br><span class="hljs-comment">//配置Webpack插件</span><br><span class="hljs-attr">plugins</span>:[<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">CleanWebpackPlugin</span>(),<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">HTMLWebpackPlugin</span>(&#123;<br><span class="hljs-comment">// title:&#x27;TS测试&#x27;,</span><br><span class="hljs-comment">//html模板，用了这个模板后，title设置的东西就不能起作用了</span><br><span class="hljs-attr">template</span>:<span class="hljs-string">&quot;./src/index.html&quot;</span>,<br><br>&#125;),<br>],<br><br><span class="hljs-comment">//用来设置引用模块,告诉webpack哪些文件可以被当做模块引用。</span><br><span class="hljs-attr">resolve</span>:&#123;<br><span class="hljs-attr">extensions</span>:[<span class="hljs-string">&#x27;.ts&#x27;</span>,<span class="hljs-string">&#x27;.js&#x27;</span>]<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如此一来，使用ts编译后的文件将会再次被<code>babel</code>处理，使得代码可以在大部分浏览器中直接使用，同时可以在配置选项的targets中指定要兼容的浏览器版本。</p>]]></content>
    
    
    <categories>
      
      <category>Typescript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>obs+FFmpeg制作gif</title>
    <link href="/2022/06/10/obs-FFmpeg%E5%88%B6%E4%BD%9Cgif/"/>
    <url>/2022/06/10/obs-FFmpeg%E5%88%B6%E4%BD%9Cgif/</url>
    
    <content type="html"><![CDATA[<h1>obs+FFmpeg制作gif</h1><h2 id="前言">前言</h2><blockquote><p>bitter-gourd发现在写demo的博客的时候需要用到一些gif</p><p>于是决定折腾一下怎么制作一张gif</p><p>用到的方法是：obs-studio录屏+FFmpeg制作</p></blockquote><h2 id="准备">准备</h2><h3 id="下载obs-studio">下载obs-studio</h3><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">yay -S obs-studio</span><br></code></pre></div></td></tr></table></figure><h2 id="具体步骤">具体步骤</h2><ol><li>先使用<code>obs-studio</code>录制视频，导出MP4格式的视频</li><li>再在视频中寻找需要制作成gif的那一段，记录时间。</li><li>再打开shell，直接使用<code>FFmpeg</code>，一行命令行即可。</li></ol><h2 id="FFmpeg命令行">FFmpeg命令行</h2><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">ffmpeg -ss 30 -t 3 -i input.mp4 -vf <span class="hljs-string">&quot;fps=10,scale=320:-1:flags=lanczos,split<span class="hljs-subst">[s0]</span><span class="hljs-subst">[s1]</span>;<span class="hljs-subst">[s0]</span>palettegen<span class="hljs-subst">[p]</span>;<span class="hljs-subst">[s1]</span><span class="hljs-subst">[p]</span>paletteuse&quot;</span> -loop 0 output.gif<br></code></pre></div></td></tr></table></figure><p><code>-ss 30</code>：跳过前30秒</p><p><code>-t 3</code>：剪一段3秒的视频作为gif的时长</p><p><code>fps=10</code>：过滤器设置帧速率，实例中使用每秒 10 帧的速率。</p><p><code>scale=320</code>：设置gif的大小，320px的宽度，并在保持纵横比的同时自动确定高度。</p><p><code>palettegen and paletteuse</code>：调色板生成和调色板使用过滤器将生成并使用输入生成的自定义调色板。</p><p><code>-loop 0</code>：使用 -loop 输出选项控制循环， 值 0 是无限循环，-1 是不循环，而 1 将循环一次意味着它将播放两次。 比如值为 10 将导致 GIF 播放 11 次。</p>]]></content>
    
    
    <categories>
      
      <category>开发环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS实现打字机</title>
    <link href="/2022/06/10/CSS%E5%AE%9E%E7%8E%B0%E6%89%93%E5%AD%97%E6%9C%BA/"/>
    <url>/2022/06/10/CSS%E5%AE%9E%E7%8E%B0%E6%89%93%E5%AD%97%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1>CSS实现打字效果</h1><h2 id="前言">前言</h2><blockquote><p>bitter-gourd想写一些有趣的CSS动画</p><p>github仓库地址：<a href="https://github.com/gaoachao/CSS-animation">https://github.com/gaoachao/CSS-animation</a></p><p>这是第一篇：CSS+HTML写的打字效果</p></blockquote><h2 id="实现效果">实现效果</h2><p><img src="typing.gif" alt="打字效果"></p><h2 id="代码">代码</h2><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.typing</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">80vh</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.typing-effect</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">22ch</span>;  <span class="hljs-comment">/*字母数量 用ch表示0的宽度 配合overflow:hidden可以让steps的每一帧展出一个字符*/</span></span><br><span class="language-css">            <span class="hljs-attribute">white-space</span>: nowrap;  <span class="hljs-comment">/*不换行*/</span></span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden;   <span class="hljs-comment">/*把超出部分隐藏*/</span></span><br><span class="language-css">            <span class="hljs-attribute">border-right</span>: <span class="hljs-number">3px</span> solid; <span class="hljs-comment">/*不要对这个效果基本没影响*/</span></span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: monospace; <span class="hljs-comment">/*设置等宽字体*/</span></span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>;  </span><br><span class="language-css">            <span class="hljs-attribute">animation</span>: typing <span class="hljs-number">2s</span> <span class="hljs-built_in">steps</span>(<span class="hljs-number">22</span>), effect .<span class="hljs-number">5s</span> step-end infinite alternate;</span><br><span class="language-css">            <span class="hljs-comment">/* typing表示打字类型 2s打完 总共22步 </span></span><br><span class="hljs-comment"><span class="language-css">             * effect让光标持续跳动 0.5秒出现0.5秒消失（每1秒跳一下）</span></span><br><span class="hljs-comment"><span class="language-css">             * step-end表示在每一帧的最后 infinite表示一直跳动下去</span></span><br><span class="hljs-comment"><span class="language-css">             * 如果真的要一一对应应该让effect为2/22秒，这样光标跳动一下打一个字</span></span><br><span class="hljs-comment"><span class="language-css">             * alternate动画交替反向运行，反向运行时，动画按步后退 */</span></span><br><span class="language-css">        &#125;   </span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-keyword">@keyframes</span> typing &#123;</span><br><span class="language-css">            <span class="hljs-selector-tag">from</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/*使typing这个div从0宽到设定宽度(字母数+ch)*/</span></span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-keyword">@keyframes</span> effect &#123;</span><br><span class="language-css">            <span class="hljs-number">50%</span> &#123;</span><br><span class="language-css">                 <span class="hljs-attribute">border-color</span>: transparent; </span><br><span class="language-css">            &#125;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/*设置effect这个div中的动画*/</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;typing&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;typing-effect&quot;</span>&gt;</span>Typing effect for text<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>CodeSnap版</strong></p><p><img src="%E6%89%93%E5%AD%97%E6%9C%BA.jpg" alt="CodeSnap（凑篇幅）"></p>]]></content>
    
    
    <categories>
      
      <category>CSS动画</category>
      
    </categories>
    
    
    <tags>
      
      <tag>demo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS选择器和CSS权重</title>
    <link href="/2022/06/05/CSS%E6%9D%83%E9%87%8D/"/>
    <url>/2022/06/05/CSS%E6%9D%83%E9%87%8D/</url>
    
    <content type="html"><![CDATA[<h1>CSS选择器</h1><h1>CSS权重</h1><p>从0开始，一个行内样式+1000，一个id选择器+100，一个元素选择器class或者伪类+10，一个标签选择器或者伪元素+1，通配符+0。</p><p><code>!important</code>等于正无穷。</p>]]></content>
    
    
    <categories>
      
      <category>Q&amp;A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器存储方式比较</title>
    <link href="/2022/06/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83/"/>
    <url>/2022/06/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<h1>浏览器存储方式比较</h1><table><thead><tr><th>存储方式</th><th>特点</th><th>容量</th></tr></thead><tbody><tr><td>cookie</td><td>1、需要与服务器连接。2、可设置过期时间。3、会影响网络速度</td><td>超过4k会被忽略除chrome/safari 外, 都限制了其数量。</td></tr><tr><td>localStorage</td><td>1、无需请求服务器永久有效(除非手动清缓存)。2、可以封装时间限制的方法。</td><td>一般都是 5Mb 不同浏览器不同</td></tr><tr><td>sessionStorage</td><td>1、无需请求服务器。2、刷新不丢失关闭界面丢失</td><td>5Mb</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Q&amp;A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode之JS题解</title>
    <link href="/2022/06/03/LeetCode%E4%B9%8BJS%E9%A2%98%E8%A7%A3/"/>
    <url>/2022/06/03/LeetCode%E4%B9%8BJS%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1>bitter-gourd的LeetCode题解</h1><h2 id="滑动窗口">滑动窗口</h2><h3 id="序号">序号</h3><p>3.无重复字符的最长子串</p><p>30.串联所有单词的子串</p><p>76.最小覆盖子串</p><p>159.至多包含两个不同字符的最长子串</p><p>209.长度最小的子数组</p><p>239.滑动窗口最大值</p><p>567.字符串的排列</p><p>632.最小区间</p><p>727.最小窗口子序列</p><h3 id="题目">题目</h3><h4 id="3-无重复字符的最长子串-medium">3.无重复字符的最长子串(medium)</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> lengthOfLongestSubstring = <span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) &#123;<br>    <span class="hljs-keyword">let</span> res=<span class="hljs-number">0</span>,temp=[];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i &lt; s.<span class="hljs-property">length</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!temp.<span class="hljs-title function_">includes</span>(s[i]))&#123;<br>            temp.<span class="hljs-title function_">push</span>(s[i]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            temp.<span class="hljs-title function_">shift</span>();<br>            i--;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        res = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(res,temp.<span class="hljs-property">length</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h4 id="30-串联所有单词的子串-hard">30.串联所有单词的子串(hard)</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string[]</span>&#125; <span class="hljs-variable">words</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number[]</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> findSubstring = <span class="hljs-keyword">function</span>(<span class="hljs-params">s, words</span>) &#123;<br>    <span class="hljs-keyword">const</span> wordSize = words[<span class="hljs-number">0</span>].<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">const</span> substringLen = wordSize * words.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">const</span> wordsCount = &#123;&#125;;<br>    words.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">w</span> =&gt;</span> (wordsCount[w] = (wordsCount[w] || <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">const</span> res = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;= s.<span class="hljs-property">length</span> - substringLen; i++) &#123;<br>        <span class="hljs-keyword">const</span> tempCount = &#123;...wordsCount&#125;;<br>        <span class="hljs-keyword">let</span> count = words.<span class="hljs-property">length</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i; j &lt; i + substringLen; j += wordSize) &#123;<br>            <span class="hljs-keyword">const</span> word = s.<span class="hljs-title function_">slice</span>(j, j + wordSize);<br>            <span class="hljs-keyword">if</span> (!(word <span class="hljs-keyword">in</span> tempCount) || tempCount[word] &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>            tempCount[word]--;<br>            count--;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (count === <span class="hljs-number">0</span>) res.<span class="hljs-title function_">push</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></div></td></tr></table></figure><h4 id="209-长度最小的子数组-medium">209.长度最小的子数组(medium)</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; <span class="hljs-variable">target</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> minSubArrayLen = <span class="hljs-keyword">function</span>(<span class="hljs-params">target, nums</span>) &#123;<br>    <span class="hljs-keyword">let</span> length = nums.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">if</span>(length == <span class="hljs-number">0</span> ) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> start = <span class="hljs-number">0</span>,end = <span class="hljs-number">0</span>,sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> ans = length+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(end &lt; length)&#123;<br>        sum += nums[end];<br>        <span class="hljs-keyword">while</span>(sum &gt;= target)&#123;<br>            sum -= nums[start];<br>            ans = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(ans,end-start+<span class="hljs-number">1</span>);<br>            start++<br>        &#125;<br>        end ++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans == length+<span class="hljs-number">1</span> ? <span class="hljs-number">0</span>:ans;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>水平垂直居中</title>
    <link href="/2022/06/03/div%E5%B1%85%E4%B8%AD/"/>
    <url>/2022/06/03/div%E5%B1%85%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<h1>div水平垂直居中</h1><h2 id="方法汇总">方法汇总</h2><ul><li><code>flex</code>布局实现</li><li><code>positon</code>实现<ul><li>元素已知宽度高度</li><li>元素未知宽度高度</li><li>元素已知宽度高度且只设置<code>margin</code></li></ul></li><li><code>table-cell</code>布局实现</li></ul><h2 id="HTML结构">HTML结构</h2><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span>bitter-gourd<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="flex布局实现">flex布局实现</h2><ol><li>父元素开<code>flex</code>布局</li><li>子元素是否有宽度或者高度不影响居中。</li></ol><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.father</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">237</span>, <span class="hljs-number">245</span>, <span class="hljs-number">198</span>);<br>    <span class="hljs-attribute">display</span>:flex;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>:center;<br>&#125;<br><br><span class="hljs-selector-class">.son</span>&#123;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">150px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">80px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">198</span>, <span class="hljs-number">232</span>, <span class="hljs-number">247</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="1.png" alt="子元素设置宽度高度"></p><p><img src="2.png" alt="子元素不设置宽度高度"></p><h2 id="position实现">position实现</h2><h3 id="元素已知宽度高度">元素已知宽度高度</h3><ol><li>父元素设置<code>relative</code>（必要的）</li><li>子元素设置<code>absolute</code></li><li>子元素设置<code>top</code>和<code>left</code></li><li>子元素设置<code>margin-top =-1/2 height</code>和<code>margin-left =-1/2 width</code></li></ol><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.father</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">226</span>, <span class="hljs-number">248</span>, <span class="hljs-number">131</span>);<br>    <span class="hljs-attribute">position</span>:relative;<br>&#125;<br><span class="hljs-selector-class">.son</span>&#123;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">150px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">80px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">171</span>, <span class="hljs-number">224</span>, <span class="hljs-number">247</span>);<br>    <span class="hljs-attribute">position</span>:absolute;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">margin</span>:-<span class="hljs-number">40px</span> <span class="hljs-number">0</span>  <span class="hljs-number">0</span> -<span class="hljs-number">75px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="1.png" alt="position实现之已知宽高"></p><h3 id="元素未知宽高">元素未知宽高</h3><ol><li>父元素设置<code>relative</code>（必要的）</li><li>子元素设置<code>absolute</code></li><li>子元素设置<code>top</code>和<code>left</code></li><li>子元素设置<code>transform: translate(-50%,-50%);</code></li></ol><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.father</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">226</span>, <span class="hljs-number">248</span>, <span class="hljs-number">131</span>);<br>    <span class="hljs-attribute">position</span>:relative;<br>&#125;<br><span class="hljs-selector-class">.son</span>&#123;<br>    <span class="hljs-comment">/* width:150px;</span><br><span class="hljs-comment">    height:80px; */</span><br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">171</span>, <span class="hljs-number">224</span>, <span class="hljs-number">247</span>);<br>    <span class="hljs-attribute">position</span>:absolute;<br>    <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">left</span>:<span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>,-<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="2.png" alt="position实现之未知宽高"></p><h3 id="元素已知宽高用margin实现">元素已知宽高用margin实现</h3><ol><li>父元素设置<code>relative</code>（必要的）</li><li>子元素设置<code>absolute</code></li><li>子元素设置<code>top</code>、<code>left</code>、<code>bottom</code>、<code>right</code> = 0</li><li>子元素设置<code>margin:auto</code></li></ol><p>注意：如果子元素不设置宽高，子元素会铺满父元素。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.father</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">226</span>, <span class="hljs-number">248</span>, <span class="hljs-number">131</span>);<br>    <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-selector-class">.son</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">171</span>, <span class="hljs-number">224</span>, <span class="hljs-number">247</span>);<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="1.png" alt="元素已知宽高用margin实现"></p><h2 id="table-cell布局实现">table-cell布局实现</h2><ol><li>父元素设置<code>display:table-cell;vertical-align:middle;</code>实现子元素垂直居中。</li><li>子元素设置<code>margin:0 auto</code>实现子元素水平居中。</li></ol><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.father</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">226</span>, <span class="hljs-number">248</span>, <span class="hljs-number">131</span>);<br>    <span class="hljs-attribute">display</span>: table-cell;            <br>    <span class="hljs-attribute">vertical-align</span>: middle;   <br>&#125;<br><br><span class="hljs-selector-class">.son</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">171</span>, <span class="hljs-number">224</span>, <span class="hljs-number">247</span>);<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="1.png" alt="table-cell布局实现"></p><h1>文字图片水平垂直居中</h1><h2 id="文字水平垂直居中">文字水平垂直居中</h2><ol><li>设置文字所在div盒子<code>display:table-cell</code></li><li>设置文字所在div盒子<code>text-align:center;vertical-align:center;</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">.<span class="hljs-property">father</span> &#123;<br>    <span class="hljs-attr">width</span>: 400px;<br>    <span class="hljs-attr">height</span>: 200px;<br>    background-<span class="hljs-attr">color</span>: <span class="hljs-title function_">rgb</span>(<span class="hljs-number">226</span>, <span class="hljs-number">248</span>, <span class="hljs-number">131</span>);<br>&#125;<br><br>.<span class="hljs-property">son</span> &#123;<br>    <span class="hljs-attr">width</span>: 150px;<br>    <span class="hljs-attr">height</span>: 80px;<br>    background-<span class="hljs-attr">color</span>: <span class="hljs-title function_">rgb</span>(<span class="hljs-number">171</span>, <span class="hljs-number">224</span>, <span class="hljs-number">247</span>);<br>    <span class="hljs-attr">display</span>: table-cell; <br>    text-<span class="hljs-attr">align</span>: center;<br>    vertical-<span class="hljs-attr">align</span>: middle; <br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="3.png" alt="文字水平垂直居中"></p><h2 id="图片水平垂直居中">图片水平垂直居中</h2><ol><li>设置img所在div盒子<code>display:table-cell</code></li><li>设置img所在div盒子<code>text-align:center;vertical-align:center;</code></li></ol><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.father</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">226</span>, <span class="hljs-number">248</span>, <span class="hljs-number">131</span>);<br>    <span class="hljs-attribute">display</span>: table-cell; <br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">vertical-align</span>: middle; <br>&#125;<br><br><span class="hljs-selector-tag">img</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>; <br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="4.png" alt="图片水平垂直居中"></p><p>**注意：**如果把图片设置为块状元素，则会失去<code>text-align:center</code></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.father</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">226</span>, <span class="hljs-number">248</span>, <span class="hljs-number">131</span>);<br>    <span class="hljs-attribute">display</span>: table-cell; <br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">vertical-align</span>: middle; <br>&#125;<br><br><span class="hljs-selector-tag">img</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>; <br>    <span class="hljs-attribute">display</span>:block;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="5.png" alt="图片为块状元素"></p><p>但是可以通过<code>flex</code>布局实现垂直水平居中</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.father</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">226</span>, <span class="hljs-number">248</span>, <span class="hljs-number">131</span>);<br>    <span class="hljs-comment">/*display: table-cell; </span><br><span class="hljs-comment">    text-align: center;</span><br><span class="hljs-comment">    vertical-align: middle; */</span><br>    <span class="hljs-attribute">display</span>:flex;<br>    <span class="hljs-attribute">justify-content</span>:center;<br>    <span class="hljs-attribute">align-items</span>:center;<br>&#125;<br><br><span class="hljs-selector-tag">img</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>; <br>    <span class="hljs-attribute">display</span>:block;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="4.png" alt="块状图片flex布局实现居中"></p>]]></content>
    
    
    <categories>
      
      <category>Q&amp;A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写curry函数</title>
    <link href="/2022/06/03/%E6%89%8B%E5%86%99curry%E5%87%BD%E6%95%B0/"/>
    <url>/2022/06/03/%E6%89%8B%E5%86%99curry%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1>柯里化</h1><h2 id="定义">定义</h2><p>维基百科中对柯里化 (Currying) 的定义为：</p><blockquote><p>In mathematics and computer science, currying is the technique of translating the evaluation of a function that takes multiple arguments (or a tuple of arguments) into evaluating a sequence of functions, each with a single argument.</p></blockquote><p>在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</p><h2 id="用法">用法</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">//3</span><br><br><span class="hljs-keyword">var</span> addCurry = <span class="hljs-title function_">curry</span>(add);<br><span class="hljs-title function_">addCurry</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)  <span class="hljs-comment">//3</span><br></code></pre></div></td></tr></table></figure><h2 id="手写Curry">手写<code>Curry</code></h2><h3 id="破产版">破产版</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myCurry</span>(<span class="hljs-params">fn</span>)&#123;<br>    <span class="hljs-keyword">const</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">const</span> newArgs = args.<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>));<br>        <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,newArgs)<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="%E7%A0%B4%E4%BA%A7%E7%89%88.jpg" alt="破产版"></p><p>上述测试结果分别是：NAN  6   24    24</p><p>虽然还是做不到原生<code>curry(1)(2)(3)</code>这样传递参数，但也算是完成了curry函数的作用之一，<strong>参数复用</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ajax</span>(<span class="hljs-params">type, url, data</span>) &#123;<br>    <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    xhr.<span class="hljs-title function_">open</span>(type, url, <span class="hljs-literal">true</span>);<br>    xhr.<span class="hljs-title function_">send</span>(data);<br>&#125;<br><br><span class="hljs-comment">// 虽然 ajax 这个函数非常通用，但在重复调用的时候参数冗余</span><br><span class="hljs-title function_">ajax</span>(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;www.test.com&#x27;</span>, <span class="hljs-string">&quot;name=kevin&quot;</span>)<br><span class="hljs-title function_">ajax</span>(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;www.test2.com&#x27;</span>, <span class="hljs-string">&quot;name=kevin&quot;</span>)<br><span class="hljs-title function_">ajax</span>(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;www.test3.com&#x27;</span>, <span class="hljs-string">&quot;name=kevin&quot;</span>)<br><br><span class="hljs-comment">// 利用 curry</span><br><span class="hljs-keyword">var</span> ajaxCurry = <span class="hljs-title function_">curry</span>(ajax);<br><br><span class="hljs-comment">// 以 POST 类型请求数据</span><br><span class="hljs-keyword">var</span> post = <span class="hljs-title function_">ajaxCurry</span>(<span class="hljs-string">&#x27;POST&#x27;</span>);<br><span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;www.test.com&#x27;</span>, <span class="hljs-string">&quot;name=kevin&quot;</span>);<br><br><span class="hljs-comment">// 以 POST 类型请求来自于 www.test.com 的数据</span><br><span class="hljs-keyword">var</span> postFromTest = <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;www.test.com&#x27;</span>);<br><span class="hljs-title function_">postFromTest</span>(<span class="hljs-string">&quot;name=kevin&quot;</span>);<br></code></pre></div></td></tr></table></figure><h3 id="优化版">优化版</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myCurry</span>(<span class="hljs-params">fn,args</span>)&#123;<br>    <span class="hljs-keyword">const</span> length = fn.<span class="hljs-property">length</span>;<br>    args = args || [];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">const</span> _args = args.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">let</span> arg; <span class="hljs-comment">//const定义需要赋初值</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>;i++)&#123;<br>            arg = <span class="hljs-variable language_">arguments</span>[i];<br>            _args.<span class="hljs-title function_">push</span>(arg);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(_args.<span class="hljs-property">length</span> &lt; length)&#123;<br>            <span class="hljs-keyword">return</span> myCurry.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>,fn,_args);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,_args);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> fn = <span class="hljs-title function_">myCurry</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([a, b, c]);<br>&#125;);<br><br><span class="hljs-title function_">fn</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>) <span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="hljs-title function_">fn</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>)(<span class="hljs-string">&quot;c&quot;</span>) <span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="hljs-title function_">fn</span>(<span class="hljs-string">&quot;a&quot;</span>)(<span class="hljs-string">&quot;b&quot;</span>)(<span class="hljs-string">&quot;c&quot;</span>) <span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="hljs-title function_">fn</span>(<span class="hljs-string">&quot;a&quot;</span>)(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>) <span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><br><span class="hljs-keyword">const</span> fn2 = <span class="hljs-title function_">myCurry</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b,c</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([a,b,c]);<br>&#125;,<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-title function_">fn2</span>(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>);  <span class="hljs-comment">//这样的结果错误的</span><br><br><span class="hljs-comment">//原因是 在fn2定义的时候 传入参数需要是数组形式[&quot;a&quot;]; args在递归的时候默认是数组</span><br><span class="hljs-keyword">const</span> fn2 = <span class="hljs-title function_">myCurry</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b,c</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([a,b,c]);<br>&#125;,[<span class="hljs-string">&quot;a&quot;</span>]); <br></code></pre></div></td></tr></table></figure><h3 id="Q：为什么要在return-myCurry-call-this-fn-args-；这行代码里面写this？">Q：为什么要在<code>return myCurry.call(this,fn,_args)；</code>这行代码里面写this？</h3><p>A：写成<code> this</code> 是因为希望根据环境的不同而设置不同的 <code>this</code> 值，如果写成<code>null</code>的话那么<code>fn</code>函数在调用的时候<code>this</code>始终指向<code>globalThis</code>，而如果<code>fn</code>是<code>obj</code>中的一个方法，则需要将<code>this</code>指向<code>obj</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fn = <span class="hljs-title function_">curry</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([a, b, c]);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&#125;);<br><span class="hljs-keyword">const</span> obj =&#123;<br><span class="hljs-attr">value</span>:<span class="hljs-number">1</span>,<br><span class="hljs-attr">fn</span>:fn<br>&#125;<br>obj.<span class="hljs-title function_">fn</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>)(<span class="hljs-string">&quot;c&quot;</span>) <br><br><span class="hljs-comment">// &#123; value: 2, fn: [Function (anonymous)] &#125;</span><br><span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><br>如果改成<br><span class="hljs-keyword">return</span> myCurry.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>,fn,_args)；<br><span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>,_args);<br>或者不改变<span class="hljs-variable language_">this</span>的指向，直接将_args传入并调用fn，就会违背<span class="hljs-variable language_">this</span>的规则，函数存在缺陷。<br><br><span class="hljs-comment">// globalThis</span><br><span class="hljs-comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br></code></pre></div></td></tr></table></figure><h3 id="终极版">终极版</h3><p><strong>支持占位符</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">curry</span>(<span class="hljs-params">fn, args, holes</span>) &#123;<br>    length = fn.<span class="hljs-property">length</span>;<br>    args = args || [];<br>    holes = holes || [];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> _args = args.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>),<br>            _holes = holes.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>),<br>            argsLen = args.<span class="hljs-property">length</span>,<br>            holesLen = holes.<span class="hljs-property">length</span>,<br>            arg, i, index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>            arg = <span class="hljs-variable language_">arguments</span>[i];<br>            <span class="hljs-comment">// 处理类似 fn(1, _, _, 4)(_, 3) 这种情况，index 需要指向 holes 正确的下标</span><br>            <span class="hljs-keyword">if</span> (arg === _ &amp;&amp; holesLen) &#123;<br>                index++<br>                <span class="hljs-keyword">if</span> (index &gt; holesLen) &#123;<br>                    _args.<span class="hljs-title function_">push</span>(arg);<br>                    _holes.<span class="hljs-title function_">push</span>(argsLen - <span class="hljs-number">1</span> + index - holesLen)<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 处理类似 fn(1)(_) 这种情况</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arg === _) &#123;<br>                _args.<span class="hljs-title function_">push</span>(arg);<br>                _holes.<span class="hljs-title function_">push</span>(argsLen + i);<br>            &#125;<br>            <span class="hljs-comment">// 处理类似 fn(_, 2)(1) 这种情况</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (holesLen) &#123;<br>                <span class="hljs-comment">// fn(_, 2)(_, 3)</span><br>                <span class="hljs-keyword">if</span> (index &gt;= holesLen) &#123;<br>                    _args.<span class="hljs-title function_">push</span>(arg);<br>                &#125;<br>                <span class="hljs-comment">// fn(_, 2)(1) 用参数 1 替换占位符</span><br>                <span class="hljs-keyword">else</span> &#123;<br>                    _args.<span class="hljs-title function_">splice</span>(_holes[index], <span class="hljs-number">1</span>, arg);<br>                    _holes.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>)<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                _args.<span class="hljs-title function_">push</span>(arg);<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">if</span> (_holes.<span class="hljs-property">length</span> || _args.<span class="hljs-property">length</span> &lt; length) &#123;<br>            <span class="hljs-keyword">return</span> curry.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, fn, _args, _holes);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, _args);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> _ = &#123;&#125;;<br><br><span class="hljs-keyword">var</span> fn = <span class="hljs-title function_">curry</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a, b, c, d, e</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([a, b, c, d, e]);<br>&#125;);<br><br><span class="hljs-comment">// 验证 输出全部都是 [1, 2, 3, 4, 5]</span><br><span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br><span class="hljs-title function_">fn</span>(_, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)(<span class="hljs-number">1</span>);<br><span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, _, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)(<span class="hljs-number">2</span>);<br><span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, _, <span class="hljs-number">3</span>)(_, <span class="hljs-number">4</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">5</span>);<br><span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>, _, _, <span class="hljs-number">4</span>)(_, <span class="hljs-number">3</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">5</span>);<br><span class="hljs-title function_">fn</span>(_, <span class="hljs-number">2</span>)(_, _, <span class="hljs-number">4</span>)(<span class="hljs-number">1</span>)(<span class="hljs-number">3</span>)(<span class="hljs-number">5</span>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Q&amp;A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写各类数组方法</title>
    <link href="/2022/06/03/%E6%89%8B%E5%86%99%E5%90%84%E7%B1%BB%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
    <url>/2022/06/03/%E6%89%8B%E5%86%99%E5%90%84%E7%B1%BB%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="Array-prototype-mySlice"><code>Array.prototype.mySlice()</code></h2><p><strong>手写切片方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">mySlice</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">start,end</span>)&#123;<br><span class="hljs-keyword">if</span>(start == <span class="hljs-literal">undefined</span>)  start = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(end == <span class="hljs-literal">undefined</span>) end = <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>;<br><span class="hljs-keyword">const</span> retArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(end - start);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span> ; i &lt; retArray.<span class="hljs-property">length</span>;i++)&#123;<br><span class="hljs-comment">//为了保证不存在的索引保持为empty值</span><br><span class="hljs-comment">//in在数组中可以来检验是否存在该索引&#x27;1 in arr&#x27;：arr数组是否存在索引为1的元素</span><br><span class="hljs-keyword">if</span>(i <span class="hljs-keyword">in</span> <span class="hljs-variable language_">this</span>)&#123;<br>retArray[i] = <span class="hljs-variable language_">this</span>[start + i];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> retArray;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Q&amp;A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>类数组对象如何转化为数组？</title>
    <link href="/2022/06/03/%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E5%A6%82%E4%BD%95%E8%BD%AC%E5%8C%96%E4%B8%BA%E6%95%B0%E7%BB%84/"/>
    <url>/2022/06/03/%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E5%A6%82%E4%BD%95%E8%BD%AC%E5%8C%96%E4%B8%BA%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1>类数组对象</h1><h2 id="定义">定义</h2><p>类数组对象就是含有<code>length</code>属性的对象，但不是数组。通常来可以用<code>index</code>下标来引用元素。</p><p><strong>常见的类数组：</strong></p><ul><li><strong>普通函数中的 argument 对象</strong>。需要注意的是，箭头函数中不存在这个对象。</li><li><strong>一些获取 Dom 集合的方法</strong>，如 <code>document.querySelectorAll()</code>、 <code>document.getElementsByClassName</code>、<code>document.getElementsByTagName() </code>也会返回类数组对象</li></ul><h1>类数组对象如何转化为数组？</h1><h2 id="Array-prototyle-slice-call">Array.prototyle.slice.call()</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(arrlike);<br>[].<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(arrlike);<br></code></pre></div></td></tr></table></figure><p><code>[]</code> 空数组效果同 <code>Array.prototype</code>，因为空数组本身没有 slice 方法，会走原型链拿到 <code>Array.prototype</code> 的方法。</p><p>因为<code>slice</code>方法会返回一个数组，且<code>silce</code>只需要类数组有<code>length</code>属性即可，如果不传入参数，则默认<code>start</code>为0，<code>end</code>为<code>length</code>。</p><h2 id="Array-from">Array.from()</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">arr = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(arrlike);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrlike);<br></code></pre></div></td></tr></table></figure><p>ES6 新出的方法，可以将类数组对象或者是可迭代对象转换为数组。</p><p>但与<code>Array.prototype.slice</code>不同的是，该方法会将不存在的索引对应的值设置为<code>undefined</code>，而<code>Array.prototype.slice</code>则会设置为<code>empty</code></p>]]></content>
    
    
    <categories>
      
      <category>Q&amp;A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写call、apply和bind</title>
    <link href="/2022/06/01/call%E3%80%81apply%E5%92%8Cbind%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/06/01/call%E3%80%81apply%E5%92%8Cbind%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1>手写call、apply和bind</h1><h2 id="call与apply的特点">call与apply的特点</h2><ul><li>调用 <code>call</code> 和 <code>apply</code> 的函数会立即执行。</li><li><code>call</code> 和 <code>apply</code> 的返回值就是函数的返回值。</li><li>调用 <code>call</code> 和 <code>apply</code> 指向 <code>undefined</code> 或者 <code>null</code> ，会将 <code>this</code> 指向 <code>window</code>。</li><li>调用 <code>call</code> 和 <code>apply</code> 指向一个值类型， 会将 <code>this</code> 指向由它们的构造函数创建的实例。这也就是为什么可以用<code>Object.prototype.toString.call()</code>来判断类型。</li></ul><h2 id="call-和-apply的区别">call 和 apply的区别</h2><blockquote><p>除了传参的形式不同没什么区别。</p></blockquote><p>传给<code>fn</code>的参数写法不同：</p><ul><li><code>call</code> 接收多个参数，第一个为函数上下文也就是 <code>this</code> ，后边参数为函数本身的参数。</li><li><code>apply</code> 接收两个参数，第一个参数为函数上下文 <code>this</code>，第二个参数为函数参数只不过是通过一个 <strong>数组</strong> 的形式传入的。</li></ul><p>只要记住 <code>apply</code> 是以 <code>a</code> 开头，它传给 <code>fun </code>的参数是 <code>Array</code>，也是以 <code>a</code> 开头的，就可以很好的分别这两个函数了。</p><h2 id="手写call">手写call</h2><blockquote><p>我们将模拟的步骤分为：</p><ol><li>将函数设为对象的属性</li><li>执行该函数</li><li>删除该函数</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myCall</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">target, ...args</span>) &#123;<br>  <span class="hljs-keyword">if</span>(target == <span class="hljs-literal">null</span>) target = globalThis;<br>  <span class="hljs-comment">//undefined == null   =&gt; true</span><br>  <span class="hljs-comment">//使用globalThis可以兼容node环境</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> target !== <span class="hljs-string">&#x27;object&#x27;</span>) target = <span class="hljs-title class_">Object</span>(target);<br>  <span class="hljs-keyword">const</span> key = <span class="hljs-title class_">Symbol</span>();<br>  target[key] = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-keyword">const</span> result = target[key](...args);<br>  <span class="hljs-keyword">delete</span> target[key];<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>在测试的时候的一点小发现：</strong></p><p>在node.js的环境下无法通过<code>var value = 2</code>这种方法引入全局变量。</p><p>而是直接<code>value = 2</code>或者<code>global.value = 2</code>引入全局变量。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> value1 = <span class="hljs-number">2</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);  <span class="hljs-comment">//undefined</span><br>value2 = <span class="hljs-number">2</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value2);  <span class="hljs-comment">//2</span><br></code></pre></div></td></tr></table></figure><h2 id="手写apply">手写apply</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myApply</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">target, arr</span>) &#123;<br>  <span class="hljs-keyword">if</span> (target == <span class="hljs-literal">null</span>) target = globalThis;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target !== <span class="hljs-string">&#x27;object&#x27;</span>) target = <span class="hljs-title class_">Object</span>(target);<br>  <span class="hljs-keyword">if</span> (!arr) &#123;<br>     <span class="hljs-keyword">const</span> key = <span class="hljs-title class_">Symbol</span>();<br>     target[key] = <span class="hljs-variable language_">this</span>;<br>     <span class="hljs-keyword">const</span> result = target[key]();<br>     <span class="hljs-keyword">delete</span> target[key];<br>     <span class="hljs-keyword">return</span> result;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr)) &#123;<br>     <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;Uncaught TypeError: CreateListFromArrayLike called on non-object&#x27;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>     <span class="hljs-keyword">const</span> args = [];<br>     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>        args.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;arr[&#x27;</span> + i + <span class="hljs-string">&#x27;]&#x27;</span>);<br>     &#125;<br>     <span class="hljs-keyword">const</span> key = <span class="hljs-title class_">Symbol</span>();<br>     target[key] = <span class="hljs-variable language_">this</span>;<br>     <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;target[key](&#x27;</span> + args + <span class="hljs-string">&#x27;)&#x27;</span>);<br>     <span class="hljs-keyword">delete</span> target[key];<br>     <span class="hljs-keyword">return</span> result;<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在网上寻找了一下自己实现的<code>apply</code>，发现很多人都没有考虑到传入的参数不是数组该如何处理。我先用了<code>Function.prototype.apply</code>尝试了一下，看看如果传入的参数不是数组会发生什么。</p><p><img src="apply%E4%BC%A0%E5%85%A5%E5%8F%82%E6%95%B0%E4%B8%8D%E6%98%AF%E6%95%B0%E7%BB%84.png" alt="apply传入参数不是数组"></p><p>于是我在实现<code>myApply</code>的时候加了一个判断。导致代码量比较大…不知道有没有优化的方案。</p><p><strong>测试代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> value = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">name, age</span>) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>   <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">value</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>,<br>      <span class="hljs-attr">name</span>: name,<br>      <span class="hljs-attr">age</span>: age<br>   &#125;<br>&#125;<br>bar.<span class="hljs-title function_">myApply</span>(<span class="hljs-literal">null</span>); <br>bar.<span class="hljs-title function_">myApply</span>(<span class="hljs-literal">undefined</span>);<br>bar.<span class="hljs-title function_">myApply</span>(obj);<br><br><span class="hljs-comment">// console.log(bar.apply(obj, [&#x27;kevin&#x27;, 18]))</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar.<span class="hljs-title function_">myApply</span>(obj, [<span class="hljs-string">&#x27;kevin&#x27;</span>, <span class="hljs-number">18</span>]))<br></code></pre></div></td></tr></table></figure><p><strong>测试结果</strong></p><p><img src="%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="测试结果"></p><h2 id="bind的特点">bind的特点</h2><ol><li>传递的第一个参数做为调用它的函数的this指向（bind可传递若干参数）。</li><li>若第一个参数传递基础数据类型，则调用他的函数的this指向该基础数据类型的包装类实例化对象。</li><li>若第一个参数为null或undefined，则调用他的函数的this指向window。</li><li>bind的第二个之后的参数为调用它的函数的参数列表。</li><li>bind方法会返回一个新的方法，并且该方法满足柯里化，仍可以传递参数，但这个方法的this不可被call、apply、bind改变。</li><li>bind方法返回的新方法，如果使用new实例化，那么原本通过bind绑定的this指向的对象会失效，this将指向到新实例化的对象上，且可以使用原方法原型链上的属性或方法。</li></ol><h2 id="bind-和-call-apply-的区别">bind 和 call/apply 的区别</h2><p><strong>是否立刻执行</strong>：</p><ul><li><code>call/apply</code> 改变了函数的 <code>this</code> 上下文后 <strong>马上</strong> 执行该函数。</li><li><code>bind</code> 则是返回改变了上下文后的函数, <strong>不执行该函数</strong> 。</li></ul><p><strong>返回值的区别</strong>:</p><ul><li><code>call/apply</code> 返回 <code>fun</code> 的执行结果。</li><li><code>bind</code> 返回 <code>fun</code> 的拷贝，并指定了 <code>fun</code> 的 <code>this</code> 指向，保存了 <code>fun</code> 的参数。</li></ul><h2 id="手写bind">手写bind</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myBind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">objThis, ...params</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span> !== <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Function.prototype.bind - what is trying to be bound is not callable&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span>; <br>    <span class="hljs-comment">// 存储源函数以及上方的params(函数参数)</span><br>    <span class="hljs-comment">// 对返回的函数 secondParams 二次传参</span><br>    <span class="hljs-keyword">let</span> fToBind = <span class="hljs-keyword">function</span> (<span class="hljs-params">...secondParams</span>) &#123;<br>    <span class="hljs-keyword">const</span> isNew = <span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> fToBind <br>    <span class="hljs-comment">// this是否是fToBind的实例 也就是返回的fToBind是否通过new调用（可以通过new调用也可以直接调用）</span><br>    <span class="hljs-keyword">const</span> context = isNew ? <span class="hljs-variable language_">this</span> : <span class="hljs-title class_">Object</span>(objThis) <br>    <span class="hljs-comment">// new调用就绑定到this上,否则就绑定到传入的objThis上</span><br>    <span class="hljs-keyword">return</span> self.<span class="hljs-title function_">call</span>(context, ...params, ...secondParams); <br>     <span class="hljs-comment">// 用call调用源函数绑定this的指向并传递参数,返回执行结果</span><br>    &#125;;<br>    <span class="hljs-keyword">if</span> (self.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) &#123;<br>    <span class="hljs-comment">// 复制源函数的prototype给fToBind 一些情况下函数没有prototype，比如箭头函数</span><br>        fToBind.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(self.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> fToBind; <span class="hljs-comment">// 返回拷贝的函数</span><br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Animal</span>(<span class="hljs-params">name, color</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color;<br>&#125;<br><br><span class="hljs-title class_">Animal</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`I&#x27;m a <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.color&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>;<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Cat</span> = <span class="hljs-title class_">Animal</span>.<span class="hljs-title function_">myBind</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;cat&quot;</span>);<br><span class="hljs-comment">//在直接调用的时候this指向null即window</span><br><span class="hljs-keyword">const</span> cat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;white&quot;</span>);<br><span class="hljs-comment">//new一个实例化对象，this指向实例化对象，也就是自己cat</span><br><span class="hljs-keyword">if</span> (<br>  cat.<span class="hljs-title function_">say</span>() === <span class="hljs-string">&quot;I&#x27;m a white cat&quot;</span> &amp;&amp;<br>  cat <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Cat</span> &amp;&amp;<br>  cat <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Animal</span><br>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;success&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Q&amp;A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写new</title>
    <link href="/2022/06/01/new%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <url>/2022/06/01/new%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1>new操作符</h1><h2 id="new构造函数时发生了什么？">new构造函数时发生了什么？</h2><ul><li>首先会创建一个空对象，这个新对象的<code>__proto__</code>属性指向构造函数的<code>prototype</code>属性</li><li>此时构造函数执行环境的<code>this</code>指向这个新对象</li><li>执行构造函数中的代码，一般是通过<code>this</code>给新对象添加新的成员属性或方法。</li><li>最后判断这个构造函数是否有返回值，如果有返回值且该返回值为对象的话就等于该返回值，如果没有就返回新对象。</li></ul><h2 id="手写new">手写new</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myNew</span>(<span class="hljs-params">func,...args</span>)&#123;<br><span class="hljs-comment">//创建一个新对象，并且指定原型为func.prototype</span><br><span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(func.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><span class="hljs-comment">//让这一次func在执行的时候this指向obj</span><br><span class="hljs-keyword">var</span> ret = func.<span class="hljs-title function_">call</span>(obj,...args);<br><span class="hljs-comment">//看看这个构造函数是否有返回值，如果有返回值且该返回值为对象的话就等于该返回值</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> ret === <span class="hljs-string">&#x27;object&#x27;</span> ? ret : obj;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Q&amp;A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何实现深拷贝与浅拷贝？</title>
    <link href="/2022/05/31/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2022/05/31/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h1>深拷贝与浅拷贝</h1><h2 id="浅拷贝">浅拷贝</h2><p><img src="%E6%B5%85%E6%8B%B7%E8%B4%9D.png" alt="浅拷贝"></p><blockquote><p>创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。</p></blockquote><h3 id="代码实现">代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">clone</span>(<span class="hljs-params">target</span>)&#123;<br>    <span class="hljs-keyword">let</span> cloneTarget = &#123;&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> item <span class="hljs-keyword">in</span> target)&#123;<br>        cloneTarget[item] = target[item];<br>    &#125;<br>    <span class="hljs-keyword">return</span> cloneTarget;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="浅拷贝的特点">浅拷贝的特点</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;andy&#x27;</span>,<br><span class="hljs-attr">msg</span>: &#123;<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> o = <span class="hljs-title function_">clone</span>(obj);<br>o.<span class="hljs-property">id</span> =<span class="hljs-number">2</span> ;<br>o.<span class="hljs-property">msg</span>.<span class="hljs-property">age</span> = <span class="hljs-number">19</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">id</span>);                 <span class="hljs-comment">//1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o.<span class="hljs-property">id</span>); <span class="hljs-comment">//2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o.<span class="hljs-property">id</span> === obj.<span class="hljs-property">id</span>); <span class="hljs-comment">//false</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o.<span class="hljs-property">msg</span>.<span class="hljs-property">age</span>); <span class="hljs-comment">//19</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">msg</span>.<span class="hljs-property">age</span>); <span class="hljs-comment">//19</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o.<span class="hljs-property">msg</span> === obj.<span class="hljs-property">msg</span>); <span class="hljs-comment">//true</span><br><br>obj.<span class="hljs-property">msg</span>.<span class="hljs-property">age</span> = <span class="hljs-number">20</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o.<span class="hljs-property">msg</span>.<span class="hljs-property">age</span>); <span class="hljs-comment">//20</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">msg</span>.<span class="hljs-property">age</span>); <span class="hljs-comment">//20</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(o.<span class="hljs-property">msg</span> === obj.<span class="hljs-property">msg</span>); <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><p>不难发现，如果是基本数据类型，浅拷贝拷贝的是值，如果进行修改不会影响原有对象。如果是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。</p><h2 id="对象赋值">对象赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;andy&#x27;</span>,<br><span class="hljs-attr">msg</span>: &#123;<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> obj2 = obj;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj2.<span class="hljs-property">id</span>);<span class="hljs-comment">//1</span><br><br>obj2.<span class="hljs-property">id</span> = <span class="hljs-number">3</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj2.<span class="hljs-property">id</span>);<span class="hljs-comment">//3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">id</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj2.<span class="hljs-property">id</span> === obj.<span class="hljs-property">id</span>);<span class="hljs-comment">//ture</span><br></code></pre></div></td></tr></table></figure><p>当我们把一个对象赋值给一个新的变量时，<strong>赋的其实是该对象的在栈中的地址，而不是堆中的数据</strong>。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。因此无论是基础数据类型还是引用数据类型，当其中一个对象的某个属性发生改变时，另一个对象的该属性都会发生改变。</p><h2 id="深拷贝">深拷贝</h2><p><img src="%E6%B7%B1%E6%8B%B7%E8%B4%9D.png" alt="深拷贝"></p><blockquote><p>将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象</p></blockquote><h3 id="代码实现-2">代码实现</h3><h4 id="破产版（递归实现）">破产版（递归实现）</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">target</span>)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&#x27;object&#x27;</span>)&#123;<br><span class="hljs-keyword">let</span> cloneTarget = &#123;&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> target)&#123;<br>cloneTarget[key] = <span class="hljs-title function_">clone</span>(target[key]);<br>&#125;<br><span class="hljs-keyword">return</span> cloneTarget;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> target;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>但破产版存在许多问题比如</p><h4 id="1-没有考虑引用对象中的数组的解决方案">1.没有考虑引用对象中的数组的解决方案</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">target</span>)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&#x27;object&#x27;</span>)&#123;<br><span class="hljs-keyword">let</span> cloneTarget = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(target)? [] : &#123;&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> target)&#123;<br>cloneTarget[key] = <span class="hljs-title function_">clone</span>(target[key]);<br>&#125;<br><span class="hljs-keyword">return</span> cloneTarget;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> target;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="2-循环引用的解决方案">2.循环引用的解决方案</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> target = &#123;<br>    <span class="hljs-attr">field1</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">field2</span>: <span class="hljs-literal">undefined</span>,<br>    <span class="hljs-attr">field3</span>: &#123;<br>        <span class="hljs-attr">child</span>: <span class="hljs-string">&#x27;child&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">field4</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>]<br>&#125;;<br>target.<span class="hljs-property">target</span> = target;<br></code></pre></div></td></tr></table></figure><p>直接使用1中给出的<code>deepClone</code>函数会导致栈溢出。</p><p>这是因为上面的对象存在循环引用的情况，即对象的属性直接或间接引用了自身。</p><p>Q：<strong>如何解决这个问题？</strong></p><p>A：我们可以额外开辟一个存储空间，来存储当前对象和拷贝对象的对应关系，当需要拷贝当前对象时，先去存储空间中找，有没有拷贝过这个对象，如果有的话直接返回，如果没有的话继续拷贝。</p><p>因为这个存储空间需要存储key-value的形式，且key需要是一个引用对象，而Object只能使用数值、字符串或者symbol作为key，而Map可以使用任何Javascript数据类型作为key值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">target,map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>()</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&#x27;object&#x27;</span>)&#123;<br>        <span class="hljs-keyword">let</span> cloneTarget = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(target)? [] : &#123;&#125;;<br>        <span class="hljs-keyword">if</span>(map.<span class="hljs-title function_">get</span>(target))&#123;<br>            <span class="hljs-keyword">return</span> map.<span class="hljs-title function_">get</span>(target);<br>            <span class="hljs-comment">//看看map中有没有被克隆过的对象，如果有就直接返回。</span><br>            <span class="hljs-comment">//因为第一次克隆target.target的时候就已经把整个target放进map中</span><br>        &#125;<br>        map.<span class="hljs-title function_">set</span>(target,cloneTarget);<br>        <span class="hljs-comment">//如果没有clone过就把当前对象作为key，克隆对象作为value进行存储</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> target)&#123;<br>            cloneTarget[key] = <span class="hljs-title function_">deepClone</span>(target[key],map);<br>        &#125;<br>        <span class="hljs-keyword">return</span> cloneTarget;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> target;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="3-拷贝对象比较大解决方案">3.拷贝对象比较大解决方案</h4><p>使用<code>weakMap</code></p><blockquote><p>WeakMap 对象是一组键/值对的集合，其中的key是弱映射的。其键必须是Object或者继承自Object的类型，而值可以是任意的。如果尝试使用非对象设置key会抛出TypeError。</p></blockquote><p>如果我们要拷贝的对象非常庞大时，使用<code>Map</code>会对内存造成非常大的额外消耗，而且我们需要手动清除<code>Map</code>的属性才能释放这块内存，而<code>WeakMap</code>会帮我们巧妙化解这个问题。</p><h3 id="破产版优化结果">破产版优化结果</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">target,map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>()</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> target === <span class="hljs-string">&#x27;object&#x27;</span>)&#123;<br>        <span class="hljs-keyword">let</span> cloneTarget = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(target)? [] : &#123;&#125;;<br>        <span class="hljs-keyword">if</span>(map.<span class="hljs-title function_">get</span>(target))&#123;<br>            <span class="hljs-keyword">return</span> map.<span class="hljs-title function_">get</span>(target);<br>            <span class="hljs-comment">//看看map中有没有被克隆过的对象，如果有就直接返回。</span><br>            <span class="hljs-comment">//因为第一次克隆target.target的时候就已经把整个target放进map中</span><br>        &#125;<br>        map.<span class="hljs-title function_">set</span>(target,cloneTarget);<br>        <span class="hljs-comment">//如果没有clone过就把当前对象作为key，克隆对象作为value进行存储</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> target)&#123;<br>            cloneTarget[key] = <span class="hljs-title function_">deepClone</span>(target[key],map);<br>        &#125;<br>        <span class="hljs-keyword">return</span> cloneTarget;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> target;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="终极版（处理各种数据结果）">终极版（处理各种数据结果）</h3><h4 id="合理的判断引用类型">合理的判断引用类型</h4><p>需要我们合理的判断是否为引用类型需要考虑到<code>function</code>和<code>null</code>，因为typeof判断类型存在缺陷。</p><p>我们需要自己封装一个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isObject</span>(<span class="hljs-params">target</span>)&#123;<br><span class="hljs-keyword">const</span> type = <span class="hljs-keyword">typeof</span> target;<br><span class="hljs-keyword">return</span> target !== <span class="hljs-literal">null</span> &amp;&amp; (type === <span class="hljs-string">&#x27;object&#x27;</span> || type === <span class="hljs-string">&#x27;function&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// if(typeof target === &#x27;object&#x27;)  改成  if(isObject(target))</span><br></code></pre></div></td></tr></table></figure><h4 id="获取可继续遍历对象的具体数据类型">获取可继续遍历对象的具体数据类型</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getType</span>(<span class="hljs-params">target</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(target);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="抽离出具体数据类型">抽离出具体数据类型</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mapTag = <span class="hljs-string">&#x27;[object Map]&#x27;</span>;<br><span class="hljs-keyword">const</span> setTag = <span class="hljs-string">&#x27;[object Set]&#x27;</span>;<br><span class="hljs-keyword">const</span> arrayTag = <span class="hljs-string">&#x27;[object Array]&#x27;</span>;<br><span class="hljs-keyword">const</span> objectTag = <span class="hljs-string">&#x27;[object Object]&#x27;</span>;<br><span class="hljs-keyword">const</span> argsTag = <span class="hljs-string">&#x27;[object Arguments]&#x27;</span>;<br><br><span class="hljs-keyword">const</span> boolTag = <span class="hljs-string">&#x27;[object Boolean]&#x27;</span>;<br><span class="hljs-keyword">const</span> dateTag = <span class="hljs-string">&#x27;[object Date]&#x27;</span>;<br><span class="hljs-keyword">const</span> errorTag = <span class="hljs-string">&#x27;[object Error]&#x27;</span>;<br><span class="hljs-keyword">const</span> numberTag = <span class="hljs-string">&#x27;[object Number]&#x27;</span>;<br><span class="hljs-keyword">const</span> regexpTag = <span class="hljs-string">&#x27;[object RegExp]&#x27;</span>;<br><span class="hljs-keyword">const</span> stringTag = <span class="hljs-string">&#x27;[object String]&#x27;</span>;<br><span class="hljs-keyword">const</span> symbolTag = <span class="hljs-string">&#x27;[object Symbol]&#x27;</span>;<br><br><span class="hljs-keyword">const</span> deepTag = [mapTag,setTag,arrayTag,objectTag,argsTag];<br><span class="hljs-comment">//把可继续遍历的数据类型放入数组</span><br></code></pre></div></td></tr></table></figure><h4 id="考虑symbol">考虑<code>symbol()</code></h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">cloneSymbol</span>(<span class="hljs-params">target</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>(<span class="hljs-title class_">Symbol</span>(target.<span class="hljs-property">description</span>));<br>&#125;<br><span class="hljs-comment">//return Object(Symbol.prototype.valueOf.call(target)); </span><br><span class="hljs-comment">//也有人这样写，不是很明白，先留个坑</span><br></code></pre></div></td></tr></table></figure><h4 id="考虑function">考虑<code>function</code></h4><p>实际上克隆函数是没有实际应用场景的，两个对象使用一个在内存中处于同一个地址的函数也是没有任何问题的。</p><p>首先，我们可以通过<code>prototype</code>来区分下箭头函数和普通函数，箭头函数是没有<code>prototype</code>的。</p><p>我们可以直接使用<code>eval</code>和函数字符串来重新生成一个箭头函数，注意这种方法是不适用于普通函数的。</p><p>我们可以使用正则来处理普通函数：</p><p>分别使用正则取出函数体和函数参数，然后使用<code>new Function ([arg1[, arg2[, ...argN]],] functionBody)</code>构造函数重新构造一个新的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">cloneFunction</span>(<span class="hljs-params">func</span>) &#123;<br>    <span class="hljs-keyword">const</span> bodyReg = <span class="hljs-regexp">/(?&lt;=&#123;)(.|\n)+(?=&#125;)/m</span>;<br>    <span class="hljs-keyword">const</span> paramReg = <span class="hljs-regexp">/(?&lt;=\().+(?=\)\s+&#123;)/</span>;<br>    <span class="hljs-keyword">const</span> funcString = func.<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-keyword">if</span> (func.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) &#123;<br>        <span class="hljs-keyword">const</span> param = paramReg.<span class="hljs-title function_">exec</span>(funcString);<br>        <span class="hljs-keyword">const</span> body = bodyReg.<span class="hljs-title function_">exec</span>(funcString);<br>        <span class="hljs-keyword">if</span> (body) &#123;<br>            <span class="hljs-keyword">if</span> (param) &#123;<br>                <span class="hljs-keyword">const</span> paramArr = param[<span class="hljs-number">0</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(...paramArr, body[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(body[<span class="hljs-number">0</span>]);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>(funcString);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="终极版优化结果">终极版优化结果</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> mapTag = <span class="hljs-string">&#x27;[object Map]&#x27;</span>;<br><span class="hljs-keyword">const</span> setTag = <span class="hljs-string">&#x27;[object Set]&#x27;</span>;<br><span class="hljs-keyword">const</span> arrayTag = <span class="hljs-string">&#x27;[object Array]&#x27;</span>;<br><span class="hljs-keyword">const</span> objectTag = <span class="hljs-string">&#x27;[object Object]&#x27;</span>;<br><span class="hljs-keyword">const</span> argsTag = <span class="hljs-string">&#x27;[object Arguments]&#x27;</span>;<br><br><span class="hljs-keyword">const</span> boolTag = <span class="hljs-string">&#x27;[object Boolean]&#x27;</span>;<br><span class="hljs-keyword">const</span> dateTag = <span class="hljs-string">&#x27;[object Date]&#x27;</span>;<br><span class="hljs-keyword">const</span> errorTag = <span class="hljs-string">&#x27;[object Error]&#x27;</span>;<br><span class="hljs-keyword">const</span> numberTag = <span class="hljs-string">&#x27;[object Number]&#x27;</span>;<br><span class="hljs-keyword">const</span> regexpTag = <span class="hljs-string">&#x27;[object RegExp]&#x27;</span>;<br><span class="hljs-keyword">const</span> stringTag = <span class="hljs-string">&#x27;[object String]&#x27;</span>;<br><span class="hljs-keyword">const</span> symbolTag = <span class="hljs-string">&#x27;[object Symbol]&#x27;</span>;<br><br><span class="hljs-keyword">const</span> deepTag = [mapTag,setTag,arrayTag,objectTag,argsTag];<br><span class="hljs-comment">//把可继续遍历的数据类型放入数组</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">forEach</span>(<span class="hljs-params">array,iteratee</span>)&#123;<br>    <span class="hljs-keyword">let</span> index = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> length = array.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">while</span>(++index &lt; length)&#123;<br>        <span class="hljs-title function_">iteratee</span>(array[index],index);<br>    &#125;<br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isObject</span>(<span class="hljs-params">target</span>)&#123;<br>    <span class="hljs-keyword">const</span> type = typeop target;<br>    <span class="hljs-keyword">return</span> target !== <span class="hljs-literal">null</span> &amp;&amp;(type === <span class="hljs-string">&#x27;object&#x27;</span> || type === <span class="hljs-string">&#x27;function&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getType</span>(<span class="hljs-params">target</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(target);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getInit</span>(<span class="hljs-params">target</span>)&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Ctor</span> = target.<span class="hljs-property">constructor</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ctor</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">cloneSymbol</span>(<span class="hljs-params">target</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>(<span class="hljs-title class_">Symbol</span>(target.<span class="hljs-property">description</span>));<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">cloneFunction</span>(<span class="hljs-params">func</span>) &#123;<br>    <span class="hljs-keyword">const</span> bodyReg = <span class="hljs-regexp">/(?&lt;=&#123;)(.|\n)+(?=&#125;)/m</span>;<br>    <span class="hljs-keyword">const</span> paramReg = <span class="hljs-regexp">/(?&lt;=\().+(?=\)\s+&#123;)/</span>;<br>    <span class="hljs-keyword">const</span> funcString = func.<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-keyword">if</span> (func.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) &#123;<br>        <span class="hljs-keyword">const</span> param = paramReg.<span class="hljs-title function_">exec</span>(funcString);<br>        <span class="hljs-keyword">const</span> body = bodyReg.<span class="hljs-title function_">exec</span>(funcString);<br>        <span class="hljs-keyword">if</span> (body) &#123;<br>            <span class="hljs-keyword">if</span> (param) &#123;<br>                <span class="hljs-keyword">const</span> paramArr = param[<span class="hljs-number">0</span>].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(...paramArr, body[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(body[<span class="hljs-number">0</span>]);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>(funcString);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">cloneReg</span>(<span class="hljs-params">target</span>)&#123;<br>    <span class="hljs-keyword">const</span> reFlags = <span class="hljs-regexp">/\w*$/</span>;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">new</span> target.<span class="hljs-title function_">constructor</span>(<span class="hljs-params">target.source,reFalgs.exec(target)</span>);<br>    result.<span class="hljs-property">lastIndex</span> = target.<span class="hljs-property">lastIndex</span>;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">cloneOtherType</span>(<span class="hljs-params">target,type</span>)&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Ctor</span> = target.<span class="hljs-property">constructor</span>;<br>    <span class="hljs-keyword">switch</span>(type)&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-attr">boolTag</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-attr">numberTag</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-attr">stringTag</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-attr">errorTag</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-attr">dateTag</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ctor</span>(target);<br>        <span class="hljs-keyword">case</span> <span class="hljs-title function_">regexpTag</span>(target):<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">cloneReg</span>(target);<br>        <span class="hljs-keyword">case</span> <span class="hljs-attr">symbolTag</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">cloneSymbol</span>(target);<br>        <span class="hljs-keyword">case</span> <span class="hljs-attr">funcTag</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">cloneFunction</span>(target);<br>        <span class="hljs-attr">default</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">clone</span>(<span class="hljs-params">target,map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>()</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_">isObject</span>(target))&#123;<br>        <span class="hljs-keyword">return</span> target;<br>    &#125;<br>    <br>    <span class="hljs-keyword">const</span> type = <span class="hljs-title function_">getType</span>(target);<br>    <span class="hljs-keyword">let</span> cloneTarget;<br>    <span class="hljs-keyword">if</span>(deepTag.<span class="hljs-title function_">includes</span>(type))&#123;<br>        cloneTarget = <span class="hljs-title function_">getInit</span>(target,type);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">cloneOtherTpye</span>(target,type);<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(map.<span class="hljs-title function_">get</span>(target))&#123;<br>        <span class="hljs-keyword">return</span> target;<br>    &#125;<br>    map.<span class="hljs-title function_">set</span>(target,cloneTarget);<br>    <br>    <span class="hljs-keyword">if</span>(type === setTag)&#123;<br>        target.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span>&#123;<br>            cloneTarget.<span class="hljs-title function_">add</span>(<span class="hljs-title function_">clone</span>(value));<br>        &#125;);<br>        <span class="hljs-keyword">return</span> cloneTarget;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(type === setTag) &#123;<br>        target.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>            cloneTarget.<span class="hljs-title function_">add</span>(<span class="hljs-title function_">clone</span>(value));<br>        &#125;);<br>        <span class="hljs-keyword">return</span> cloneTarget;<br> &#125;<br>    <br>    <span class="hljs-keyword">if</span>(type === mapTag)&#123;<br>        target.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">value,key</span>)=&gt;</span>&#123;<br>            cloneTarget.<span class="hljs-title function_">set</span>(key,<span class="hljs-title function_">clone</span>(value));<br>        &#125;);<br>        <span class="hljs-keyword">return</span> cloneTarget;<br>    &#125;<br>    <br>    <span class="hljs-keyword">const</span> keys = type === arrTag ? <span class="hljs-literal">undefined</span> : <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(target);<br>    <span class="hljs-title function_">forEach</span>(keys || target,<span class="hljs-function">(<span class="hljs-params">value,key</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(keys) &#123;<br>            key = value;<br>        &#125;<br>        cloneTarget[key] = <span class="hljs-title function_">clone</span>(target[key],map);<br>    &#125;);<br>    <br>    <span class="hljs-keyword">return</span> cloneTarget;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Q&amp;A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>instanceof和typeof有什么区别？</title>
    <link href="/2022/05/31/instanceof%E5%92%8Ctypeof/"/>
    <url>/2022/05/31/instanceof%E5%92%8Ctypeof/</url>
    
    <content type="html"><![CDATA[<h1>探讨<code>instanceof</code>和<code>typeof</code></h1><h2 id="typeof"><code>typeof</code></h2><p>先来看看这些语句的结果</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;bitter-gourd&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-number">123</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-number">123n</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> []);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> &#123;&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Symbol</span>());<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>)); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">typeof</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;));<br></code></pre></div></td></tr></table></figure><p>结果如下：</p><p><img src="typeof%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="测试结果"></p><p>通过以上例子可以看出，<code>typeof</code>只能准确判断原始数据类型和函数（函数其实是对象，并不属于另一种数据类型，但也能够使用 <code>typeof </code>进行区分），但无法精确判断出引用数据类型。</p><p>有一点需要注意，调用<code>typeof null</code>返回的是<code>object</code>，这是因为特殊值<code>null</code>被认为是一个对空对象的引用（也叫空对象指针）。</p><h3 id="typeof的实现原理"><code>typeof</code>的实现原理</h3><p>其实，javascript在底层存储变量的时候，会在变量的机器码的低位1-3位存储其类型信息</p><ul><li>000：对象</li><li>010：浮点数</li><li>100：字符串</li><li>110：布尔</li><li>1：整数</li></ul><p>但对于 <code>undefined</code> 和 <code>null</code> 来说，这两个值的信息存储是有点特殊的。</p><p><code>null</code>：所有机器码均为0</p><p><code>undefined</code>：用 −2^30 整数来表示</p><p>由于 <code>null</code> 的所有机器码均为0，因此直接被当做了对象来看待。</p><h2 id="instanceof"><code>instanceof</code></h2><p><code>instanceof</code>运算符返回一个布尔值，可以用于检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上，也就是用于判断某个实例是否属于某构造函数。更规范的说法是，<strong>只要右边变量的<code>prototype</code>在左边变量的原型链上就返回 true，否则返回 false。</strong></p><h4 id="instanceof的实现原理"><code>instanceof的实现原理</code></h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Myinstanceof</span>(<span class="hljs-params">leftVaule, rightVaule</span>) &#123; <br>    <span class="hljs-keyword">let</span> rightProto = rightVaule.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>; <span class="hljs-comment">// 取右表达式的 prototype 值</span><br>    leftVaule = leftVaule.<span class="hljs-property">__proto__</span>; <span class="hljs-comment">// 取左表达式的__proto__值</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">if</span> (leftVaule === <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (leftVaule === rightProto) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <br>        leftVaule = leftVaule.<span class="hljs-property">__proto__</span> <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="instanceof与typeof的区别"><code>instanceof</code>与<code>typeof</code>的区别</h2><ul><li><code>typeof</code>会返回一个运算数的基本类型，<code>instanceof</code>返回的是布尔值</li><li><code>instanceof</code>可以准确判断引用数据类型，但是不能正确判断原始数据类型</li><li><code>typeof</code>虽然可以判断原始数据类型（null 除外），但是无法判断引用数据类型（function 除外）。</li></ul><h2 id="Object-prototype-toString"><code>Object.prototype.toString</code></h2><p><code>instanceof</code> 也可能判断不准确，比如一个数组，他可以被 <code>instanceof</code> 判断为 Object。所以我们要想比较准确的判断对象实例的类型时，可以采取 <code>Object.prototype.toString.call</code> 方法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-number">123</span>) <span class="hljs-comment">// &quot;[object Number]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-string">&#x27;bitter-gourd&#x27;</span>) <span class="hljs-comment">// &quot;[object String]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(&#123;<span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;19&#x27;</span>&#125;) <span class="hljs-comment">// &quot;[object Object]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>([<span class="hljs-number">123</span>,<span class="hljs-string">&#x27;bitter-gourd&#x27;</span>]) <span class="hljs-comment">// &quot;[object Array]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// &quot;[object Boolean]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;) <span class="hljs-comment">// &quot;[object Function]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>) <span class="hljs-comment">// &quot;[object Null]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">undefined</span>) <span class="hljs-comment">// &quot;[object Undefined]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-title class_">Symbol</span>(<span class="hljs-number">1</span>)) <span class="hljs-comment">// &quot;[object Symbol]&quot;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Q&amp;A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>知识点清单</title>
    <link href="/2022/05/31/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <url>/2022/05/31/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1>前端</h1><h2 id="JavaScript">JavaScript</h2><ul><li>[x] 原型链</li><li>[x] 继承（备注：没有笔记产出，因为红宝书上写的太赞了）</li><li>[ ] 作用域</li><li>[ ] 闭包</li><li>[ ] 变量提升</li><li>[ ] 上下文</li><li>[x] <code>this</code>指向（备注：this真是太难了！）</li><li>[ ] 立即执行函数</li><li>[x] <code>instanceof</code>和<code>typeof</code></li><li>[x] 手写<code>apply</code>、<code>call</code>和<code>bind</code>（备注：bind理解较差）</li><li>[ ] 事件循环机制</li><li>[x] <code>Ajax</code></li><li>[x] <code>promise</code></li><li>[x] 柯里化（备注：存在占位符情况理解较差）</li><li>[x] 手写<code>new</code>操作符</li><li>[x] 深拷贝、浅拷贝</li></ul><h3 id="数组方法">数组方法</h3><ul><li>[x] 手写<code>reduce</code></li><li>[x] 用<code>reduce</code>实现<code>map</code></li><li>[ ] 手写<code>concat</code></li><li>[x] 手写<code>slice</code></li><li>[ ] 手写<code>splice</code></li><li>[ ] 手写<code>indexOf</code>(字符串方法)</li><li>[x] 类数组转化为数组</li></ul><h3 id="TypeScript">TypeScript</h3><h2 id="CSS">CSS</h2><ul><li>[ ] <code>BFC</code></li><li>[ ] <code>position</code></li><li>[ ] <code>flex</code>布局</li><li>[x] <code>css</code>权重</li><li>[x] <code>CSS</code>选择器</li><li>[x] 盒子模型</li><li>[x] 双飞翼、圣杯布局</li><li>[ ] <code>CSS3</code>新特性</li><li>[x] <code>div</code>居中</li><li>[ ] 浮动</li><li>[x] CSS的长度单位</li><li>[x] CSS变量</li></ul><h3 id="一些效果">一些效果</h3><ul><li>[ ] CSS画三角形</li><li>[ ] 前端水印</li><li>[ ] 毛玻璃效果</li><li>[ ] 打字效果</li></ul><h2 id="HTML">HTML</h2><ul><li>[ ] 行内元素、块级元素</li><li>[ ] DOM树</li><li>[ ] 事件模型</li><li>[ ] 缓存策略</li></ul><h2 id="浏览器">浏览器</h2><ul><li>[x] 存储方式比较（cookie、localStorage、sessionStorage）</li><li>[ ] 浏览器渲染机制</li></ul><h2 id="前端安全">前端安全</h2><ul><li>[ ] XSS攻击</li></ul><h1>框架</h1><h2 id="vue">vue</h2><ul><li>[ ] 数据绑定原理</li><li>[ ] <code>computed</code>和<code>watch</code></li><li>[ ] <code>slot</code></li><li>[ ] <code>next tick</code>原理</li><li>[ ] <code>keep alive</code></li></ul><h2 id="react">react</h2><h2 id="Redux">Redux</h2><h1>算法</h1><h1>后端</h1><h2 id="Node">Node</h2><ul><li>[ ] 模块机制</li><li>[ ] require原理</li><li>[ ] 事件循环</li><li>[ ] cluster原理</li><li>[ ] 流机制</li><li>[ ] pipe原理</li><li>[ ] 守护进程</li><li>[ ] 进程通信</li><li>[ ] 异常处理</li></ul><h2 id="计算机网络">计算机网络</h2>]]></content>
    
    
    <categories>
      
      <category>Q&amp;A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>圣杯布局和双飞翼布局</title>
    <link href="/2022/05/29/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/"/>
    <url>/2022/05/29/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h1>圣杯布局和双飞翼布局</h1><h3 id="圣杯布局">圣杯布局</h3><p><img src="%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80.png" alt="圣杯布局"></p><h4 id="html"><code>html</code></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>头部<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>主区域<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>左区域<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>右区域<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>底部<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="CSS"><code>CSS</code></h4><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">footer</span>,<br>    <span class="hljs-selector-tag">header</span> &#123;<br>      <span class="hljs-attribute">background-color</span>: aliceblue;<br>      <span class="hljs-attribute">text-align</span>: center;<br>      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;<br>      <span class="hljs-attribute">font-weight</span>: bolder;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;<br>      <span class="hljs-comment">/*line-height设置成与height一样可以让文字垂直居中*/</span><br>    &#125;<br><br>    <span class="hljs-selector-tag">header</span> &#123;<br>      <span class="hljs-attribute">background-color</span>: antiquewhite;<br>    &#125;<br><br>    <span class="hljs-comment">/* 设置浮动 */</span><br>    <span class="hljs-selector-class">.center</span>,<br>    <span class="hljs-selector-class">.left</span>,<br>    <span class="hljs-selector-class">.right</span> &#123;<br>      <span class="hljs-attribute">float</span>: left;<br>    &#125;<br><br>    <span class="hljs-comment">/*伪类元素解决浮动带来的塌陷问题 */</span><br>    <span class="hljs-selector-class">.container</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>      <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>      <span class="hljs-attribute">display</span>: block;<br>      <span class="hljs-attribute">clear</span>: both;  <br>      <span class="hljs-comment">/*clear:both的作用是让伪类元素到container下面而不是右边*/</span><br>    &#125;<br><br>    <span class="hljs-comment">/*设置container的padding值以便放置左右盒子*/</span><br>    <span class="hljs-selector-class">.container</span> &#123;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">300px</span> <span class="hljs-number">0</span> <span class="hljs-number">200px</span>;<br>      <span class="hljs-comment">/*overflow: hidden; 这样也可以解决高度塌陷的问题*/</span><br>    &#125;<br><br>    <span class="hljs-selector-class">.right</span>,<br>    <span class="hljs-selector-class">.center</span>,<br>    <span class="hljs-selector-class">.left</span> &#123;<br>      <span class="hljs-attribute">height</span>: <span class="hljs-number">250px</span>;<br>      <span class="hljs-attribute">line-height</span>: <span class="hljs-number">250px</span>;<br>      <span class="hljs-attribute">text-align</span>:center;<br>      <span class="hljs-attribute">position</span>:relative;  <br>      <span class="hljs-comment">/*开启相对定位是为了让左右盒子到container的padding的位置*/</span><br>    &#125;<br><br>    <span class="hljs-comment">/* 设置左区域的左外边距为-100% */</span><br>    <span class="hljs-selector-class">.left</span> &#123;<br>      <span class="hljs-attribute">left</span>:-<span class="hljs-number">200px</span>;<br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">192</span>, <span class="hljs-number">149</span>, <span class="hljs-number">232</span>);<br>      <span class="hljs-attribute">margin-left</span>:-<span class="hljs-number">100%</span>;  <br>      <span class="hljs-comment">/*这里的100%对应的百分比是left左边的那个盒子即center的宽度*/</span><br>    &#125;<br>    <span class="hljs-selector-class">.right</span> &#123;<br>      <span class="hljs-attribute">right</span>:-<span class="hljs-number">300px</span>;<br>      <span class="hljs-attribute">margin-left</span>:-<span class="hljs-number">300px</span>;   <br>      <span class="hljs-comment">/*这里的-300px是right往左边移动自身宽度像素使自己刚刚放进center内*/</span><br>      <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;       <br>      <span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">82</span>, <span class="hljs-number">82</span>, <span class="hljs-number">152</span>);<br>    &#125;<br>    <span class="hljs-selector-class">.center</span>&#123;<br>      <span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>;<br>      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">165</span>, <span class="hljs-number">241</span>, <span class="hljs-number">216</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="双飞翼布局">双飞翼布局</h3><p><img src="%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80.png" alt="双飞翼布局"></p><h4 id="html-2"><code>html</code></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>头部<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;center-inner&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>左区域<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>右区域<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>底部<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="CSS-2"><code>CSS</code></h4><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">footer</span>,<br><span class="hljs-selector-tag">header</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: aliceblue;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">font-weight</span>: bolder;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-comment">/*line-height设置成与height一样可以让文字垂直居中*/</span><br>&#125;<br><br><span class="hljs-selector-tag">header</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: antiquewhite;<br>&#125;<br><br><span class="hljs-comment">/* 设置浮动 */</span><br><span class="hljs-selector-class">.center</span>,<br><span class="hljs-selector-class">.left</span>,<br><span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-comment">/* 伪类元素解决浮动带来的塌陷问题*/</span><br><span class="hljs-selector-class">.container</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">clear</span>: both;  <br>  <span class="hljs-comment">/*clear:both的作用是让伪类元素到container下面而不是右边*/</span><br>&#125; <br><br><span class="hljs-selector-class">.right</span>,<br><span class="hljs-selector-class">.center</span>,<br><span class="hljs-selector-class">.left</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">250px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">250px</span>;<br>  <span class="hljs-attribute">text-align</span>:center;<br>&#125;<br><br><span class="hljs-comment">/* 设置左区域的左外边距为-100% */</span><br><span class="hljs-selector-class">.left</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">192</span>, <span class="hljs-number">149</span>, <span class="hljs-number">232</span>);<br>  <span class="hljs-attribute">margin-left</span>:-<span class="hljs-number">100%</span>;  <br>  <span class="hljs-comment">/*这里的100%对应的百分比是left左边的那个盒子即center的宽度*/</span><br>&#125;<br><span class="hljs-selector-class">.right</span> &#123;<br>  <span class="hljs-attribute">margin-left</span>:-<span class="hljs-number">300px</span>;   <br>  <span class="hljs-comment">/*这里的-300px是right往左边移动自身宽度像素使自己刚刚放进center内*/</span><br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;       <br>  <span class="hljs-attribute">background-color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">82</span>, <span class="hljs-number">82</span>, <span class="hljs-number">152</span>);<br>&#125;<br><span class="hljs-selector-class">.center</span>&#123;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">165</span>, <span class="hljs-number">241</span>, <span class="hljs-number">216</span>);<br>&#125;<br><span class="hljs-selector-class">.center-inner</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">300px</span> <span class="hljs-number">0</span> <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">237</span>, <span class="hljs-number">172</span>, <span class="hljs-number">87</span>);<br>  <span class="hljs-attribute">word-break</span>: break-all;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="两者区别">两者区别</h3><p><img src="%E4%B8%A4%E8%80%85%E5%8C%BA%E5%88%AB.png" alt="两者区别"></p><h4 id="解释">解释</h4><p>双飞翼布局相比较圣杯布局多了一个<code>center-inner</code>盒子，我们将圣杯布局center盒子的内容放在了inner盒子中，然后设置<code>center-inner</code>的margin值来取代<code>container</code>盒子的padding值，以及不需要设置left盒子和right盒子的相对定位来覆盖padding。</p><p>因此在CSS代码上双飞翼布局的更加精简，不过从上图我们可以知道(上图的middle就是center)，我们的center盒子具体的位置布置是不同的。</p><h3 id="相比flex布局，圣杯布局或者双飞翼布局的好处">相比flex布局，圣杯布局或者双飞翼布局的好处</h3><p>Q：为什么不用flex布局？</p><p>A：跟加载顺序有关，flex布局的<code>dom</code>结构是<code>left-center-right</code>如果左边加载很慢，页面就空了。而圣杯和双飞翼都是先加载中间内容，再加载左右。</p>]]></content>
    
    
    <categories>
      
      <category>CSS和HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎么用reduce实现map？</title>
    <link href="/2022/05/24/%E7%94%A8reduce%E5%AE%9E%E7%8E%B0map/"/>
    <url>/2022/05/24/%E7%94%A8reduce%E5%AE%9E%E7%8E%B0map/</url>
    
    <content type="html"><![CDATA[<h1>用reduce实现map</h1><h3 id="Array-map">Array.map</h3><h4 id="用法">用法</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> new_array = arr.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">currentValue[, index[, array]]</span>) &#123;<br> <span class="hljs-comment">// Return element for new_array </span><br>&#125;[, thisArg])<br></code></pre></div></td></tr></table></figure><p>如果 <code>thisArg</code> 参数提供给<code>map</code>，则会被用作回调函数的<code>this</code>值。否则 <code>undefined</code> 会被用作回调函数的<code>this</code>值。</p><h4 id="参数">参数</h4><ul><li><p><code>callback</code></p><p>生成新数组元素的函数，使用三个参数：<code>currentValue</code> 为<code>callback</code> 数组中正在处理的当前元素。<code>index</code>（可选）<code>callback</code> 数组中正在处理的当前元素的索引。<code>array</code>（可选）<code>map</code> 方法调用的数组。</p></li><li><p><code>thisArg</code>（可选）</p><p>执行 <code>callback</code> 函数时值被用作<code>this</code>。</p></li></ul><h3 id="Array-prototype-Mymap"><code>Array.prototype.Mymap()</code></h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">Mymap</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">fn,thisArg</span>)&#123;<br>    <span class="hljs-keyword">const</span> result = [];<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">previous,current,index,array</span>) =&gt;</span> &#123;<br>        result[index] = fn.<span class="hljs-title function_">call</span>(thisArg,array[index],index,array);<br>    &#125;,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1>手写reduce</h1><h3 id="array-reduce">array.reduce()</h3><h4 id="用法-2">用法</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">previousValue, currentValue, currentIndex, array</span>) =&gt;</span> &#123; <span class="hljs-comment">/* ... */</span> &#125;, initialValue)<br></code></pre></div></td></tr></table></figure><h4 id="参数-2">参数</h4><ul><li><p><code>callbackFn</code></p><p>一个 “reducer” 函数，包含四个参数：</p><ol><li><p><code>previousValue</code>：上一次调用 <code>callbackFn</code> 时的返回值。在第一次调用时，若指定了初始值 <code>initialValue</code>，其值则为 <code>initialValue</code>，否则为数组索引为 0 的元素 <code>array[0]</code>。</p></li><li><p><code>currentValue</code>：数组中正在处理的元素。在第一次调用时，若指定了初始值 <code>initialValue</code>，其值则为数组索引为 0 的元素 <code>array[0]</code>，否则为 <code>array[1]</code></p></li><li><p><code>currentIndex</code>：数组中正在处理的元素的索引。若指定了初始值 <code>initialValue</code>，则起始索引号为 0，否则从索引 1 起始。</p></li><li><p><code>array</code>：用于遍历的数组。</p></li></ol></li><li><p><code>initialValue</code> （可选）</p><p>作为第一次调用 <code>callback</code> 函数时参数 <em>previousValue</em> 的值。若指定了初始值 <code>initialValue</code>，则 <code>currentValue</code> 则将使用数组第一个元素；否则 <code>previousValue</code> 将使用数组第一个元素，而 <code>currentValue</code> 将使用数组第二个元素。</p></li></ul><h3 id="Myreduce"><code>Myreduce()</code></h3><h4 id="代码">代码</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">Myreduce</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">fn,initialValue</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> fn !== <span class="hljs-string">&#x27;function&#x27;</span>)&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第一个参数必须为一个函数&#x27;</span>);<br>         <span class="hljs-keyword">return</span> ;<br>    &#125;<br><span class="hljs-keyword">let</span> previousValue = initialValue || <span class="hljs-variable language_">this</span>[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">const</span> currentIndex = initialValue ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = currentIndex;i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>;i++)&#123;<br>previousValue = <span class="hljs-title function_">fn</span>(previousValue,<span class="hljs-variable language_">this</span>[i],i,<span class="hljs-variable language_">this</span>);<br>&#125;<br><span class="hljs-keyword">return</span> previousInitial;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="测试结果">测试结果</h4><p><img src="test.jpg" alt="测试结果"></p>]]></content>
    
    
    <categories>
      
      <category>Q&amp;A</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS用法杂记</title>
    <link href="/2022/05/24/CSS%E7%94%A8%E6%B3%95%E6%9D%82%E8%AE%B0/"/>
    <url>/2022/05/24/CSS%E7%94%A8%E6%B3%95%E6%9D%82%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1>CSS用法杂记</h1><h3 id="transition">transition</h3><p>语法：<strong>transition: property duration timing-function delay;</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>transition-property</td><td>规定设置过渡效果的 CSS 属性的名称</td></tr><tr><td>transition-duration</td><td>规定完成过渡效果需要多少秒或毫秒</td></tr><tr><td>transition-timing-function</td><td>规定速度效果的速度曲线</td></tr><tr><td>transition-delay</td><td>定义过渡效果何时开始</td></tr></tbody></table><h3 id="element-classList-toggle-属性名">element.classList.toggle(属性名)</h3><p>十分灵活的用法，如果某个DOM元素没有X属性添加X属性，如果存在X属性则删除X属性。</p>]]></content>
    
    
    <categories>
      
      <category>CSS和HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flex属性</title>
    <link href="/2022/05/24/flex%E5%B1%9E%E6%80%A7/"/>
    <url>/2022/05/24/flex%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1>flex属性</h1><p><code>flex</code>属性其实是一种简写，是<code>flex-grow</code>，<code>flex-shrink</code>和<code>flex-basis</code>的缩写形式。 默认值为<code>0 1 auto</code></p><h2 id="flex-grow">flex-grow</h2><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p><p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。</p><p>如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><p><img src="flex-grow.png" alt="flex-grow"></p><h2 id="flex-shrink">flex-shrink</h2><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。</p><p>如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><p><img src="flex-shrink.jpg" alt="flex-shrink"></p><h2 id="flex-basis">flex-basis</h2><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。</p><p>浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p><p>它可以设为跟width或height属性一样的值（比如450px），则项目将占据固定空间。</p><p>可以使用一个，两个或三个值来指定 <code>flex</code>属性。</p><h2 id="省略写法">省略写法</h2><p><strong>单值语法</strong>: 值必须为以下其中之一:</p><ul><li>一个无单位数<code>&lt;number&gt;</code>：它会被当作<code>flex:&lt;number&gt; 1 0 </code>；</li><li>一个有效的宽度<code>width</code>值: 它会被当作 <code>&lt;flex-basis&gt;</code>的值。</li><li>关键字<code>none</code>，<code>auto</code>或<code>initial</code></li></ul><p><strong>双值语法</strong>: 第一个值必须为一个无单位数，并且它会被当作 <code>&lt;flex-grow&gt;</code> 的值。第二个值必须为以下之一：</p><ul><li>一个无单位数：它会被当作 <code>&lt;flex-shrink&gt;</code> 的值。</li><li>一个有效的宽度值: 它会被当作 <code>&lt;flex-basis&gt;</code> 的值。</li></ul><p><strong>三值语法:</strong></p><ul><li>第一个值必须为一个无单位数，并且它会被当作 <code>&lt;flex-grow&gt;</code> 的值。</li><li>第二个值必须为一个无单位数，并且它会被当作 <code>&lt;flex-shrink&gt;</code> 的值。</li><li>第三个值必须为一个有效的宽度值， 并且它会被当作 <code>&lt;flex-basis&gt;</code> 的值。</li></ul><h3 id="关键字">关键字</h3><p><code>initial</code></p><p>元素会根据自身宽高设置尺寸。它会缩短自身以适应 flex 容器，但不会伸长并吸收 flex 容器中的额外自由空间来适应 flex 容器 。相当于将属性设置为&quot;<code>flex: 0 1 auto</code>&quot;。</p><p><code>auto</code></p><p>元素会根据自身的宽度与高度来确定尺寸，但是会伸长并吸收 flex 容器中额外的自由空间，也会缩短自身来适应 flex 容器。这相当于将属性设置为 “<code>flex: 1 1 auto</code>”.</p><p><code>none</code></p><p>元素会根据自身宽高来设置尺寸。它是完全非弹性的：既不会缩短，也不会伸长来适应 flex 容器。相当于将属性设置为&quot;<code>flex: 0 0 auto</code>&quot;。</p>]]></content>
    
    
    <categories>
      
      <category>CSS和HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS中:var和env</title>
    <link href="/2022/05/22/CSS%E4%B8%AD-root%E5%92%8Cvar/"/>
    <url>/2022/05/22/CSS%E4%B8%AD-root%E5%92%8Cvar/</url>
    
    <content type="html"><![CDATA[<h1>CSS中<code>var()</code>和<code>env()</code></h1><h2 id="root">:root</h2><p>CSS <code>:root</code> 伪类选择器匹配文档树的根元素。在 HTML 文档中，<code>:root</code> 表示 <code>html</code> 选择器， 除了<code>CSS</code>权重比它高以外，其他都是一样的。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: blue;<br>&#125;<br><br><span class="hljs-selector-tag">html</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: yellow;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>最终文档的背景色将会是 <code>blue</code>。</p><h2 id="自定义属性-CSS-变量）-及-var">自定义属性(CSS 变量） 及 var()</h2><h3 id="自定义属性-CSS-变量）">自定义属性(CSS 变量）</h3><p>带有前缀<code>--</code>的属性名，比如<code>--example--name</code>，表示的是带有值的<strong>自定义属性</strong>(很多时候也称之为 CSS 变量），其可以通过 <code>var()</code> 函数在其他声明中复用。</p><p>自定义属性的范围限定在声明它们的元素上，并参与级联：此类自定义属性的值来由级联算法声明决定。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-attr">--somekeyword</span>: left;<br><span class="hljs-attr">--somecolor</span>: <span class="hljs-number">#0000ff</span>;<br><span class="hljs-attr">--somecomplexvalue</span>: <span class="hljs-number">3px</span> <span class="hljs-number">6px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">20</span>, <span class="hljs-number">32</span>, <span class="hljs-number">54</span>);<br></code></pre></div></td></tr></table></figure><blockquote><p>注意：IE 不支持此属性</p></blockquote><h3 id="var">var()</h3><p>CSS函数 <code>var()</code> 可以用<strong>自定义属性</strong>的值替换另外一个属性值的任何一部分。</p><blockquote><p>注意：IE 不支持此属性</p></blockquote><p>语法</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">var</span>( &lt;custom-property-name&gt; , &lt;declaration-value&gt;? )<br></code></pre></div></td></tr></table></figure><p>第一个属性不存在时，使用第二个兜底值。</p><h3 id="示例：var-CSS-变量-基本用法">示例：var() + CSS 变量 基本用法</h3><p>在 :root 上定义，然后使用它</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--main-bg-color</span>: pink;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--main-bg-color);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>最终 body 的颜色会是 <code>pink</code> 的。</p><h3 id="示例：var-回退值">示例：var() 回退值</h3><p>当第一个值未定义，回退值生效。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.component</span> &#123;<br>  <span class="hljs-attr">--text-color</span>: <span class="hljs-number">#080</span>;<br>&#125;<br><br><span class="hljs-comment">/* 在 component 的样式中使用它： */</span><br><span class="hljs-selector-class">.component</span> <span class="hljs-selector-class">.text</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--text-color, black); <span class="hljs-comment">/* 此处 color 正常取值 --text-color */</span><br>&#125;<br><span class="hljs-selector-class">.component</span> <span class="hljs-selector-class">.header</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--header-color, blue);<br>  <span class="hljs-comment">/* header-color 并没有被设定, 此处 color 被回退到 blue */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="示例：CSS-变量的优先级">示例：CSS 变量的优先级</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;outWrapper&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;innerWrapper&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-pseudo">:root</span> &#123;</span><br><span class="language-css">            <span class="hljs-attr">--bg-color</span>: blue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">            <span class="hljs-attr">--bg-color</span>: yellow;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.outWrapper</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 将会是 yellow */</span></span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--bg-color);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.innerWrapper</span> &#123;</span><br><span class="language-css">            <span class="hljs-attr">--bg-color</span>: green;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 将会是 green */</span></span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--bg-color);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="env">env()</h2><p><code>env() </code>CSS 函数以类似于 var 函数和 custom properties 的方式将用户代理定义的环境变量值插入你的 CSS 中。</p><p><code>env()</code> 和 <code>var() </code>区别在于:</p><ul><li>定义方不同：环境变量由 <code>user-agent</code> 定义，自定义属性可以由用户定义外</li><li>作用域不同： 环境变量是全局作用在文档中， 自定义属性则限定在声明它们的元素</li></ul><p>为了告诉浏览器使用屏幕上所有的可用空间，并以此使用<code>env()</code>变量，我们需要添加一个新的视口元值：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;viewport-fit=cover&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p>其语法和 <code>var() </code>一致</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">env( &lt;custom-ident&gt; , &lt;declaration-value&gt;? )<br></code></pre></div></td></tr></table></figure><h3 id="Values">Values</h3><p><code>safe-area-inset-top</code>, <code>safe-area-inset-right</code>, <code>safe-area-inset-bottom</code>, <code>safe-area-inset-left</code></p><p><code>safe-area-inset-*</code>由四个定义了视口边缘内矩形的 top, right, bottom 和 left 的环境变量组成，这样可以安全地放入内容，而不会有被非矩形的显示切断的风险。对于矩形视口，例如普通的笔记本电脑显示器，其值等于零。 对于非矩形显示器（如圆形表盘，iPhoneX屏幕），在用户代理设置的四个值形成的矩形内，所有内容均可见。</p><h3 id="注意">注意</h3><p>不同于其他的 CSS 属性，用户代理定义的属性名字对大小写敏感。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">padding</span>:<br>    <span class="hljs-built_in">env</span>(safe-area-inset-top, <span class="hljs-number">50px</span>)<br>    <span class="hljs-built_in">env</span>(safe-area-inset-right, <span class="hljs-number">50px</span>)<br>    <span class="hljs-built_in">env</span>(safe-area-inset-bottom, <span class="hljs-number">50px</span>)<br>    <span class="hljs-built_in">env</span>(SAFE-AREA-INSET-LEFT, <span class="hljs-number">50px</span>);<br>&#125;<br><span class="hljs-comment">/*这种情况下 padding-left就是50px</span><br></code></pre></div></td></tr></table></figure><h3 id="示例">示例</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">padding</span>:<br>    <span class="hljs-built_in">env</span>(safe-area-inset-top, <span class="hljs-number">20px</span>)<br>    <span class="hljs-built_in">env</span>(safe-area-inset-right, <span class="hljs-number">20px</span>)<br>    <span class="hljs-built_in">env</span>(safe-area-inset-bottom, <span class="hljs-number">20px</span>)<br>    <span class="hljs-built_in">env</span>(safe-area-inset-left, <span class="hljs-number">20px</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="%E5%AE%89%E5%85%A8%E8%B7%9D%E7%A6%BB.png" alt="安全距离"></p>]]></content>
    
    
    <categories>
      
      <category>CSS和HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/2022/05/21/Vue/"/>
    <url>/2022/05/21/Vue/</url>
    
    <content type="html"><![CDATA[<h1>Vue</h1><h2 id="Vue简介">Vue简介</h2><h3 id="什么是Vue？">什么是Vue？</h3><blockquote><p>Vue是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p></blockquote><h3 id="Vue的特点">Vue的特点</h3><ol><li><p>采取组件化模式，提高代码复用率，且让代码更好维护。</p></li><li><p>声明式编码，让编码人员无需直接操作DOM，提高开发效率。</p></li><li><p>使用虚拟DOM+优秀的Diff算法，尽量复用DOM节点。</p></li></ol><h2 id="Vue基础语法">Vue基础语法</h2><h3 id="容器与vue实例之间的对应">容器与vue实例之间的对应</h3><p>只能一一对应。</p><h3 id="模板语法">模板语法</h3><p>Vue模板语法有两大类：插值语法和指令语法</p><ol><li><p>插值语法，用于解析标签体内容。</p></li><li><p>指令语法，用于解析标签（包括标签属性、标签体内容、绑定事件……）</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;div id=&quot;root&quot;&gt;<br>    &lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;<br>    &lt;a v-bind:href=&quot;url&quot;&gt;博客地址&lt;/a&gt;<br>    &lt;a :href=&quot;url&quot;&gt;博客地址&lt;/a&gt;   &lt;!-- v-bind:可以简写成:&gt;<br>&lt;/div&gt;<br>&lt;script&gt;<br>    Vue.config.productionTip = false;<br>    Vue.config.devtools = false;<br>    const vue = new Vue(&#123;<br>    el: &#x27;#root&#x27;,    <br>        data:&#123;<br>           name:&#x27;bitter-gourd&#x27;,<br>           url:&#x27;https://bittergourd.com&#x27; <br>             &#125;<br>        &#125;);<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h3 id="数据绑定">数据绑定</h3><ol><li>单向绑定（v-bind）：数据只能从data流向页面。</li><li>双向绑定（v-model）：数据不仅能从data流向页面，还可以从页面流向data。</li></ol><p>备注：</p><ol><li>双向绑定一般都应用在表单类元素上（如input、select等）。</li><li><code>v-model:value</code>可以简写为<code>v-model</code>，因为<code>v-model</code>默认收集的就是value值。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vue">&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;<br>&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;<br><br>&lt;!--简写&gt;<br>&lt;input type=&quot;text&quot; :value=&quot;name&quot;&gt;<br>&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;<br></code></pre></div></td></tr></table></figure><h3 id="data与vue的两种写法">data与vue的两种写法</h3><ol><li>el的两种写法：</li></ol><p>​(1).new Vue的时候直接配置el</p><p>​(2).先创建Vue实例，再通过<code>vm.$mount('#root')</code>指定el的值</p><ol start="2"><li><p>data的两种写法：</p><p>(1).对象式</p><p>(2).函数式（应该用这种）</p></li><li><p>由Vue管理的函数，不要写箭头函数的形式，因为在data里的函数的this需要指向Vue实例。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-comment">//el:&#x27;#root&#x27;</span><br>    data：&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;bitter-gourd&#x27;</span><br>   &#125;<br>&#125;)<br>vue.$mount(<span class="hljs-string">&#x27;#root&#x27;</span>);<br><br><span class="hljs-keyword">const</span> vue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">data</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;bitter-gourd&#x27;</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//或者简写形式</span><br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;bitter-gourd&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="MVVM模型">MVVM模型</h3><p>M：模型（Model）：对应data中的数据。</p><p>V：视图（View）：模板（在<code>&lt;html&gt;</code>中的DOM元素 ）</p><p>VM：视图模型（ViewModel）:Vue实例对象</p><p>因此我们都会用vm来接受Vue实例对象。</p><ol><li>data中所有的属性，最后都出现在了vm身上。</li><li>vm身上所有的属性及Vue原型上所有属性，在Vue模板中都可以直接使用。</li></ol><p><img src="MVVM.png" alt="MVVM模型"></p><h3 id="数据代理">数据代理</h3><p>vue中的数据代理：</p><p>​通过vm对象来代理data对象中属性的操作（读/写），通过<code>Object.defineProperty()</code>把data对象中所有属性添加到vm上，为给一个添加到vm上的属性都指定一个getter和setter，在getter/setter内部去操作（读/写）data中对应的数据。</p><h4 id="Object-defineProperty"><code>Object.defineProperty</code></h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;bitter-gourd&#x27;</span>,<br>    <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span><br>&#125;<br><span class="hljs-keyword">let</span> number = <span class="hljs-number">18</span>;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(person,<span class="hljs-string">&#x27;age&#x27;</span>,&#123;<br>    <span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;18&#x27;</span>,<br>    <span class="hljs-attr">enumerable</span>:<span class="hljs-literal">true</span>,   <span class="hljs-comment">//控制属性是否可以枚举，默认值为false</span><br>    <span class="hljs-attr">writable</span>:<span class="hljs-literal">true</span>,     <span class="hljs-comment">//控制属性是否可以更改，默认值为false</span><br>    <span class="hljs-attr">configurable</span>:<span class="hljs-literal">true</span>  <span class="hljs-comment">//控制属性是否可以删除(delete person.sex),默认值为false</span><br>    <br>    <span class="hljs-comment">//当有人读取person.age时，get函数就会被调用，且返回值就是age的值。</span><br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> number;<br>&#125;,<br>   <span class="hljs-comment">//当有人修改person.age时，set函数就会被调用，且返回值就是age的值。</span><br><span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>        number = value;<br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">//因此如果只用defineProperty方法添加的属性，默认不可以被枚举，不可以更改，不可以删除。</span><br></code></pre></div></td></tr></table></figure><h4 id="数据代理-2">数据代理</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">100</span>&#125;<br><span class="hljs-keyword">let</span> obj2 = &#123;<span class="hljs-attr">y</span>:<span class="hljs-number">200</span>&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-params">obj2,<span class="hljs-string">&#x27;x&#x27;</span></span>)&#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> obj.<span class="hljs-property">x</span>;<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>        obj.<span class="hljs-property">x</span> = value;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="事件处理">事件处理</h3><h4 id="事件的基本使用">事件的基本使用</h4><ol><li>使用 v-on:xxx 或者 @xxx 绑定事件，其中xxx是事件名；</li><li>事件的回调函数需要配置在methods对象中，最终会在vm上；</li><li>methods中配置的函数不能用箭头函数，否则this指向的就不是vm了；</li><li>methods中配置的函数，都会是被vue所管理的函数，this的指向是vm或者组件实例对象；</li><li>@click=&quot;demo&quot;和@click=&quot;demo($event)&quot;效果一致，但后者可以传参。</li></ol><h4 id="事件修饰符">事件修饰符</h4><ol><li><code>prevent</code>：阻止默认事件</li><li><code>stop</code>：阻止事件冒泡</li><li><code>once</code>：事件只触发一次</li><li><code>capture</code>：使用事件捕获模式</li><li><code>self</code>：只有event.target是当前操作的元素时才触发事件</li><li><code>passive</code>：事件的默认行为立即执行，无需等待事件回调执行完毕</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;a href=<span class="hljs-string">&quot;www.bitter-gourd.com&quot;</span> @click=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;点我&lt;/a&gt;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>()&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;bitter-gourd&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">methods</span>:&#123;<br>        <span class="hljs-title function_">showInfo</span>(<span class="hljs-params">e</span>)&#123;<br>            e.<span class="hljs-property">preventDefault</span>;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hell,I am bitter-gourd&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br>&lt;a href=<span class="hljs-string">&quot;www.bitter-gourd.com&quot;</span> @click.<span class="hljs-property">prevent</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;点我&lt;/a&gt;<br></code></pre></div></td></tr></table></figure><h4 id="键盘事件">键盘事件</h4><ol><li>回车 =&gt; enter</li><li>删除 =&gt; delete (捕获“删除”或者“退格’'键)</li><li>退出 =&gt; esc</li><li>空格 =&gt; space</li><li>换行 =&gt; tab (tab键有切换焦点的功能，必须用keydown，否则无法触发)</li><li>上 =&gt; up</li><li>下 =&gt; down</li><li>左 =&gt; left</li><li>右 =&gt; right</li></ol><p>注意点：</p><ol><li>如果Vue没有提供别名的按键，可以使用按键原始的key值去绑定，但要使用 kebab-case(短横线、小写命名)。</li><li>系统修饰键(ctrl、alt、shift、meta，还包括tab键）</li></ol><p>​(1). 配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才会被触发。</p><p>​(2). 配合keydown使用：可以正常触发事件。</p><h3 id="计算属性">计算属性</h3><p><code>conputed</code></p><ol><li>计算属性将被混入到 Vue 实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。</li><li>计算属性最终会出现在vm上，直接读取使用就好.</li><li>如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算的依赖的数据进行修改。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">firstName</span>:<span class="hljs-string">&#x27;bitter&#x27;</span>,<br>        <span class="hljs-attr">lastName</span>:<span class="hljs-string">&#x27;gourd&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">computed</span>:&#123;<br>        <span class="hljs-attr">fullName</span>:&#123;<br>            <span class="hljs-comment">//当有人读取fullName时，get就会被调用且返回值作为fullName的值</span><br>            <span class="hljs-comment">//在computed中 get()方法是必须的</span><br>            <span class="hljs-comment">//此处的this指向的是vm</span><br>            <span class="hljs-comment">//set调用的时机 1.初次读取fullName的时候 2.所依赖的数据发生变化时</span><br>            <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span>;<br>            &#125;<br>            <span class="hljs-comment">//get调用的时机 当fullName被修改时</span><br>            <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>        <span class="hljs-keyword">const</span> arr = value.<span class="hljs-title function_">spilt</span>(<span class="hljs-string">&#x27;-&#x27;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = arr[<span class="hljs-number">0</span>];<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = arr[<span class="hljs-number">1</span>];<br>    &#125;<br>        &#125;<br>        <span class="hljs-comment">/*简写形式，这种情况下只有get()，只考虑读取不考虑修改。</span><br><span class="hljs-comment">        *fullName()&#123;</span><br><span class="hljs-comment">        *return this.firstName + &#x27;-&#x27; + this.lastName;</span><br><span class="hljs-comment">        *&#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;)</span><br></code></pre></div></td></tr></table></figure><h3 id="监视（侦听）属性">监视（侦听）属性</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br><span class="hljs-attr">data</span>:&#123;<br><span class="hljs-attr">isHot</span>:<span class="hljs-literal">true</span>;<br>&#125;,<br><span class="hljs-attr">computed</span>:&#123;<br><span class="hljs-title function_">info</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">ihHot</span> ? <span class="hljs-string">&#x27;hot&#x27;</span>：<span class="hljs-string">&#x27;cool&#x27;</span>;<br>&#125;<br>&#125;,<br><span class="hljs-attr">methods</span>:&#123;<br><span class="hljs-title function_">changeWeather</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">isHot</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">isHot</span>;<br>&#125;<br>&#125;,<br>        <span class="hljs-comment">//在watch中即可以监视data中的值，也可以监视computed中的值</span><br>    <span class="hljs-attr">watch</span>:&#123;<br>        <span class="hljs-attr">isHot</span>:&#123;<br>            <span class="hljs-comment">//immediate初始化时让handler调用一下，默认值为false</span><br>            <span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>,<br>            <span class="hljs-comment">//handler当isHot发生改变的时候调用</span><br>            <span class="hljs-title function_">handler</span>(<span class="hljs-params">newValue,oldValue</span>)&#123;<br>                <br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h4 id="深度监视">深度监视</h4><ol><li><p>Vue中的watch默认不监视对象内部值的改变（一层）。配置deep:true可以监视对象内部值的改变（多层）。</p></li><li><p>Vue自身可以监视对象内部值的改变，但Vue提供的watch默认不可以。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,<br><span class="hljs-attr">data</span>:&#123;<br><span class="hljs-attr">numbers</span>:&#123;<br>            <span class="hljs-attr">a</span>:<span class="hljs-number">100</span>,<br>            <span class="hljs-attr">b</span>:<span class="hljs-number">200</span><br>        &#125;<br>&#125;,<br>    <span class="hljs-attr">watch</span>:&#123;<br><span class="hljs-comment">//&#x27;numbers.a&#x27;:&#123;&#125;  如果像这样监视data中的numbers属性的a需要用字符串的形式写key</span><br>        <span class="hljs-attr">numbers</span>:&#123;<br>        <span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">//deep属性是深度监视的开关，默认值为false,如果不改为true的话</span><br>            <span class="hljs-comment">//单单改变a或者b的值watch是不会监视到numbers的变化的，如果把numbers整个对象替换</span><br>        <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>)&#123;&#125;<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h4 id="简写形式">简写形式</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-attr">watch</span>:&#123;<br>        <span class="hljs-attr">isHot</span>:&#123;<br>            <span class="hljs-comment">//immediate初始化时让handler调用一下，默认值为false</span><br>            <span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>,<br>            <span class="hljs-comment">//handler当isHot发生改变的时候调用</span><br>            <span class="hljs-title function_">handler</span>(<span class="hljs-params">newValue,oldValue</span>)&#123;&#125;<br>        &#125;<br>&#125;<br><span class="hljs-comment">//当不需要使用immediate属性和deep属性的时可以简写</span><br><span class="hljs-attr">watch</span>:&#123;<br>        <span class="hljs-title function_">isHot</span>(<span class="hljs-params">newValue,oldValue</span>)&#123;&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="侦听属性与计算属性的区别">侦听属性与计算属性的区别</h3><ol><li>computed能完成的功能，watch都能完成。</li><li>watch能完成的功能，computed不一定能完成，比如：watch可以进行异步操作。</li></ol><p>注意点：（目标：让this指向vm）</p><ol><li>被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或者 组件实例对象。</li><li>所有不被vue管理的函数(异步任务如定时器、Ajax、promise的回调函数等)，最好写成箭头函数，这样this的指向才是vm，或者组件的实例对象。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-attr">watch</span>:&#123;<br><span class="hljs-title function_">firstName</span>(<span class="hljs-params">val</span>)&#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);  <span class="hljs-comment">//结果是window</span><br>&#125;，<span class="hljs-number">1000</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);  <span class="hljs-comment">//结果是vm</span><br>&#125;，<span class="hljs-number">1000</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//证明了如果在Vue实例对象中使用异步任务，其实不被Vue管理，因此需要写箭头函数。</span><br><span class="hljs-comment">//写成箭头函数的话就没有箭头函数，当箭头函数内用this的时候就会往外去找this。</span><br></code></pre></div></td></tr></table></figure><h3 id="绑定class">绑定class</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;#root&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;basic&#x27;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&#x27;mood&#x27;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;changeClass&#x27;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;basic&#x27;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&#x27;classArr&#x27;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;basic&#x27;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&#x27;classObj&#x27;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--内联样式写法--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;basic&#x27;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&#x27;styleObj&#x27;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">scirpt</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text/javascript&#x27;</span>&gt;</span><br>Vue.config.productionTip = false;<br>    const vm = new Vue(&#123;<br>      el:&#x27;#root&#x27;,<br>      data:&#123;<br>    name:&#x27;bitter-gourd&#x27;,<br>    mood:&#x27;nomal&#x27;,<br>    classArr:[&#x27;high&#x27;,&#x27;medium&#x27;,&#x27;low&#x27;],<br>    classObj:&#123;<br>    high:false,<br>    medium:false,<br>    low:false,<br>    &#125;<br>    classObj:&#123;<br>    //font-size写成fontSize<br>    fontSize:&#x27;40px&#x27;,<br>    //background-color写成backgroundColor<br>    backgroundColor:&#x27;orange&#x27;,<br>    &#125;<br>      &#125;<br>    &#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">scirpt</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="条件渲染">条件渲染</h3><ol><li><code>v-if</code></li></ol><p>​(1).<code>v-if=&quot;表达式&quot;</code></p><p>​(2).<code>v-else-if=&quot;表达式&quot;</code></p><p>​(3).<code>v-else=&quot;表达式&quot;</code></p><p><strong>特点：</strong></p><ul><li>适用于切换频率较低的场景。</li><li>不展示的DOM元素直接被移除。</li><li><code>v-if</code>可以跟<code>v-else-if</code>以及<code>v-else</code>一起使用，但要求结构不能被“打断”。</li></ul><ol start="2"><li><code>v-show</code></li></ol><p>​<code>v-show=&quot;表达式&quot;</code></p><p><strong>特点：</strong></p><ul><li>适用于切换频率较高的场景。</li><li>不展示的DOM元素添加 <code>display:none</code>隐藏，未被清除。</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--底层实现是添加 display:none --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&#x27;false&#x27;</span>&gt;</span>BitterGourd<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&#x27;false&#x27;</span>&gt;</span>BitterGourd<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--template是不会在DOM上显示 这样就可以与v-if配合使用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;n === 1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="列表渲染">列表渲染</h3><p><strong><code>v-for</code>指令</strong></p><ol><li>用于展示列表数据。</li><li>语法：<code>v-for=&quot;(item,index) in xxx &quot; :key=&quot;yyy&quot;</code></li><li>可遍历：数组、对象、字符串、指定次数。</li></ol><h3 id="Vue中的key">Vue中的<code>key</code></h3><ol><li><p><strong>key的作用：</strong></p><p>key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较。（<code>diff</code>算法）</p></li><li><p><strong>比较规则：</strong></p><p>旧虚拟DOM中找到了与新虚拟DOM的key值，若虚拟DOM中的内容没有变化，在渲染得到新的真实DOM时直接使用旧的真实DOM，若虚拟DOM中的内容变化了。则生成新的真实DOM，随后替换掉页面中之前的真实DOM。若旧的虚拟DOM中未找到与新虚拟DOM相同的key，则创建新的真实DOM，随后渲染到页面中。</p></li><li><p><strong>key用index作为值：</strong></p><p>若对数据进行逆序添加、逆序删除等破坏原有顺序操作，会产生没有必要的真实DOM更新，页面效果没问题但效率低下，若在结构中还存在输入类的DOM(input)，由于是在真实DOM中输入的内容，则在再次渲染的时候会产生错误的DOM更新，使得界面存在问题。</p></li><li><p><strong>如何选择key：</strong></p><p>最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号、学号等唯一值。</p></li></ol><h3 id="Vue监测数据改变的原理">Vue监测数据改变的原理</h3><ol><li><p>Vue会监视data中所有层次的数据。</p></li><li><p>Vue监视对象中的数据</p><ul><li><p>通过<code>setter</code>实现监视，且要在new Vue时就传入要监测的数据。</p></li><li><p>对象中后追加的属性，Vue默认不做响应式处理</p></li><li><p>如需给后添加的属性做响应式，需要使用API：</p><p><code>Vue.set(target,propertyName/index,value)</code></p><p><code>vm.$set(target,propertyName/index,value)</code></p></li></ul></li><li><p>Vue修改数组中的某个元素可以使用的方法：</p><ul><li><p>使用数组方法：<code>push</code>  <code>pop</code>  <code>shift</code>  <code>unshift</code>  <code>splice</code>  <code>sort</code>   <code>reverse</code></p></li><li><p>使用API：</p><p><code>Vue.set(target,propertyName/index,value)</code></p><p><code>vm.$set(target,propertyName/index,value)</code></p></li></ul></li><li><p>注意：</p><p><code>Vue.set(target,propertyName/index,value)</code>和<code>vm.$set(target,propertyName/index,value)</code>不能给vm或者vm的根数据对象(data)添加属性。</p></li></ol><h3 id="v-model的三个修饰符"><code>v-model</code>的三个修饰符</h3><ul><li><p><code>v-model.trim</code> 输入首位空格过滤</p></li><li><p><code>v-model.number</code> 输入字符串转化为有效的数字</p></li><li><p><code>v-model.lazy</code> 失去焦点再收集数据</p></li></ul><h3 id="过滤器">过滤器</h3><p>定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。</p><p>语法：</p><ol><li>注册过滤器：<code>Vue.filter(name,callback)</code> 或 <code>new Vue&#123;filter:&#123;&#125;&#125;</code>\</li><li>使用过滤器：<code>&#123;&#123;xxx | 过滤器名&#125;&#125;</code>  或 <code>v-bind: 属性  = “ xxx | 过滤器名”</code></li></ol><p>备注：</p><ol><li>过滤器也可以接受额外参数、多个过滤器也可以串联</li><li>过滤器并没有改变原本的数据，是产生新的对应的数据。</li></ol><h3 id="内置指令">内置指令</h3><p><code>v-cloak</code>(没有值)：</p><ol><li>本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉<code>v-cloak</code>属性。</li><li>使用css配合<code>v-cloak</code>可以解决网速慢时页面展示出<code>&#123;&#123;XXX&#125;&#125;</code>的问题。</li></ol><p><code>v-once</code>(没有值)：</p><ol><li><code>v-once</code>所在节点在初次动态渲染后，就视为静态内容了。</li><li>以后数据的改变也不会引起<code>v-once</code>所在结构的更新，可以用于优化性能。</li></ol><p><code>v-pre</code>(没有值)：</p><ol><li>跳过其所在节点的编译过程。</li><li>可利用它跳过：没有使用指令语法、没有使用插值语法的节点，以加快编译速度。</li></ol><h3 id="自定义指令函数式">自定义指令函数式</h3><p><strong>自定义指令函数式什么时候会被调用？</strong></p><p>(1).指令与函数成功绑定时。（初次使用）</p><p>(2).指令所在的模板被重新解析的时候，即使该directive没有用到数据name，但当name被修改的时候，directives都会被重新调用。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-enlarge</span>=<span class="hljs-string">&#x27;n&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;bitter-gourd&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">n</span>:<span class="hljs-number">1</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">directives</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">enlarge</span>(<span class="hljs-params">element,binding</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//element是一个HTML元素 binding是一个对象</span></span><br><span class="language-javascript">element.<span class="hljs-property">innerText</span> = binding.<span class="hljs-property">value</span> * <span class="hljs-number">10</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="自定义指令对象式">自定义指令对象式</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-enlarge</span>=<span class="hljs-string">&#x27;n&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;bitter-gourd&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">n</span>:<span class="hljs-number">1</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">directives</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">fbind</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//指令与元素成功绑定时调用</span></span><br><span class="language-javascript">                <span class="hljs-title function_">bind</span>(<span class="hljs-params">element,binding</span>)&#123;</span><br><span class="language-javascript">                    element.<span class="hljs-property">value</span> = binding.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">//指令所在元素被插入页面时（在绑定之后）</span></span><br><span class="language-javascript">                <span class="hljs-title function_">inserted</span>(<span class="hljs-params">element,binding</span>)&#123;</span><br><span class="language-javascript">                    element.<span class="hljs-title function_">focus</span>();</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">//指令所在模板被重新解析时</span></span><br><span class="language-javascript">                <span class="hljs-title function_">update</span>(<span class="hljs-params">element,binding</span>)&#123;</span><br><span class="language-javascript">                    element.<span class="hljs-property">value</span> = binding.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="生命周期">生命周期</h3><ol><li>又名：生命周期回调函数、生命周期函数、生命周期钩子。</li><li>是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数。</li><li>生命周期函数的名字不可更改，但函数的具体内容可以自己写。</li><li>生命周期函数中的this指向的是vm或者组件实例对象。</li></ol><h4 id="常用的声生命周期钩子：">常用的声生命周期钩子：</h4><ol><li><code>mounted</code>：发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】</li><li><code>beforeDestroy</code>：清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】</li></ol><h4 id="关于销毁Vue实例：">关于销毁Vue实例：</h4><ol><li>销毁后借助Vue开发者工具看不到任何消息</li><li>销毁后自定义事件会失效，但原生DOM事件依然有效</li><li>一般不会在<code>beforeDestroy</code>操作数据，因为即便操作数据，也不会再触发更新流程。</li></ol><h2 id="Vue组件">Vue组件</h2><h3 id="Vue中使用组件">Vue中使用组件</h3><ol><li>定义组件（创建组件）</li><li>注册组件</li><li>使用组件（写组件标签）</li></ol><h4 id="定义组件">定义组件</h4><p>使用<code>Vue.extend(options)</code>创建，其中<code>options</code>和<code>new Vue(options)</code>时传入的那个<code>options</code>几乎一样，但也有区别：</p><ol><li>不写<code>el</code>，因为最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</li><li><code>data</code>必须写成函数式，因为要避免组件被复用的时，数据存在引用关系，即若用对象式，当组件被复用的时候修改数据会相互影响，而函数式则<code>return</code>一个对象存放数据，故每次在复用组件时都会在内存中开辟一块新的空间存放数据，每一次复用组件数据互不影响。（PS：对象式会直接报错）</li><li>使用<code>template</code>可以配置组件结构。</li><li>简写方式：</li></ol><p><code>const school = Vue.extend(options)</code>  =&gt;  <code>const school  = options</code></p><h4 id="注册组件">注册组件</h4><ol><li>局部注册：<code>new Vue</code>的时候传入<code>components</code>选项</li><li>全局注册：<code>Vue.component('组件名',组件)</code></li></ol><h4 id="使用组件">使用组件</h4><p>直接用组件名作为标签使用</p><h4 id="组件名">组件名</h4><ol><li><p>一个单词组成：</p><p>​(1).首字母小写</p><p>​(2).首字母大写</p></li><li><p>多个单词组成：</p></li></ol><p>​   (1).<code>kebab-case</code>命名：<code>my-school</code></p><p>​   (2).<code>CamlCase</code>命名：<code>MySchool</code>(需要<code>Vue</code>脚手架支持)</p><ol start="3"><li>可以用<code>name</code>配置项指定组件在开发者工具中呈现的名字。</li></ol><h4 id="组件标签">组件标签</h4><ol><li><code>&lt;school&gt;&lt;/school&gt;</code></li><li><code>&lt;school/&gt;</code>（如果不使用脚手架会导致后续组件不能渲染）</li></ol><h1>Vue-cli</h1><h2 id="关于不同版本的vue">关于不同版本的vue</h2><ol><li><p><code>vue.js</code>和<code>vue.runtime.xxx.js</code>的区别：</p><p>(1). <code>vue.js</code>是完整版的<code>Vue</code>，包含：核心功能+模板解析器。</p><p>(2).<code>vue.runtime.xxx.js</code>是运行版的<code>Vue</code>，只包含：核心功能，没有模板解析器。</p></li></ol><h2 id="render"><code>render()</code></h2><ol><li>由于<code>vue.runtime.xxx.js</code>没有模板解析器，所以不能使用<code>template</code>配置项，需要使用<code>render</code>函数接收到<code>createElement</code>函数去指定具体内容。（只有在<code>main.js</code>入口文件中<code>new Vue</code>的时候会用到<code>render</code>）</li><li>组件中不需要用<code>render()</code>，因为组件中用到<code>&lt;template&gt;</code>标签，会有第三方库来解析标签中的代码。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS中的长度单位</title>
    <link href="/2022/05/21/CSS%E4%B8%AD%E7%9A%84%E9%95%BF%E5%BA%A6%E5%8D%95%E4%BD%8D/"/>
    <url>/2022/05/21/CSS%E4%B8%AD%E7%9A%84%E9%95%BF%E5%BA%A6%E5%8D%95%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<h1>长度单位px rem em vh vw</h1><h2 id="绝对长度">绝对长度</h2><h3 id="px">px</h3><p>px是像素值，是一个固定的长度，比如我们的米，厘米一样。</p><h2 id="相对长度">相对长度</h2><h3 id="为什么我们需要相对长度rem-em等？">为什么我们需要相对长度rem em等？</h3><p>固定长度已经不能满足我们现在的需求了。</p><p>举例：比如我们在缩小我们屏幕的时候，我们不仅仅是需要缩小我们的盒子的宽高，我们还想要让我们字体大小也随之缩小，这样用户体验会更好一点。</p><h3 id="rem">rem</h3><h4 id="rem-与-px-的计算关系">rem 与 px 的计算关系</h4><p>rem的值是px的倍数</p><p>默认情况下<code>font-size = 16px</code>,那么<code>1rem = 16px</code></p><h4 id="rem-如何修改与px的相对计算关系">rem 如何修改与px的相对计算关系</h4><p>我们可以在并且只能在<strong>html标签</strong>（因为html节点是根节点，就是rem里面的r：root）里面修改<code>font-size : 32px</code>， 从而<code>1rem = 32px</code></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> class=&quot;<span class="hljs-selector-tag">div</span>-rem&quot;&gt;rem&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br><span class="hljs-comment">/* rem的用法 */</span><br><span class="hljs-selector-tag">html</span>&#123;<br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">16px</span>;  // <span class="hljs-number">1rem</span> = <span class="hljs-number">16px</span><br>&#125;<br><span class="hljs-selector-class">.div-rem</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">10rem</span>;    // <span class="hljs-number">10rem</span> = <span class="hljs-number">10</span> x <span class="hljs-number">16</span> = <span class="hljs-number">160px</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10rem</span>;   // <span class="hljs-number">10rem</span> = <span class="hljs-number">10</span> x <span class="hljs-number">16</span> = <span class="hljs-number">160px</span><br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>; // <span class="hljs-number">1rem</span> = <span class="hljs-number">16px</span><br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#a58778</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="em">em</h3><h4 id="em-与-px-的计算关系">em 与 px 的计算关系</h4><p>em的值是px的倍数</p><p>默认情况下<code>font-size = 16px</code>,那么<code>1em = 16px</code></p><h4 id="em-如何修改与px的相对计算关系">em 如何修改与px的相对计算关系</h4><p>我们可以在自己元素上面修改<code>font-size : 32px</code>， 从而<code>1em = 32px</code></p><p>如果自己元素上面没有设置<code>font-size</code>, 我们也可以在父元素上面设置<code>font-size</code>，从而来影响自己元素（孩子元素）使用的em的值。</p><h5 id="rem-与-em-的区别">rem 与 em 的区别</h5><p>上面也正是rem 与 em的区别：</p><p>rem只能在html标签里面设置rem的依赖的值到底是多少</p><p>而em是可以在自己元素以及父级元素设置em依赖的值到底是多少</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;!<span class="hljs-attr">--em1--</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;<span class="hljs-selector-tag">div</span>-<span class="hljs-selector-tag">em</span>&quot;&gt;<span class="hljs-selector-tag">em</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br>&lt;!<span class="hljs-attr">--em2--</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=&quot;<span class="hljs-selector-tag">div</span>-<span class="hljs-selector-tag">em</span>-father&quot;&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;<span class="hljs-selector-tag">div</span>-<span class="hljs-selector-tag">em</span>-child&quot;&gt;<span class="hljs-selector-tag">em</span> child&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br> <span class="hljs-comment">/* em的用法1：自己元素设置font-size的值来当作em的参照值 */</span><br><span class="hljs-selector-class">.div-em</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">32px</span>;  // <span class="hljs-number">1em</span> = <span class="hljs-number">32px</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">10em</span>;      // <span class="hljs-number">10em</span> = <span class="hljs-number">10</span> x <span class="hljs-number">32</span> = <span class="hljs-number">320px</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10em</span>;     // <span class="hljs-number">10em</span> = <span class="hljs-number">10</span> x <span class="hljs-number">32</span> = <span class="hljs-number">320px</span><br>    <span class="hljs-attribute">background-color</span>: aquamarine;<br>&#125;<br><br> <span class="hljs-comment">/* em的用法2：子元素不设置，而父级元素设置font-size的值来当作em的参照值 */</span><br><span class="hljs-selector-class">.div-em-father</span>&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">64px</span>;  // <span class="hljs-number">1em</span> = <span class="hljs-number">64px</span><br>&#125;<br><span class="hljs-selector-class">.div-em-child</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">10em</span>;     // <span class="hljs-number">10em</span> = <span class="hljs-number">10</span> x <span class="hljs-number">64</span> = <span class="hljs-number">640px</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10em</span>;    // <span class="hljs-number">10em</span> = <span class="hljs-number">10</span> x <span class="hljs-number">64</span> = <span class="hljs-number">640px</span><br>    <span class="hljs-attribute">background-color</span>: cadetblue;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="vh-vw">vh vw</h3><p>vh 和 vw 就是根据窗口的宽高，分成100等份，100vh就表示满高，50vh就表示一半高。</p><h5 id="那么vh-和-vw与百分比的区别是什么？">那么vh 和 vw与百分比的区别是什么？</h5><p>百分比是基于父元素的设置而言的，如果父元素为100px，那么子元素100%也就是100px。</p><p>而 vh 和 vw 始终是针对窗口的宽高。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span> class=&quot;<span class="hljs-selector-tag">div</span>-vh-vw&quot;&gt;<br>   &lt;<span class="hljs-selector-tag">div</span> class=&quot;<span class="hljs-selector-tag">div</span>-vh-vw-child&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br> <span class="hljs-comment">/* vh vw 的用法：视窗最为参照值 */</span><br><span class="hljs-selector-class">.div-vh-vw</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">10vw</span>;  // 视窗宽度的 <span class="hljs-number">1</span>/<span class="hljs-number">10</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10vh</span>;  // 视窗高度的 <span class="hljs-number">1</span>/<span class="hljs-number">10</span><br>    <span class="hljs-attribute">background-color</span>: pink;<br>&#125;<br><br><span class="hljs-comment">/* %百分比的用法：父元素的宽高作为参照值 */</span><br><span class="hljs-selector-class">.div-vh-vw-child</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">background-color</span>: aliceblue;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="vmin-vmax">vmin vmax</h3><p>vmin它取的是相对于视口高度或宽度中*<strong>较小值</strong>的1/100</p><p>vmax它取的是相对于视口高度或宽度中<strong>较大值</strong>的1/100</p><h3 id="ex-ch">ex ch</h3><p>ex在开发中很少使用，1ex等于小写字母“x”的高度，但不同字体x的高度可能不同,取em值的一半作为ex值。</p><p>ch与ex类似，被定义为数字0的宽度。当无法确定数字0宽度时，取em值的一半作为ch值。</p>]]></content>
    
    
    <categories>
      
      <category>CSS和HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git</title>
    <link href="/2022/05/19/git/"/>
    <url>/2022/05/19/git/</url>
    
    <content type="html"><![CDATA[<h1>Git</h1><h2 id="远程篇">远程篇</h2><h3 id="基本命令解释">基本命令解释</h3><p><code>git fetch</code> 并不会改变你本地仓库的状态。它不会更新你的 <code>main</code> 分支，也不会修改你磁盘上的文件。</p><p><code>git pull</code> 是 git fetch 和 git merge 的缩写。</p><h3 id="git-pull-rebase和git-pull处理历史偏差的区别"><code>git pull --rebase</code>和<code>git pull</code>处理历史偏差的区别</h3><h4 id="背景">背景</h4><p>假设你周一克隆了一个仓库，然后开始研发某个新功能。到周五时，你新功能开发测试完毕，可以发布了。但是 —— 天啊！你的同事这周写了一堆代码，还改了许多你的功能中使用的 API，这些变动会导致你新开发的功能变得不可用。但是他们已经将那些提交推送到远程仓库了，因此你的工作就变成了基于项目<strong>旧版</strong>的代码，与远程仓库最新的代码不匹配了。</p><p>这种情况下, <code>git push</code> 就不知道该如何操作了。如果你执行 <code>git push</code>，Git 应该让远程仓库回到星期一那天的状态吗？还是直接在新代码的基础上添加你的代码，亦或由于你的提交已经过时而直接忽略你的提交？</p><p>因为这情况（历史偏离）有许多的不确定性，Git 是不会允许你 <code>push</code> 变更的。实际上它会强制你先合并远程最新的代码，然后才能分享你的工作。我们必须人为决定新代码的内容。</p><p>在合并远程仓库的最新代码的时候我们有两个选择：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">git pull <span class="hljs-operator">=</span> git <span class="hljs-keyword">fetch</span> <span class="hljs-operator">+</span> git <span class="hljs-keyword">merge</span><br>git pull <span class="hljs-comment">--rebase = git fetch + git rebase</span><br></code></pre></div></td></tr></table></figure><p>如果在git pull的时候加上<code>rebase</code>参数，即<code>git pull --rebase</code>,这里表示把你的本地当前分支里的每个提交(commit)取消掉，并且把它们临时 保存为补丁(patch)(这些补丁放到&quot;.git/rebase&quot;目录中),然后把本地当前分支更新 为最新的&quot;origin&quot;分支，最后把保存的这些补丁应用到本地当前分支上。</p><p>用<code>rebase</code>还是不用<code>rebase</code>都可以实现代码的合并，用不用取决于你更重视哪一方的代码，如果认为origin是主要的，那么就加<code>rebase</code>，因为这样就能最大程度的保证origin代码不被你错误修改。</p><h3 id="什么是提PR？">什么是提PR？</h3><p>PR即pull request。</p><p>当你想更正别人仓库里的错误时，要走一个流程：</p><ol><li>先 fork 别人的仓库，相当于拷贝一份，不会有人直接让我们修改原仓库的。</li><li>clone 到本地分支，做一些 bug fix。</li><li>发起 pull request 给原仓库，让他看到你修改的 bug。</li><li>原仓库 review 这个 bug，如果是正确的话，就会 merge 到他自己的项目中。</li></ol><p>至此，整个 pull request 的过程就结束了。</p>]]></content>
    
    
    <categories>
      
      <category>开发环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Promise</title>
    <link href="/2022/05/17/Promise/"/>
    <url>/2022/05/17/Promise/</url>
    
    <content type="html"><![CDATA[<h1>Promise</h1><h2 id="Promise的理解">Promise的理解</h2><h3 id="Promise是什么？">Promise是什么？</h3><p>Promise是ES6规范下在JS中使用的进行异步编程的解决方案。</p><ol><li>Promise是一个构造函数。</li><li>Promise对象用来封装一个异步操作并可以获得其成功/失败的结果值。</li></ol><p>异步编程：</p><ol><li>fs文件操作。</li><li>数据库操作。</li><li>AJAX。</li><li>定时器。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//fs文件操作</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>).<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./index.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;&#125;);<br><br><span class="hljs-comment">//axios发起Ajax请求</span><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/axios-server&#x27;</span>,&#123;<br><span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;admin&#x27;</span>,<br><span class="hljs-attr">password</span>:<span class="hljs-string">&#x27;12345&#x27;</span><br>&#125;,&#123;<br><span class="hljs-attr">params</span>:&#123;<br><span class="hljs-attr">a</span>:<span class="hljs-number">100</span>,<br><span class="hljs-attr">b</span>:<span class="hljs-number">200</span><br>&#125;,<br><span class="hljs-attr">headers</span>:&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;bitter-gourd&#x27;</span>,<br>&#125;<br>&#125;);<br><br><span class="hljs-comment">//定时器</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;,<span class="hljs-number">2000</span>);<br></code></pre></div></td></tr></table></figure><h4 id="Promise对象的值">Promise对象的值</h4><p><code>PromiseResult</code>保存的是异步任务成功或者失败的结果，只有resolve和reject可以对该值赋值。</p><h3 id="为什么要用Promise？">为什么要用Promise？</h3><h4 id="指定回调函数的方式更加灵活">指定回调函数的方式更加灵活</h4><ol><li><p>旧的方式：必须在启动异步任务前指定。</p></li><li><p>promise：启动异步任务 =&gt; 返回promise对象 =&gt; 给promise对象绑定回调函数（甚至可以在异步任务结束后指定多个）</p></li></ol><h4 id="支持链式调用，可以解决回调地狱问题">支持链式调用，可以解决回调地狱问题</h4><ol><li>回调地狱：回调函数嵌套调用，外部回调函数异步执行的结果是嵌套的回调函数执行的条件。</li><li>回调地狱的问题：不便于阅读、不便于异常处理。</li></ol><h2 id="使用Promise">使用Promise</h2><h4 id="API">API</h4><p>1.<code>Promise.excutor</code></p><p>excutor(执行器)  <code>(resolve,reject)=&gt;&#123;&#125;</code></p><p>excutor会在Promise内部立即同步调用，而异步操作在执行器中执行。</p><p>2.<code>Promise.prototype.then</code>方法</p><p><code>(onResolved,onRejected)=&gt;&#123;&#125;</code></p><p>指定用于得到成功value的成功回调和得到失败reason的失败回调，返回一个promise对象。</p><p>3.<code>Promise.prototype.catch</code>方法</p><p>得到失败reason的失败回调。</p><p>4.<code>Promise.resolve</code></p><p>该方法可以传入一个对象（非promise）将promise的状态转换为resolve（默认），但如果传入一个Promise对象且该对象的状态为reject，则会将promise的状态转换为reject。</p><p><strong>规则：</strong></p><p>如果传入的参数是非Promise类型的对象，则返回的结果为成功的Promise对象。</p><p>如果传入的参数是Promise对象，则参数的结果决定了resolve的结果。</p><p>5.<code>Promise.reject</code></p><p>与<code>Promise.resolve</code>不同的在于，即使传入状态为resolve的promise对象，该promise的状态仍然为reject。并且这个promise会成为它返回的reject的reason。</p><p>总而言之：使用该方法的promise的状态永远是reject，且传入什么reason就是什么。</p><p>6.<code>Promise.all(promises)=&gt;&#123;&#125;</code></p><p><code>(promises)=&gt;&#123;&#125;</code>promises是包含n个promise的数组</p><p>该方法会返回一个新的promise，只有当所有的promise都成功才成功，只要有一个失败了，就直接失败。</p><p>成功的值是所有promise的resolve状态传入的值。</p><p>7.<code>Promise.race(promises)=&gt;&#123;&#125;</code></p><p><code>(promises)=&gt;&#123;&#125;</code>promises是包含n个promise的数组</p><p>该方法会返回一个新的promise，第一个完成的promise的结果状态就是最终的结果状态。</p><p>成功的值是第一个完成的promise传入的值。</p><h4 id="定时器">定时器</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">rand</span>(<span class="hljs-params">min,max</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(max-min+<span class="hljs-number">1</span>)+min-<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">//resolve和reject本身就是函数类型的数据</span><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br><span class="hljs-comment">//在promise函数内部可以封装异步任务</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">let</span> n = <span class="hljs-title function_">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<br>        <span class="hljs-keyword">if</span>(n &lt;= <span class="hljs-number">30</span>)&#123;<br>            <span class="hljs-title function_">resolve</span>(n);  <span class="hljs-comment">//可以将promise对象的状态设置为成功，并传递参数</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">reject</span>(n);<span class="hljs-comment">//可以将promise对象的状态设置为失败,并传递参数</span><br>        &#125;<br>    &#125;,<span class="hljs-number">2000</span>);<br>&#125;);<br><span class="hljs-comment">//第一个回调是promise对象状态为成功的时候的回调</span><br><span class="hljs-comment">//第二个回调是promise对象状态为失败的时候的回调</span><br>p.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;congratulations！&#x27;</span> + <span class="hljs-string">&#x27;value&#x27;</span>);   <span class="hljs-comment">//value和reason为形参</span><br>&#125;,(reason)=&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;I am so sorry for you.&#x27;</span>+<span class="hljs-string">&#x27;reason&#x27;</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="fs模块">fs模块</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-comment">//回调函数形式</span><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./content.txt&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br> <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-title function_">toString</span>());<br>&#125;);<br><br><span class="hljs-comment">//promise封装</span><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>    fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./content.txt&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span>(err) <span class="hljs-title function_">reject</span>(err);<br>        <span class="hljs-title function_">resolve</span>(data);<br>    &#125;);<br>&#125;);<br><br>p.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value.<span class="hljs-title function_">toString</span>());<br>&#125;,<span class="hljs-function"><span class="hljs-params">reason</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reason);<br>&#125;)<br></code></pre></div></td></tr></table></figure><h4 id="AJAX请求">AJAX请求</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//原生AJAX</span><br><span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btn&#x27;</span>);<br>btn.<span class="hljs-title function_">addEventListner</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>);<br>xhr.<span class="hljs-title function_">send</span>();<br>xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>)&#123;<br><span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">statue</span> &lt; <span class="hljs-number">300</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">response</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">status</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;);<br><br><span class="hljs-comment">//promise封装</span><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove,reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>);<br>xhr.<span class="hljs-title function_">send</span>();<br>xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>)&#123;<br><span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">statue</span> &lt; <span class="hljs-number">300</span>)&#123;<br><span class="hljs-title function_">resolve</span>(xhr.<span class="hljs-property">response</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">reject</span>(xhr.<span class="hljs-property">status</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;);<br><br>p.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;,<span class="hljs-function"><span class="hljs-params">reason</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(reason); <span class="hljs-comment">//向 Web 控制台输出一条警告信息。</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="Promise封装fs函数">Promise封装fs函数</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//封装一个函数mineReadFile</span><br><span class="hljs-comment">//参数：path 文件路径</span><br><span class="hljs-comment">//返回：promise 对象</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myReadFile</span>(<span class="hljs-params">path</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>).<span class="hljs-title function_">readFile</span>(path,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br>            <span class="hljs-keyword">if</span>(err) <span class="hljs-title function_">reject</span>(err);<br>            <span class="hljs-title function_">resolve</span>(data);<br>        &#125;);<br>    &#125;);<br>&#125;<br><br><span class="hljs-title function_">myReadFile</span>(<span class="hljs-string">&#x27;./content.txt&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value.<span class="hljs-title function_">toString</span>());<br>&#125;,<span class="hljs-function"><span class="hljs-params">reason</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reason);<br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="Promise封装ajax发出GET请求">Promise封装ajax发出GET请求</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sendAJAX</span>(<span class="hljs-params">url</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>        xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>,url);<br>        xhr.<span class="hljs-title function_">send</span>();<br>        xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>)&#123;<br>                <span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">status</span> &gt;=<span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>)&#123;<br>                    <span class="hljs-title function_">resolve</span>(xhr);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-title function_">reject</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br><span class="hljs-title function_">sendAJAX</span>(<span class="hljs-string">&#x27;     &#x27;</span>)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;,<span class="hljs-function"><span class="hljs-params">reason</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(reason);<br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="util-promisify方法"><code>util.promisify</code>方法</h4><p><code>util.promisify</code>方法是一种将回调函数转化为promise的工具。</p><p>传入一个遵循常见的错误优先的回调风格的函数，并返回一个返回promise版本。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">let</span> myReadFile = util.<span class="hljs-title function_">promisify</span>(fs.<span class="hljs-property">readFile</span>);<br><span class="hljs-title function_">myReadFile</span>(<span class="hljs-string">&#x27;./content.txt&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value.<span class="hljs-title function_">toString</span>());<br>&#125;,<span class="hljs-function"><span class="hljs-params">reason</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reason);<br>&#125;);<br></code></pre></div></td></tr></table></figure><h2 id="Q-A">Q&amp;A</h2><h5 id="Q1：一个promise指定多个成功-失败回调函数，都会调用吗？">Q1：一个promise指定多个成功/失败回调函数，都会调用吗？</h5><p>A1：是的，都会调用，当promise改变为对应状态时都会调用。</p><h5 id="Q2：改变promise状态和指定回调函数谁先谁后？">Q2：改变promise状态和指定回调函数谁先谁后？</h5><p>A2：都有可能，正常情况下是先指定回调再改变状态，但也可以先改变状态再指定回调。</p><h5 id="Q3：如果先改变状态再指定回调？什么时候得到数据？">Q3：如果先改变状态再指定回调？什么时候得到数据？</h5><p>A3：先在执行器中直接调用<code>resolve()/reject()</code>，再延迟更长时间调用<code>then()</code>。如果是先指定回调，则当状态发生改变时，回调函数就会调用，得到数据。如果是先改变的状态，则当指定调用的时候，回调函数就会调用，得到数据。</p><h5 id="Q4：promise-then-返回的新promise的结果状态由什么决定？">Q4：<code>promise.then()</code>返回的新promise的结果状态由什么决定？</h5><p>A4：1.如果抛出异常，则新promise变为rejected，reason为抛出的异常。<code>throw</code></p><p>​2.如果返回的是非promise的任意值，新promise变为resolved，value为返回的值。</p><p>​3.如果返回的是另一个新promise，则此promise的结果就会成为新promise的结果。</p><h5 id="Q5：promise如何串联多个操作任务？">Q5：promise如何串联多个操作任务？</h5><p>A5：利用then的链式调用串连多个同步/异步任务。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;OK&#x27;</span>);<br>    &#125;,<span class="hljs-number">1000</span>);<br>&#125;);<br><br>p.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>       <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;success&#x27;</span>);<br>   &#125;);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value); <span class="hljs-comment">//success</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value); <span class="hljs-comment">//undefined  </span><br>&#125;)<span class="hljs-comment">//因为.then会返回一个新的promise，但这个promise没有resolve</span><br></code></pre></div></td></tr></table></figure><h5 id="Q6：什么是promise异常穿透？">Q6：什么是promise异常穿透？</h5><p>A6：当使用promise的then链式回调时，可以在最后指定失败的回调，前面任何操作作出了异常，都会传到最后失败的回调里面。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;err&#x27;</span>);<br>&#125;,<span class="hljs-number">1000</span>);<br>&#125;);<br><br>p.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">111</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">222</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">333</span>);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">reason</span>=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(reason);  <span class="hljs-comment">//err</span><br>&#125;)<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;OK&#x27;</span>);<br>&#125;,<span class="hljs-number">1000</span>);<br>&#125;);<br><br>p.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;error&#x27;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">222</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">333</span>);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">reason</span>=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(reason);  <span class="hljs-comment">//error</span><br>&#125;)<br></code></pre></div></td></tr></table></figure><h5 id="Q7：什么是promise链？如何中断promise链？">Q7：什么是promise链？如何中断promise链？</h5><p>A7：1.当使用promise的then链式调用时，在中间中断，不再调用后面的回调函数。</p><p>​2.在回调函数中返回一个pendding状态的promise对象。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;OK&#x27;</span>);<br>&#125;,<span class="hljs-number">1000</span>);<br>&#125;);<br><br>p.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">111</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">()=&gt;</span>&#123;&#125;);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">222</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span>=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">333</span>);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">reason</span>=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(reason); <br>&#125;)<br><span class="hljs-comment">//111</span><br></code></pre></div></td></tr></table></figure><h2 id="手写promise（class封装）">手写promise（class封装）</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Promise</span> &#123;<br>    <span class="hljs-comment">//构造方法</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">executor</span>) &#123;<br>        <span class="hljs-comment">//添加内置属性</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> = <span class="hljs-string">&#x27;pending&#x27;</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseResult</span> = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// this.callback=&#123;&#125;; </span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">callbacks</span> = [];  <span class="hljs-comment">//需要来保存多个回调函数</span><br>        <span class="hljs-keyword">let</span> _this = <span class="hljs-variable language_">this</span>;<br><br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-params">data</span>) &#123;<br>            <span class="hljs-comment">//判断状态，来确保只能从pending更改至fulfilled或rejected</span><br>            <span class="hljs-keyword">if</span> (_this.<span class="hljs-property">PromiseState</span> != <span class="hljs-string">&#x27;pending&#x27;</span>) <span class="hljs-keyword">return</span>;<br>            <span class="hljs-comment">//1.修改对象的状态（promiseState）</span><br>            _this.<span class="hljs-property">PromiseState</span> = <span class="hljs-string">&#x27;fulfilled&#x27;</span>;  <span class="hljs-comment">//这里的this指向的是调用者</span><br>            <span class="hljs-comment">//2.设置对象的结果值（promiseResult）</span><br>            _this.<span class="hljs-property">PromiseResult</span> = data;<br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                _this.<span class="hljs-property">callbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>                    item.<span class="hljs-title function_">onResolved</span>(data);<br>                &#125;)<br>            &#125;)<br>            <span class="hljs-comment">//item是当前forEach方法正在处理的元素</span><br>        &#125;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">reject</span>(<span class="hljs-params">data</span>) &#123;<br>            <span class="hljs-keyword">if</span> (_this.<span class="hljs-property">PromiseState</span> != <span class="hljs-string">&#x27;pending&#x27;</span>) <span class="hljs-keyword">return</span>;<br>            _this.<span class="hljs-property">PromiseState</span> = <span class="hljs-string">&#x27;reject&#x27;</span>;<br>            _this.<span class="hljs-property">PromiseResult</span> = data;<br>            <span class="hljs-comment">// if (_this.callback.onRejected) &#123;</span><br>            <span class="hljs-comment">//     _this.callback.onRejected(data);</span><br>            <span class="hljs-comment">//     //或者_this.callback.onRejected(_this.PromiseResult);</span><br>            <span class="hljs-comment">// &#125;</span><br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                _this.<span class="hljs-property">callbacks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>                    item.<span class="hljs-title function_">onRejected</span>(data);<br>                &#125;)<br>            &#125;)<br>        &#125;<br><br>        <span class="hljs-comment">//throw‘error’ 来改变promise状态</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//同步调用执行器函数</span><br>            <span class="hljs-title function_">executor</span>(resolve, reject);   <span class="hljs-comment">//executor同步调用的时候 相当于  resolve();  调用者为window</span><br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            <span class="hljs-title function_">reject</span>(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">then</span>(<span class="hljs-params">onResolved, onRejected</span>) &#123;<br>        <span class="hljs-keyword">const</span> _this = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-comment">//判断回调函数参数，因为在实现异常穿透的时候，可以允许不传onRejected</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onRejected !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>            onRejected = <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span> &#123;<br>                <span class="hljs-keyword">throw</span> reason;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果不传onResolved，也需要实现值传递，就补上一个return value这个then产生的promise的状态为resolve</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> onResolved !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>            onResolved = <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value;<br>            <span class="hljs-comment">//箭头函数的简写形式 (value) =&gt; &#123;return value&#125;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">//封装函数来判断p.then内返回的result为promise或者其它</span><br>            <span class="hljs-keyword">function</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params">type</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">let</span> result = <span class="hljs-title function_">type</span>(_this.<span class="hljs-property">PromiseResult</span>);<br>                    <span class="hljs-keyword">if</span> (result <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Promise</span>) &#123;<br>                        <span class="hljs-comment">//如果是promise对象</span><br>                        result.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>                            <span class="hljs-title function_">resolve</span>(v);<br>                        &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>                            <span class="hljs-title function_">reject</span>(r);<br>                        &#125;)<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-title function_">resolve</span>(result);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                    <span class="hljs-title function_">reject</span>(e);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//调用回调函数</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> === <span class="hljs-string">&#x27;fulfilled&#x27;</span>) &#123;<br>                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-title function_">callback</span>(onResolved);<br>                &#125;); <span class="hljs-comment">//因为promise.then方法内的函数是异步的</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> === <span class="hljs-string">&#x27;rejected&#x27;</span>) &#123;<br>                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-title function_">callback</span>(onRejected);<br>                &#125;);<br>            &#125;<br>            <span class="hljs-comment">//判断为 pending 来应对异步任务的情况</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">PromiseState</span> === <span class="hljs-string">&#x27;pending&#x27;</span>) &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">callbacks</span>.<span class="hljs-title function_">push</span>(&#123;<br>                    <span class="hljs-attr">onResolved</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                        <span class="hljs-title function_">callback</span>(onResolved);<br>                    &#125;,<br>                    <span class="hljs-attr">onRejected</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                        <span class="hljs-title function_">callback</span>(onRejected);<br>                    &#125;<br>                &#125;);<br>            &#125;<br><br>        &#125;)<br>    &#125;<br>    <span class="hljs-keyword">catch</span>(<span class="hljs-title class_">OnRejected</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">then</span>(<span class="hljs-literal">undefined</span>, onRejected);<br>    &#125;<br>    <span class="hljs-comment">//属于静态对象，而不是实例成员</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Promise</span>) &#123;<br>                value.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>                    <span class="hljs-title function_">resolve</span>(v);<br>                &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>                    <span class="hljs-title function_">reject</span>(r);<br>                &#125;)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">resolve</span>(value);<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">reject</span>(<span class="hljs-params">reason</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>            <span class="hljs-title function_">reject</span>(reason);<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">all</span>(<span class="hljs-params">promises</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, rejetc</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">let</span> arr = [];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; promises.<span class="hljs-property">length</span>; i++) &#123;<br>                promises[i].<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>                    count++;<br>                    arr[i] = v;<br>                    <span class="hljs-keyword">if</span> (count === promises.<span class="hljs-property">length</span>) &#123;<br>                        <span class="hljs-title function_">resolve</span>(arr);<br>                    &#125;<br>                &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>                    <span class="hljs-title function_">reject</span>(r);<br>                &#125;);<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">race</span>(<span class="hljs-params">promises</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, rejetc</span>) =&gt;</span> &#123;<br>            promises.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>                item.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> &#123;<br>                    <span class="hljs-title function_">resolve</span>(v);<br>                &#125;, <span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>                    <span class="hljs-title function_">reject</span>(r);<br>                &#125;)<br>            &#125;)<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="async与await">async与await</h2><h3 id="async函数">async函数</h3><ol><li>函数的返回值为promise对象</li><li>promise对象的结果由async函数执行的返回值决定。规则同then。</li></ol><h3 id="awit表达式">awit表达式</h3><ol><li>await右侧的表达式一般为promise对象，但也可以是其它的值。</li><li>如果表达式是promise对象，awit返回的是promise成功的值。</li><li>如果表达式是其它值，直接将此值作为await的返回值。</li></ol><h3 id="用法">用法</h3><ol><li>await必须写在async函数中，但async函数中可以没有await</li><li>如果await的promise失败了，就会抛出异常，需要通过try…catch捕获处理。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> ()=&gt;&#123;<br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;OK&#x27;</span>);<br>    &#125;)<br>    <span class="hljs-keyword">let</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>        <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>    &#125;)<br>    <span class="hljs-comment">//1.右侧为promise且状态为成功的情况，await会返回value</span><br>    <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> p;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);  <span class="hljs-comment">//OK</span><br>    <span class="hljs-comment">//2.右侧为其它类型的数据，是什么返回什么</span><br>    <span class="hljs-keyword">let</span> res2 = <span class="hljs-keyword">await</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res2); <span class="hljs-comment">//20</span><br>    <span class="hljs-comment">//3.右侧为promise且状态为失败的情况</span><br>    <span class="hljs-keyword">let</span> res3 = <span class="hljs-keyword">await</span> p2;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res3);  <span class="hljs-comment">//报错，需要使用try...catch的方式捕获</span><br>    <span class="hljs-keyword">try</span>&#123;<br>        <span class="hljs-keyword">let</span> res4 = <span class="hljs-keyword">await</span> p2；<br>    &#125;<span class="hljs-keyword">catch</span>(e)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);  <span class="hljs-comment">//error</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="async与await结合读取文件">async与await结合读取文件</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//需求：读取三个文件内容并合在一起</span><br><br><span class="hljs-comment">//1.回调函数的方式</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./1.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data1</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br>     fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./2.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data2</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br>            fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./3.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data3</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> err;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data1 + data2 + data3);<br>&#125;);<br>&#125;);<br>&#125;);<br><span class="hljs-comment">//async和await的运用</span><br><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>);<br><span class="hljs-keyword">const</span> myReadFile = util.<span class="hljs-title function_">promisify</span>(fs.<span class="hljs-property">readFile</span>);<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">try</span>&#123;<br><span class="hljs-keyword">let</span> data1 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">myReadFile</span>(<span class="hljs-string">&#x27;./1.html&#x27;</span>);<br>    <span class="hljs-keyword">let</span> data2 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">myReadFile</span>(<span class="hljs-string">&#x27;./2.html&#x27;</span>); <br>    <span class="hljs-keyword">let</span> data3 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">myReadFile</span>(<span class="hljs-string">&#x27;./3.html&#x27;</span>);<br>    &#125;<span class="hljs-keyword">catch</span>(e)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>    &#125;<br>&#125;<br><span class="hljs-title function_">main</span>();<br></code></pre></div></td></tr></table></figure><h3 id="async和await结合发送Ajax请求">async和await结合发送Ajax请求</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">senAjax</span>(<span class="hljs-params">url</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br><span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>        xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>);<br>xhr.<span class="hljs-title function_">send</span>();<br>xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>)&#123;<br><span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">statue</span> &lt; <span class="hljs-number">300</span>)&#123;<br><span class="hljs-title function_">resolve</span>(xhr.<span class="hljs-property">response</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">reject</span>(xhr.<span class="hljs-property">status</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;)<br>&#125;<br><span class="hljs-keyword">let</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">sendAjax</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Axios</title>
    <link href="/2022/05/17/axios/"/>
    <url>/2022/05/17/axios/</url>
    
    <content type="html"><![CDATA[<h1>Axios</h1><h3 id="介绍">介绍</h3><p>Axios 是一个基于 promise 的网络请求库，可以用于浏览器和 node.js。</p><p><a href="https://axios-http.com/zh/docs/intro">中文文档</a></p><h3 id="设置默认配置">设置默认配置</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//默认请求配置</span><br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">method</span> = <span class="hljs-string">&#x27;GET&#x27;</span>;<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">baseURL</span> = <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>;<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">params</span> = &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">100</span>&#125;;<br>axios.<span class="hljs-property">defaults</span>.<span class="hljs-property">timeout</span> = <span class="hljs-number">3000</span>;<br></code></pre></div></td></tr></table></figure><h3 id="axios实例对象">axios实例对象</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;https://some-domain.com/api/&#x27;</span>,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span>,<br>  <span class="hljs-attr">headers</span>: &#123;<span class="hljs-string">&#x27;X-Custom-Header&#x27;</span>: <span class="hljs-string">&#x27;foobar&#x27;</span>&#125;<br>&#125;);<br><br><span class="hljs-comment">//再直接用instance对象的方法</span><br><span class="hljs-title function_">instance</span>(&#123;<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;/example&#x27;</span>,<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;)<br><span class="hljs-comment">//也可以用封装好的内置方法</span><br>instance.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/example&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">data</span>);<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="axios拦截器-interceptors">axios拦截器(interceptors)</h3><p>作用：在请求或响应被 then 或 catch 处理前拦截它们。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 添加请求拦截器</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-comment">// 在发送请求之前做些什么   顺序1</span><br>    <span class="hljs-keyword">return</span> config;<br>  &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// 对请求错误做些什么</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>&#125;);<br><br><span class="hljs-comment">// 添加响应拦截器</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-comment">// 2xx 范围内的状态码都会触发该函数。  顺序2</span><br>    <span class="hljs-comment">// 对响应数据做点什么</span><br>    <span class="hljs-keyword">return</span> response;<br>  &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// 超出 2xx 范围的状态码都会触发该函数。</span><br>    <span class="hljs-comment">// 对响应错误做点什么</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>&#125;);<br><br><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;GET&#x27;</span>,<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;xxx&#x27;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;<br>    <span class="hljs-comment">// 顺序3</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;)<br></code></pre></div></td></tr></table></figure><p><code>axios.interceptors.request.use</code>也有两个函数作为参数，与<code>promise.then</code>方法相似。</p><h3 id="axios取消请求">axios取消请求</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> btns = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br><span class="hljs-comment">//声明全局变量</span><br><span class="hljs-keyword">let</span> cencel = <span class="hljs-literal">null</span>;<br>btns[<span class="hljs-number">0</span>].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//在发送请求之前先检测上一次请求是否完成</span><br>    <span class="hljs-keyword">if</span>(cancel != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//取消上一次的请求</span><br>        <span class="hljs-title function_">cancel</span>();<br>    &#125;<br>    <span class="hljs-title function_">axios</span>(&#123;<br>        <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-comment">//添加配置对象的属性</span><br>   cancelToken：<span class="hljs-keyword">new</span> axios.<span class="hljs-title class_">CancelToken</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>)&#123;<br>        <span class="hljs-comment">//将c的值赋给 cancel</span><br>        cancel = c;<br>    )&#125;<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>        <span class="hljs-comment">//完成请求后将cancel初始化</span><br>        cancel = <span class="hljs-literal">null</span>;<br>    &#125;)<br>&#125;<br><br>btns[<span class="hljs-number">1</span>].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//取消请求</span><br>    <span class="hljs-title function_">cancel</span>();<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="axios的创建过程">axios的创建过程</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Axios</span>(<span class="hljs-params">config</span>)&#123;<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">defaults</span> = config;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">interceptors</span> = &#123;<br>        <span class="hljs-attr">request</span>:&#123;&#125;,<br>        <span class="hljs-attr">response</span>:&#123;&#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//原型添加方法</span><br><span class="hljs-title class_">Axios</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">request</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">config</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;发送AJAX请求，请求的类型为&#x27;</span>+ config.<span class="hljs-property">method</span>)；<br>&#125;;<br><span class="hljs-title class_">Axios</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">get</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">config</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(&#123;<span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;GET&#x27;</span>&#125;);<br>&#125;;<br><span class="hljs-title class_">Axios</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">post</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">config</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(&#123;<span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;POST&#x27;</span>&#125;);<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createInstance</span>(<span class="hljs-params">config</span>)&#123;<br>    <span class="hljs-keyword">let</span> context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Axios</span>(config);<br>    <span class="hljs-comment">//context 是一个对象 可以 context.get()；但不能 context()</span><br>    <span class="hljs-keyword">let</span> instance = <span class="hljs-title class_">Axios</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">bind</span>(context);<br>    <span class="hljs-comment">//instance 是一个函数 可以 instance(&#123;&#125;); 但不能 instance.get()</span><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-title class_">Axios</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span>=&gt;</span>&#123;<br>        instance[key] = <span class="hljs-title class_">Axios</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[ket].<span class="hljs-title function_">bind</span>(context);<br>        <span class="hljs-comment">//get post request 方法在使用的时候 内部的this均指向实例对象</span><br>    &#125;)<br>    <span class="hljs-comment">//为instance 函数对象添加属性 default 与 interceptors</span><br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(context).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span>=&gt;</span>&#123;<br>        instance[key] = context[key];<br>        <span class="hljs-comment">//把context中的属性放到instance下面</span><br>    &#125;);<br>    <span class="hljs-keyword">return</span> instance;<br>&#125;<br><br><span class="hljs-comment">//总结：需要创建axios 既可以把它当对象来使用也可以把它当函数来使用</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前后端交互</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VScode Tips</title>
    <link href="/2022/05/15/VScode-Tips/"/>
    <url>/2022/05/15/VScode-Tips/</url>
    
    <content type="html"><![CDATA[<h1>VScode Tips</h1><h2 id="好用的快捷键">好用的快捷键</h2><ol><li><p><strong><code>Alt+Shift+L</code></strong> ：编辑相同的内容</p></li><li><p><strong><code>Alt+鼠标</code></strong>：多行编辑</p></li><li><p><strong><code>Ctrl+Shift+i</code></strong>：linux下格式化代码</p></li></ol><h2 id="前端相关">前端相关</h2><h3 id="快速创建自带框架的html文件">快速创建自带框架的html文件</h3><p>先新建一个.html文件，有两种方法可以创建：</p><ol><li><strong><code>！+ 回车</code></strong></li></ol><p><img src="!+%E5%9B%9E%E8%BD%A6.png" alt="!+回车"></p><ol start="2"><li><code>html:5</code></li></ol><p><img src="html.png" alt="html:5"></p><p>两种方式创建的自带框架的html文件是一样的。</p><p><img src="%E7%BB%93%E6%9E%9C.png" alt="结果"></p><h3 id="缩进-tab-size-调整为2个空格">缩进(tab size)调整为2个空格</h3><ol><li>打开<code>setting.json</code></li><li>写入如下代码：</li></ol><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-attr">&quot;editor.detectIndentation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;editor.insertSpaces&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;editor.tabSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ajax</title>
    <link href="/2022/05/15/Ajax/"/>
    <url>/2022/05/15/Ajax/</url>
    
    <content type="html"><![CDATA[<h1>Ajax</h1><h3 id="什么是Ajax">什么是Ajax</h3><p>Ajax的全称是Asynchronous Javascript And XML（异步Javascript 和 XML）</p><p>通俗的理解：在网页中利用XMLHttpRequest对象和服务器进行数据交互的方式，就是Ajax。</p><p>最大的优势：无刷新获取数据。</p><h4 id="Ajax的优点">Ajax的优点</h4><ol><li>可以无需刷新页面而与服务器端进行通信。</li><li>允许你根据用户事件来更新部分页面内容。</li></ol><h4 id="Ajax的缺点">Ajax的缺点</h4><ol><li>没有浏览历史，不能回退。</li><li>存在跨域问题（同源）。</li><li>SEO不友好。（搜索引擎优化，页面源代码中无数据）</li></ol><h3 id="XML">XML</h3><p>XML是可扩展标记语言，被设计用来传输和存储数据。</p><p>XML和HTML类似，不同是HTML中都是预定义标签，XML中没有预定义标签全是自定义标签。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>孙悟空<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>现在在数据传递、解析的时候已经用JSON了</p><h3 id="IE浏览器缓存问题">IE浏览器缓存问题</h3><p>IE浏览器会对Ajax返回的结果做一个缓存，等下一次再进行ajax请求的时候，会使用本地缓存的信息，而不是服务器返回的。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> result = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;result&#x27;</span>);<br>result.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseover&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>       <span class="hljs-comment">//xhr.open(&#x27;POST&#x27;, &#x27;http://127.0.0.1:8000/ie&#x27;);</span><br>       <span class="hljs-comment">//解决方案，加一个时间，会让IE浏览器明白这是最新的请求，就不会走缓存。</span><br>       xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;http://127.0.0.1:8000/ie?t=&#x27;</span>+<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>());<br>       xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>);<br>       xhr.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;a=100&amp;b=200&amp;c=300&#x27;</span>);<br>       xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>               <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>                   result.<span class="hljs-property">innerHTML</span> = xhr.<span class="hljs-property">response</span>;<br>               &#125;<br>           &#125;<br>       &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="取消请求">取消请求</h3><h3 id="jQury中的Ajax">jQury中的Ajax</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>$.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>,&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">100</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">200</span>&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;,<span class="hljs-string">&#x27;json&#x27;</span>);<br>&#125;);<br><br>$(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>$.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>,&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">100</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">200</span>&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;,<span class="hljs-string">&#x27;json&#x27;</span>);<br>&#125;);<br><br>$(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>$.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-comment">//url</span><br>        <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>,<br>        <span class="hljs-comment">//参数(parameter)</span><br>        <span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">100</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">200</span>&#125;,<br>        <span class="hljs-comment">//类型</span><br>        <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-comment">//响应体数据格式</span><br>        <span class="hljs-attr">dataType</span>:<span class="hljs-string">&#x27;json&#x27;</span>,<br>        <span class="hljs-comment">//延迟时间</span><br>        <span class="hljs-attr">timeout</span>:<span class="hljs-number">2000</span>,<br>        <span class="hljs-comment">//成功的回调函数</span><br>        <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>        &#125;,<br>        <span class="hljs-comment">//失败的回调</span><br>        <span class="hljs-attr">error</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;出错了&#x27;</span>)；<br>        &#125;,<br>        <span class="hljs-comment">//头信息</span><br>        <span class="hljs-attr">headers</span>:&#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;bitter-gourd&#x27;</span><br>        &#125;<br>    &#125;);<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="axios发送Ajax请求">axios发送Ajax请求</h3><h3 id="跨域">跨域</h3><h4 id="同源策略">同源策略</h4><p>同源策略(Same-Origin Policy)最早由网景公司提出，是浏览器的一种安全策略。</p><p>同源：协议、域名、端口  必须完全相同。</p><p>违背同源策略就是跨域。</p><h4 id="JSONP解决跨域">JSONP解决跨域</h4><ol><li>什么是JSONP?</li></ol><p>JSONP(JSON with Padding)，是一个非官方的跨域解决方案，只接受get请求。</p><ol start="2"><li>JSON是怎么工作的？</li></ol><p>在网页中有一些标签天生具有跨越能力，比如： img link iframe script</p><p>JSONP就是利用script标签来解决跨域问题。</p><h4 id="CORS">CORS</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">MDN有关CORS的介绍</a></p><ol><li>什么是CORS？</li></ol><p>CORS(Cross-Origin Resource Sharing)，跨域资源共享。CORS是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持get和post等请求，跨域资源共享标准新增了一组HTTP首部字段，允许服务器声明哪些源站通过浏览器有权访问哪些资源。</p><ol start="2"><li>CORS是怎么工作的？</li></ol><p>CORS是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应头以后就会对相应放行。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">app.<span class="hljs-title function_">all</span>(<span class="hljs-string">&#x27;/cors-server&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>) =&gt;</span>&#123;<br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Access-Control-Allow-Method&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br>res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;hello,bitter-gourd&#x27;</span>);<br>&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前后端交互</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有趣的网站分享</title>
    <link href="/2022/05/15/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <url>/2022/05/15/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1>一些有趣的网站分享</h1><h3 id="前言">前言</h3><p>bitter-gourd总是热衷于把一些有趣的网站放在收藏夹吃灰。</p><h3 id="闯关式学习">闯关式学习</h3><p><a href="http://flexboxfroggy.com/">Flexbox-Froggy</a></p><p><img src="flexbox-froggy.png" alt="学习flex盒子的小青蛙"></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* level 24 answer */</span><br><span class="hljs-selector-id">#pond</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br><span class="hljs-attribute">flex-direction</span>: column-reverse;<br><span class="hljs-attribute">flex-wrap</span>: wrap-reverse;<br><span class="hljs-attribute">align-content</span>: space-between;<br><span class="hljs-attribute">justify-content</span>:center;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><a href="https://learngitbranching.js.org/?locale=zh_CN">LearnGitBranch</a></p><p><img src="learngitbranch.png" alt="学习gitbranch的沙盒"></p><p>参考答案：</p><p><strong>MainCategorySolutions</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-number">1.1</span> Introduction to Git Commits<br>git commit<br>git commit<br><br><span class="hljs-number">1.2</span> Branching i分支，那么这个分支就叫 main，远程仓库的名称就是 o。<br><br>大多数的开发人员会将它们主要的远程仓n Git<br>git branch bugFix<br>git checkout bugFix<br><br><span class="hljs-number">1.3</span> Merging <span class="hljs-keyword">in</span> Git<br>git checkout -b bugFix    <br>git commit  <br>git checkout <span class="hljs-keyword">master</span><br><span class="hljs-title">git</span> commit<br>git merge bugFix<br><br><span class="hljs-number">1.4</span>  Rebase Introduction<br>git checkout -b bugFix    <br>git commit    <br>git checkout <span class="hljs-keyword">master</span>    <br><span class="hljs-title">git</span> commit    <br>git checkout bugFix    <br>git rebase <span class="hljs-keyword">master</span><br><br><span class="hljs-title">2</span>.<span class="hljs-number">1</span> Detach yo’ HEAD<br>git checkout C4<br><br><span class="hljs-number">2.2</span> Relative Refs (^)<br>git checkout C4^<br><br><span class="hljs-number">2.3</span> Relative Refs <span class="hljs-comment">#2 (~)</span><br>git branch -f <span class="hljs-keyword">master</span> <span class="hljs-title">C6</span><br>git branch -f bugFix C0<br>git checkout C1<br><br><span class="hljs-number">2.4</span> Reversing Changes <span class="hljs-keyword">in</span> Git<br>git reset local~<span class="hljs-number">1</span><br>git checkout pushed<br>git revert pushed<br><br><span class="hljs-number">3.1</span> Cherry-pick Intro<br>git cherry-pick C3 C4 C7<br><br><span class="hljs-number">3.2</span> Interactive Rebase Intro<br>git rebase -i <span class="hljs-literal">master</span>~<span class="hljs-number">4</span> --aboveAll<br><br><span class="hljs-number">4.1</span> Grabbing Just <span class="hljs-number">1</span> Commit<br>git checkout <span class="hljs-keyword">master</span><br><span class="hljs-title">git</span> cherry-pick C4<br><br><span class="hljs-number">4.2</span> Juggling Commits<br>git rebase -i caption~<span class="hljs-number">2</span> --aboveAll<br>git commit --amend<br>git rebase -i caption~<span class="hljs-number">2</span> --aboveAll<br>git branch -f <span class="hljs-keyword">master</span> <span class="hljs-title">caption</span><br><br><span class="hljs-number">4.3</span> Juggling Commits <span class="hljs-comment">#2</span><br>git checkout <span class="hljs-keyword">master</span><br><span class="hljs-title">git</span> cherry-pick C2<br>git commit --amend<br>git cherry-pick C3<br><br><span class="hljs-number">4.4</span> Git Tags<br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">v0</span> C1<br>git <span class="hljs-keyword">tag</span> <span class="hljs-title">v1</span> C2<br>git checkout C2<br><br><span class="hljs-number">4.5</span> Git Describe<br>git commit<br><br><span class="hljs-number">5.1</span> Rebasing over <span class="hljs-number">9000</span> times<br>git rebase <span class="hljs-keyword">master</span> <span class="hljs-title">bugFix</span><br>git rebase bugFix side<br>git rebase side another<br>git rebase another <span class="hljs-keyword">master</span><br><br><span class="hljs-title">5</span>.<span class="hljs-number">2</span> Multiple Parents<br>git branch bugWork <span class="hljs-literal">master</span>~^<span class="hljs-number">2</span>~<br><br><span class="hljs-number">5.3</span> Branch Spaghetti<br>git checkout one<br>git cherry-pick C4 C3 C2<br>git checkout two<br>git cherry-pick C5 C4 C3 C2<br>git branch -f three C2<br></code></pre></div></td></tr></table></figure><p><strong>RemoteCategorySolutions</strong></p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-number">1.1</span> Clone Intro<br>git clone<br><br><span class="hljs-number">1.2</span> Remote Branches<br>git <span class="hljs-keyword">commit</span><br>git checkout o<span class="hljs-operator">/</span>main<br>git <span class="hljs-keyword">commit</span><br><br><span class="hljs-number">1.3</span> Git Fetchin’<br>git <span class="hljs-keyword">fetch</span><br><br><span class="hljs-number">1.4</span> Git Pullin’<br>git pull<br><br><span class="hljs-number">1.5</span> Fakeing Teamwork<br>git clone<br>git fakeTeamwork main <span class="hljs-number">2</span><br>git <span class="hljs-keyword">commit</span><br>git pull<br><br><span class="hljs-number">1.6</span> Git Pushin’<br>git <span class="hljs-keyword">commit</span><br>git <span class="hljs-keyword">commit</span><br>git push<br><br><span class="hljs-number">1.7</span> Diverged History<br>git clone<br>git fakeTeamwork<br>git <span class="hljs-keyword">commit</span><br>git pull <span class="hljs-comment">--rebase</span><br>git push<br><br><span class="hljs-number">1.8</span> Locked branch Master<br>git reset <span class="hljs-comment">--hard o/main</span><br>git checkout <span class="hljs-operator">-</span>b feature C2<br>git push origin feature<br><br><span class="hljs-number">2.1</span> Push Master<span class="hljs-operator">!</span><br>git rebase side1 side2<br>git rebase side2 side3<br>git rebase side3 master<br>git pull <span class="hljs-comment">--rebase</span><br>git push<br><br><span class="hljs-number">2.2</span> Merging <span class="hljs-keyword">with</span> remotes<br>git checkout main<br>git pull<br>git <span class="hljs-keyword">merge</span> side1<br>git <span class="hljs-keyword">merge</span> side2<br>git <span class="hljs-keyword">merge</span> side3<br>git push<br><br><span class="hljs-number">2.3</span> Remoting Tracking<br>git checkout <span class="hljs-operator">-</span>b side o<span class="hljs-operator">/</span>main<br>git <span class="hljs-keyword">commit</span><br>git pull <span class="hljs-comment">--rebase</span><br>git push<br><br><span class="hljs-number">2.4</span> Git push arguments<br>git push origin main<br>git push origin foo<br><br><span class="hljs-number">2.5</span> Git push arguments — Expanded<span class="hljs-operator">!</span><br>git push origin main<span class="hljs-operator">~</span><span class="hljs-number">1</span>:foo<br>git push origin foo:main<br><br><span class="hljs-number">2.6</span> <span class="hljs-keyword">Fetch</span> arguments<br>git <span class="hljs-keyword">fetch</span> origin main<span class="hljs-operator">~</span><span class="hljs-number">1</span>:foo<br>git <span class="hljs-keyword">fetch</span> origin foo:main<br>git checkout foo<br>git <span class="hljs-keyword">merge</span> main<br><br><span class="hljs-number">2.7</span> Source <span class="hljs-keyword">of</span> nothing<br>git push origin :foo<br>git <span class="hljs-keyword">fetch</span> origin :bar<br><br><span class="hljs-number">2.8</span> Pull arguments<br>git pull origin bar:foo<br>git pull origin main:side<br></code></pre></div></td></tr></table></figure><p><a href="https://flukeout.github.io/">CSS-dinner</a></p><p><img src="flukeout.png" alt="在线练习CSS"></p>]]></content>
    
    
    <categories>
      
      <category>learning-resources</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习资源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动端网页特效</title>
    <link href="/2022/05/14/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/"/>
    <url>/2022/05/14/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/</url>
    
    <content type="html"><![CDATA[<h1>移动端网页特效</h1><h3 id="触屏事件">触屏事件</h3><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">touchstart</span>手指触摸到一个DOM元素时触发<br>touchmove手指在一个DOM元素上滑动时触发<br>touchend手指从一个DOM元素上移开时触发<br></code></pre></div></td></tr></table></figure><h4 id="触摸事件对象">触摸事件对象</h4><figure class="highlight arcade"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arcade"><span class="hljs-built_in">touches</span>正在触摸屏幕的所有手指的列表<br>targetTouches正在触摸当前DOM元素上的手指的一个列表<br>changedTouches手指状态发生改变的列表，从无到有，从有到无<br></code></pre></div></td></tr></table></figure><h4 id="移动端拖动元素">移动端拖动元素</h4><p>元素移动距离 = 盒子原来的位置 + 手指移动的距离</p><p>手指移动的距离 = 手指移动中的坐标 - 手指刚开始触摸的位置</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-keyword">var</span> startX = <span class="hljs-number">0</span>;   <span class="hljs-comment">//获得手指初始位置</span><br><span class="hljs-keyword">var</span> startY = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>;   <span class="hljs-comment">//获得盒子原来的位置</span><br><span class="hljs-keyword">var</span> y = <span class="hljs-number">0</span>;   <br>div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchstart&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>startX = e.<span class="hljs-property">targetTouches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">pageX</span>;<br>startY = e.<span class="hljs-property">targetTouches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">pageY</span>;<br>x = <span class="hljs-variable language_">this</span>.<span class="hljs-property">offsetLeft</span>;<br>y = <span class="hljs-variable language_">this</span>.<span class="hljs-property">offsetTop</span>;<br>&#125;)<br>div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchmove&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br><span class="hljs-keyword">var</span> moveX = e.<span class="hljs-property">targetTouches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">pageX</span> - startX;<br><span class="hljs-keyword">var</span> moveY = e.<span class="hljs-property">targetTouches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">pageY</span> - startY;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = x + moveX + <span class="hljs-string">&#x27;px&#x27;</span>；<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = y + moveY + <span class="hljs-string">&#x27;px&#x27;</span>；<br>e.<span class="hljs-title function_">preventDefault</span>();   <span class="hljs-comment">//阻止屏幕的滚动行为</span><br><span class="hljs-comment">//手指移动也会触发滚动屏幕所以这里需要阻止默认的屏幕滚动事件。</span><br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="移动端常见特效">移动端常见特效</h3><p>移动端轮播图p145–153</p><p>返回顶部p154</p><h4 id="移动端click事件延迟">移动端click事件延迟</h4><p>移动端click事件都会有300ms的延迟，原因是移动端屏幕双击会缩放页面。</p><ol><li>禁止缩放，浏览器禁用默认的双击缩放行为并且去掉300ms的点击延迟。</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;user-scalable=no&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>利用touch事件系列自己封装函数来解决300ms延迟。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">tap</span>(<span class="hljs-params">obj,callback</span>)&#123;<br>    <span class="hljs-keyword">var</span> isMove = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">var</span> startTime = <span class="hljs-number">0</span>;   <span class="hljs-comment">//记录触摸时候的时间变量</span><br>    obj.<span class="hljs-title function_">addEventListner</span>(<span class="hljs-string">&#x27;touchstart&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>        startTime = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();  <span class="hljs-comment">//记录触摸时间</span><br>    &#125;);<br>    obj.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchmove&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>        isMove = <span class="hljs-literal">true</span>;  <span class="hljs-comment">//判断是否有滑动，有滑动算拖拽，不算点击</span><br>    &#125;);<br>    obj.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchend&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>        <span class="hljs-keyword">if</span>(!isMove &amp;&amp; (<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - startTime) &lt; <span class="hljs-number">150</span>)&#123;<br>            callback &amp;&amp; <span class="hljs-title function_">callback</span>();<br>        &#125;<br>        isMove = <span class="hljs-literal">false</span>;<br>        startTime = <span class="hljs-number">0</span>;<br>    &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="3"><li>利用<code>fastclick.js</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;addEventListener&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">document</span>) &#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title class_">FastClick</span>.<span class="hljs-title function_">attach</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>);<br>&#125;, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="常用开发框架">常用开发框架</h3><h4 id="框架与插件的区别">框架与插件的区别</h4><p>框架，顾名思义就是一套架构，它会基于自身的特点向用户提供一套较为完整的解决方案。框架的控制权在框架本身，使用者需要按照框架的规范进行开发。</p><p>插件，是为了解决某一个问题而专门存在的，其功能单一，并且比较小。</p><p>前端常用框架有:<code>Bootstrap</code>  <code>Vue</code>  <code>Angular</code>  <code>React</code>等，既能开发PC端又能开发移动端。</p><p>前端常用的插件有:<code>swipr</code>  <code>superslide</code>  <code>iscroll</code></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PC端网页特效</title>
    <link href="/2022/05/14/PC%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/"/>
    <url>/2022/05/14/PC%E7%AB%AF%E7%BD%91%E9%A1%B5%E7%89%B9%E6%95%88/</url>
    
    <content type="html"><![CDATA[<h1>PC端网页特效</h1><h3 id="元素偏移量offset">元素偏移量offset</h3><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">offsetTop</span><br><span class="hljs-attribute">offsetLeft</span><br><span class="hljs-attribute">offsetWidth</span><br><span class="hljs-attribute">offsetHeight</span><br><span class="hljs-attribute">offsetParent</span><br></code></pre></div></td></tr></table></figure><ol><li><code>offsetLeft</code>  <code>offsetTop</code> 以带有定位的父亲为准，如果没有父亲或者父亲没有定位，则以body为准，返回距离上边和距离左边的偏移量。</li><li><code>offsetWidth</code>  <code>offsetHeight</code>可以得到元素的大小（包括宽度和高度），这个值是<code>padding + border + width</code>。</li><li><code>offsetParent</code>返回的是带有定位的父亲，否则返回body。</li></ol><h4 id="offset与style的区别"><code>offset</code>与<code>style</code>的区别</h4><ol><li>offset可以得到任意样式表中的样式值，而style只能得到行内样式表中的样式值。</li><li>offset系列得到的数值是没有单位的，而style.width得到的是带有单位的字符串。</li><li>offsetWidth为<code>padding + border + width</code>，而style.width不包含。</li><li>offsetWidth等属性是只读属性，只能获取不能赋值，而style.width是可读写属性，可以获取也可以赋值。</li><li>总结：想获取元素大小用offser，想给元素更改值，用style。</li></ol><h4 id="得到鼠标在某个盒子内的坐标">得到鼠标在某个盒子内的坐标</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">box.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br><span class="hljs-keyword">var</span> x = e.<span class="hljs-property">pageX</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">offsetLeft</span>;<br><span class="hljs-keyword">var</span> y = e.<span class="hljs-property">pageY</span> - <span class="hljs-variable language_">this</span>.<span class="hljs-property">offsetTop</span>;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h4 id="拖动模态框">拖动模态框</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">box.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousedown&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br><span class="hljs-keyword">var</span> x = e.<span class="hljs-property">pageX</span> - login.<span class="hljs-property">offsetLeft</span>;<br><span class="hljs-keyword">var</span> y = e.<span class="hljs-property">pageY</span> - login.<span class="hljs-property">offsetTop</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>,move)<br>     <span class="hljs-keyword">function</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">e</span>)&#123;<br>        login.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = e.<span class="hljs-property">pageX</span> - x + <span class="hljs-string">&#x27;px&#x27;</span>;<br>        login.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = e.<span class="hljs-property">pageY</span> - y + <span class="hljs-string">&#x27;px&#x27;</span>;<br>    &#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListner</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>         <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>,move);<br>    &#125;)<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="元素可视区client">元素可视区client</h3><p>client系列跟offset系列最大的区别在于其不包括border但包括padding。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">clientTop       返回元素上边框的大小<br>clientLeft返回元素左边框的大小<br></code></pre></div></td></tr></table></figure><h4 id="flexible源码分析">flexible源码分析</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> <span class="hljs-title function_">flexible</span> (<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span>) &#123;<br>    <span class="hljs-comment">//获取的html根元素&lt;html&gt;</span><br>    <span class="hljs-keyword">var</span> docEl = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span><br>    <span class="hljs-comment">//dpr 物理像素比  前者是移动端，后者是PC端（默认为1）</span><br>    <span class="hljs-keyword">var</span> dpr = <span class="hljs-variable language_">window</span>.<span class="hljs-property">devicePixelRatio</span> || <span class="hljs-number">1</span><br>  <br>    <span class="hljs-comment">// adjust body font size</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">setBodyFontSize</span> () &#123;<br>      <span class="hljs-comment">//如果页面中有body这个元素，就设置body的字体大小</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>) &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = (<span class="hljs-number">12</span> * dpr) + <span class="hljs-string">&#x27;px&#x27;</span><br>      &#125;<br>      <span class="hljs-comment">//这是为了防止script标签放在body标签之前而没有body标签出现的一种做法。</span><br>      <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, setBodyFontSize)<br>      &#125;<br>    &#125;<br>    <span class="hljs-title function_">setBodyFontSize</span>();<br>  <br>    <span class="hljs-comment">// set 1rem = viewWidth / 10</span><br>    <span class="hljs-comment">// 设置html元素的字体大小</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">setRemUnit</span> () &#123;<br>      <span class="hljs-keyword">var</span> rem = docEl.<span class="hljs-property">clientWidth</span> / <span class="hljs-number">10</span><br>      docEl.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = rem + <span class="hljs-string">&#x27;px&#x27;</span><br>    &#125;<br>  <br>    <span class="hljs-title function_">setRemUnit</span>()<br>  <br>    <span class="hljs-comment">// reset rem unit on page resize</span><br>    <span class="hljs-comment">// 当页面尺寸大小发生变化的时候重新设置rem</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, setRemUnit)<br>    <span class="hljs-comment">// pageshow是页面出现的时候会触发的事件</span><br>    <span class="hljs-comment">// e.persisted 返回的是true 如果这个页面是从缓存取过来的页面，也需要重新计算一下rem的大小</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;pageshow&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>      <span class="hljs-keyword">if</span> (e.<span class="hljs-property">persisted</span>) &#123;<br>        <span class="hljs-title function_">setRemUnit</span>()<br>      &#125;<br>    &#125;)<br>  <br>    <span class="hljs-comment">// detect 0.5px supports</span><br>    <span class="hljs-comment">// 原因是有些移动端的浏览器不支持0.5像素的写法</span><br>    <span class="hljs-keyword">if</span> (dpr &gt;= <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">var</span> fakeBody = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;body&#x27;</span>)<br>      <span class="hljs-keyword">var</span> testElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>      testElement.<span class="hljs-property">style</span>.<span class="hljs-property">border</span> = <span class="hljs-string">&#x27;.5px solid transparent&#x27;</span><br>      fakeBody.<span class="hljs-title function_">appendChild</span>(testElement)<br>      docEl.<span class="hljs-title function_">appendChild</span>(fakeBody)<br>      <span class="hljs-keyword">if</span> (testElement.<span class="hljs-property">offsetHeight</span> === <span class="hljs-number">1</span>) &#123;<br>        docEl.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;hairlines&#x27;</span>)<br>      &#125;<br>      docEl.<span class="hljs-title function_">removeChild</span>(fakeBody)<br>    &#125;<br>  &#125;(<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span>)) <br><br></code></pre></div></td></tr></table></figure><h4 id="pageshow和load的区别"><code>pageshow</code>和<code>load</code>的区别</h4><p>首先需要明白下面三种情况都会触发load事件：</p><ol><li>a标签的超链接。</li><li>F5或者刷新按钮。</li><li>前进后退按钮。</li></ol><p>但是在火狐浏览器中有一个“往返缓存”，这个缓存中不仅保存这页面数据，还保存这DOM和JavaScript的状态，实际上是将整个页面都保存在了内存里面。所有此时后退按钮不能刷新页面。</p><p>此时可以使用<code>pageshow</code>事件来触发，这个事件在页面显示的时候触发，无论页面是否来自缓存，在重新加载页面中，<code>pageshow</code>会在load事件触发后触发；根据事件对象中的persisted来判断是否是缓存中的页面触发的<code>pageshow</code>事件。</p><h3 id="元素滚动scroll">元素滚动scroll</h3><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scrollTop</span>返回被卷去的上侧距离，返回数值不带单位<br><span class="hljs-keyword">scrollLeft</span>返回被卷去的左侧距离，返回数值不带单位<br><span class="hljs-keyword">scrollWidth</span>返回自身实际的宽度，不含边框，返回数值不带单位<br><span class="hljs-keyword">scrollHeight</span>返回自身实际的高度，不含边框，返回数值不带单位<br>window.pageYOffset页面被卷去的头部长度，返回数值不带单位<br></code></pre></div></td></tr></table></figure><h4 id="页面被卷去头部长度兼容性问题">页面被卷去头部长度兼容性问题</h4><ol><li>声明了<code>DTD</code>，使用<code>document.documentElement.scrollTop</code></li><li>未声明<code>DTD</code>，使用<code>document.body.scrollTop</code></li><li>新方法（IE9开始支持）<code>window.pageYOffset</code>和<code>window.pageXOffset</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getScroll</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span>&#123;<br><span class="hljs-attr">left</span>:<span class="hljs-variable language_">window</span>.<span class="hljs-property">pageXOffset</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollLeft</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollLetf</span> || <span class="hljs-number">0</span>;<br><span class="hljs-attr">top</span>:<span class="hljs-variable language_">window</span>.<span class="hljs-property">pageYOffset</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollTop</span> || <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//然后在使用的时候  getScroll().left 或者 getScroll().top </span><br></code></pre></div></td></tr></table></figure><h3 id="动画函数封装">动画函数封装</h3><h4 id="实现原理">实现原理</h4><ol><li>获取盒子当前的位置。</li><li>让盒子在当前位置加上1个移动距离。</li><li>利用定时器不断重复这个操作。</li><li>加一个定时器结束的条件。</li><li>注意此元素需要添加定位，才能只用<code>element.style.left</code></li></ol><h4 id="函数封装">函数封装</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">obj,target</span>)&#123;<br>    <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);  <span class="hljs-comment">//先清除以前的定时器，只留下最新的一个，防止叠加。</span><br>obj.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span>(obj.<span class="hljs-property">offsetLeft</span> &gt;= target)&#123;<br><span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);<br>&#125;<br>obj.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = obj.<span class="hljs-property">offsetLeft</span> + <span class="hljs-number">1</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;,<span class="hljs-number">30</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="缓动动画实现">缓动动画实现</h4><p>比如采用公式： （目标值-当前位置）/10</p><p><code>(target - obj.offsetLeft)/10</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">obj,target</span>)&#123;<br>    <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);  <span class="hljs-comment">//先清除以前的定时器，只留下最新的一个，防止叠加。</span><br>obj.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span>(obj.<span class="hljs-property">offsetLeft</span> &gt;= target)&#123;<br><span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);<br>&#125;<br>        <span class="hljs-keyword">var</span> step = (target - obj.<span class="hljs-property">offsetLeft</span>)/<span class="hljs-number">10</span>;<br>obj.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = obj.<span class="hljs-property">offsetLeft</span> + step + <span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;,<span class="hljs-number">30</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上述程序会出现bug：达不到我们设定的target值。改进如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">obj,target</span>)&#123;<br>    <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);  <span class="hljs-comment">//先清除以前的定时器，只留下最新的一个，防止叠加。</span><br>obj.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span>(obj.<span class="hljs-property">offsetLeft</span> &gt;= target)&#123;<br><span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);<br>&#125;<br>        <span class="hljs-keyword">var</span> step = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>((target - obj.<span class="hljs-property">offsetLeft</span>)/<span class="hljs-number">10</span>);  <span class="hljs-comment">//加一个向上取整</span><br>obj.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = obj.<span class="hljs-property">offsetLeft</span> + step + <span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;,<span class="hljs-number">30</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上述程序仍会出现bug：如果是后退（即step&lt;0），仍然达不到我们设定的target值。改进如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">obj,target</span>)&#123;<br>    <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);  <span class="hljs-comment">//先清除以前的定时器，只留下最新的一个，防止叠加。</span><br>obj.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span>(obj.<span class="hljs-property">offsetLeft</span> &gt;= target)&#123;<br><span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);<br>&#125;<br>        <span class="hljs-keyword">var</span> step = (target - obj.<span class="hljs-property">offsetLeft</span>)/<span class="hljs-number">10</span>; <br>        step = step &gt; <span class="hljs-number">0</span> ? <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(step) ; <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(step);   <span class="hljs-comment">//向下取整</span><br>obj.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = obj.<span class="hljs-property">offsetLeft</span> + step + <span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;,<span class="hljs-number">30</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="给动画函数添加回调函数">给动画函数添加回调函数</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">animate</span>(<span class="hljs-params">obj,target,callback</span>)&#123;<br>    <span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);  <span class="hljs-comment">//先清除以前的定时器，只留下最新的一个，防止叠加。</span><br>obj.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span>(obj.<span class="hljs-property">offsetLeft</span> &gt;= target)&#123;<br><span class="hljs-built_in">clearInterval</span>(obj.<span class="hljs-property">timer</span>);<br>            <span class="hljs-keyword">if</span>(callback)&#123;   <span class="hljs-comment">//如果存在callback则调用</span><br>                <span class="hljs-title function_">callback</span>();<br>            &#125;<br>&#125;<br>        <span class="hljs-keyword">var</span> step = (target - obj.<span class="hljs-property">offsetLeft</span>)/<span class="hljs-number">10</span>; <br>        step = step &gt; <span class="hljs-number">0</span> ? <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(step) ; <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(step);   <span class="hljs-comment">//向下取整</span><br>obj.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = obj.<span class="hljs-property">offsetLeft</span> + step + <span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;,<span class="hljs-number">30</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>轮播图p127-138</p><p>返回顶部p139</p><p>筋斗云导航栏p140</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web API</title>
    <link href="/2022/05/13/Web-API/"/>
    <url>/2022/05/13/Web-API/</url>
    
    <content type="html"><![CDATA[<h1>Web API</h1><h3 id="API">API</h3><p>API(应用程序编程接口)是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或者硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p><p>简单理解：API是一种工具，以便我们更轻松的实现想要完成的功能。</p><h4 id="Web-API">Web API</h4><p>BOM和DOM</p><h3 id="获取元素">获取元素</h3><ol><li><p>因为我们文档页面从上往下加载，所以先得有标签，script得写在标签下面。</p></li><li><p><code>getElementById</code>返回的是一个元素对象。</p></li><li><p><code>console.dir</code>打印对象可以更好的查看里面的属性和方法。</p></li><li><p><code>getElementsByTagName</code>方法可以返回带有指定标签名的对象的<strong>集合</strong>。（伪数组）</p></li><li><p><code>element.getElenmentsByTagName</code>可以获得这个元素里面的某些标签。</p></li><li><p><code>getElementsByClassName</code>根据类名获得元素对象<strong>集合</strong>。</p></li><li><p><code>querySelector</code>返回指定选择器的第一个元素对象。</p></li><li><p><code>querySelectorAll</code>返回指定选择器的所有元素对象<strong>集合</strong>。</p></li><li><p><code>document.body</code>获得body标签。</p></li><li><p><code>document.documentElement</code>获得html元素对象。</p></li></ol><h3 id="事件基础">事件基础</h3><p>事件由三部分组成：事件源，事件类型，事件处理程序。</p><h3 id="innerText和innerHTML的区别"><code>innerText</code>和<code>innerHTML</code>的区别</h3><p><code>innerHTML</code>可以识别HTML标签。（多用HTML）</p><p>注意点：这两个方法是可以读写的，可以获取元素里面的内容。</p><h3 id="操作元素">操作元素</h3><p>可以修改元素属性</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;button id=<span class="hljs-string">&quot;ldh&quot;</span>&gt;刘德华&lt;/button&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;zxy&quot;</span>&gt;</span>张学友<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/ldh.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">var ldh = document.getElementById(&#x27;ldh&#x27;);</span><br><span class="language-xml">var zxy = document.getElementById(&#x27;zxy&#x27;);</span><br><span class="language-xml">var img = document.querySelector(&#x27;img&#x27;);</span><br><span class="language-xml">zxy.onclick = function()&#123;</span><br><span class="language-xml">img.src = &#x27;imgages/zxy.jpg&#x27;;</span><br><span class="language-xml">    img.title = &#x27;张学友&#x27;;</span><br><span class="language-xml">&#125;</span><br><span class="language-xml">ldh.onclick = function()&#123;</span><br><span class="language-xml">img.src = &#x27;images/ldh.hpg&#x27;；</span><br><span class="language-xml">    img.title = &#x27;刘德华&#x27;;  </span><br><span class="language-xml">&#125;</span><br><span class="language-xml">//title属性是鼠标经过时显示的文字。</span><br></code></pre></div></td></tr></table></figure><h4 id="操作元素之表单元素设置">操作元素之表单元素设置</h4><p>表单里面的值（文字内容）是通过value来修改的。</p><p><code>.innerHTML</code>是普通盒子如div改变内容使用的。</p><h4 id="登录注册时密码显示处理">登录注册时密码显示处理</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;img src=<span class="hljs-string">&#x27;images/eye.png&#x27;</span> alt=<span class="hljs-string">&#x27;&#x27;</span> id=<span class="hljs-string">&#x27;eye&#x27;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;password&#x27;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;pwd&#x27;</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">var eye = document.getElementById(&#x27;eye&#x27;);</span><br><span class="language-xml">var pwd = document.getElementById(&#x27;pwd&#x27;);</span><br><span class="language-xml">var flag = 0;</span><br><span class="language-xml">eye.onclick = function()&#123;</span><br><span class="language-xml">if(flag == 0)&#123;</span><br><span class="language-xml">        pwd.type = &#x27;text&#x27;;</span><br><span class="language-xml">        flag = 1;</span><br><span class="language-xml">    &#125;else &#123;</span><br><span class="language-xml">        pwd.type = &#x27;password&#x27;;</span><br><span class="language-xml">        flag = 0;</span><br><span class="language-xml">    &#125;</span><br><span class="language-xml">&#125;</span><br></code></pre></div></td></tr></table></figure><h4 id="操作元素之样式属性操作">操作元素之样式属性操作</h4><ol><li><p>JS里面的样式采用的是驼峰命名法，比如fontSize、backgroundColor</p></li><li><p>JS修改style样式操作，产生的是行内样式，权重比较高。</p></li><li><p>更好的做法其实是封装一个className，在JS操作时直接修改类名。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>div.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroudColor</span> = <span class="hljs-string">&#x27;pueple&#x27;</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&#x27;250px&#x27;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="显示隐藏文本框">显示隐藏文本框</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>);<br>text.<span class="hljs-property">onfocus</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> === <span class="hljs-string">&#x27;手机&#x27;</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>&#125;<br>&#125;<br>text.<span class="hljs-property">onblur</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> === <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> =<span class="hljs-string">&#x27;手机&#x27;</span>;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="自定义属性操作">自定义属性操作</h4><p>自定义属性，就是开发者自己添加的属性。</p><ol><li>获取元素的属性值</li></ol><p><code>getAttribute('属性')</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">id</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;id&#x27;</span>));<br></code></pre></div></td></tr></table></figure><ol start="2"><li>设置属性值</li></ol><p><code>element.setAttribute('属性','值')</code></p><ol start="3"><li>H5自定义属性</li></ol><p>H5规定自定义属性<code>data-</code>开头作为属性名并且赋值。</p><p><code>element.dataset.index</code>H5新增的更改自定义属性的方法。</p><h3 id="利用节点关系来进行节点操作">利用节点关系来进行节点操作</h3><p><code>parentNode</code>父节点，得到最近的父级节点。</p><p><code>childNodes</code>子节点，得到所有的子节点，包括元素节点和文本节点（包括换行）。</p><p>如果只想获得里面的元素节点，需要专门处理，因此一般不提倡使用childNodes。</p><p><code>children</code>获取所有的子元素节点，实际开发常用。</p><p><code>firstChild</code>  <code>lastChild</code>针对特定位置的子节点，但是包括元素节点和文本节点。</p><p><code>firstElementChild</code>针对特定位置的子节点，只获取元素节点，但是存在兼容性问题。</p><p><code>nextSibling</code>下一个兄弟节点，包含元素节点或者文本节点。</p><p><code>previousSibling</code>上一个兄弟节点，包含元素节点或者文本节点。</p><p><code>nextElementSibling</code>下一个兄弟元素节点，但是存在兼容性问题。</p><p><code>previousElementSibling</code>上一个兄弟元素节点，但是存在兼容性问题。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ol = <span class="hljs-variable language_">document</span>,<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ol&#x27;</span>);  <span class="hljs-comment">//会以伪数组的形式存储子节点</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>]);   <span class="hljs-comment">//第一个子节点</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">children</span>[ol.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]);  <span class="hljs-comment">//最后一个节点</span><br></code></pre></div></td></tr></table></figure><h4 id="如何解决兄弟元素节点的兼容性问题？">如何解决兄弟元素节点的兼容性问题？</h4><p>封装一个兼容性函数。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getNextElementSibling</span>(<span class="hljs-params">element</span>)&#123;<br><span class="hljs-keyword">var</span> el = element;<br><span class="hljs-keyword">while</span>(el = el.<span class="hljs-property">nextSiling</span>)&#123;<br><span class="hljs-keyword">if</span>(el.<span class="hljs-property">nodeType</span> === <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> el;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="下拉菜单">下拉菜单</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> nav = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.nav&#x27;</span>);<br><span class="hljs-keyword">var</span> lis = nav.<span class="hljs-property">children</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; lis.<span class="hljs-property">length</span>;i++)&#123;<br>lis[i].<span class="hljs-property">onmouseover</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">children</span>[<span class="hljs-number">1</span>].<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;<br>&#125;<br>lis[i].<span class="hljs-property">onmouseout</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">children</span>[<span class="hljs-number">1</span>].<span class="hljs-property">style</span>.<span class="hljs-property">displat</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="创建节点和添加节点">创建节点和添加节点</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br><span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>ul.<span class="hljs-title function_">appendChild</span>(li);<br><br><span class="hljs-comment">//添加节点（在前面）node.insertBefore(child,指定元素)</span><br><span class="hljs-keyword">var</span> lili = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>ul.<span class="hljs-title function_">insertBefore</span>(lili,ul.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>]);<br></code></pre></div></td></tr></table></figure><h4 id="发布留言案例-补充删除">发布留言案例(补充删除)</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br><span class="hljs-keyword">var</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;textarea&#x27;</span>);<br><span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span>(text.<span class="hljs-property">value</span> === <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;您没有输入内容&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">var</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>li.<span class="hljs-property">innerHTML</span> = text.<span class="hljs-property">value</span> + <span class="hljs-string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt;删除&lt;/a&gt;&quot;</span>;<br>ul.<span class="hljs-title function_">appendChild</span>(li);<br>        <span class="hljs-keyword">var</span> <span class="hljs-keyword">as</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-keyword">as</span>.<span class="hljs-property">length</span>;i++)&#123;<br>            <span class="hljs-keyword">as</span>[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                ul.<span class="hljs-title function_">removeChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">parentNode</span>);<br>            &#125;<br>        &#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="删除节点">删除节点</h4><p><code>node.removeChild(child)</code></p><h4 id="克隆节点">克隆节点</h4><p><code>node.cloneNode()</code></p><ol><li>如果括号参数为空或者false，只复制标签不复制内容。</li><li>括号为true，复制标签复制标签里面的内容（包含子节点）。</li></ol><h4 id="三种创建元素的区别">三种创建元素的区别</h4><p><code>document.write()</code></p><p><code>element.innerHTML</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">ul.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&#x27;&lt;a href=&quot;#&quot;&gt;链接&lt;/a&gt;’  //效率不高</span><br><span class="hljs-string">var arr[];</span><br><span class="hljs-string">for(var i = 0;i &lt;= 100;i++)&#123;</span><br><span class="hljs-string">    arr.push(&#x27;</span>&lt;a href=<span class="hljs-string">&quot;#&quot;</span>&gt;链接&lt;/a&gt;’);<br>&#125;<br>ul.<span class="hljs-property">innerHTML</span> = arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p><code>document.createElement()</code></p><ol><li><code>document.write()</code>会直接将内容写入页面的文档流，但是文档流执行完毕后再执行（比如给button绑定事件，后续执行时；或者window.onload绑定事件），它会重置整个页面，覆盖直接写过的全部东西。</li><li><code>innerHTML</code>是将内容写入某个DOM节点，不会导致页面全部重绘。</li><li><code>innerHTML</code>穿件多个元素的效率更高，前提是不要拼接字符串要用数组，结构稍微复杂。</li><li><code>document.createElement()</code>创建多个元素效率稍低，但结构清晰。</li></ol><h3 id="注册事件的两种方式">注册事件的两种方式</h3><h4 id="传统注册方式">传统注册方式</h4><ol><li>利用on开头的实现onclick</li><li>注册事件的唯一性</li><li>同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数。</li></ol><h4 id="方法监听注册方式">方法监听注册方式</h4><p><code>addEventListener()</code></p><p>特点：同一个元素同一个事件可以注册多个监听器。</p><p>按注册顺序依次执行。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">eventTarget.<span class="hljs-title function_">addEventListener</span>(type,listener[,useCapture])<br>eventTarget.<span class="hljs-title function_">addEventListener</span>()方法将指定的监听器注册到<span class="hljs-title function_">eventTarget</span>(目标对象)上，当该对象触发指定的事件时，就会执行事件处理函数。<br>三个参数：<br>type：事件类型字符串，如click、mouseover，不带on<br>listener：事件处理函数，事件发生时，会调用该监听函数<br>useCapture：可选参数，是一个布尔值，默认是<span class="hljs-literal">false</span>。<br><br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-number">111</span>);<br>&#125;)<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-number">222</span>);<br>&#125;)<br><span class="hljs-comment">//先弹出111再弹出222</span><br></code></pre></div></td></tr></table></figure><p>IE9之前用<code>attachEvent</code>替代<code>addEventListener()</code></p><h4 id="删除事件">删除事件</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">传统方式：<br><span class="hljs-keyword">var</span> divs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySeletorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>divs[<span class="hljs-number">0</span>].<span class="hljs-property">oncilck</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-number">111</span>);<br>divs[<span class="hljs-number">0</span>].<span class="hljs-property">onclick</span> = <span class="hljs-literal">null</span>;  <span class="hljs-comment">//在点完一次后解绑</span><br>&#125;<br>方式监听注册方式：<br>divs[<span class="hljs-number">1</span>].<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,fn)   <span class="hljs-comment">//里面的fn不需要加调动小括号</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-number">222</span>);<br>    divs[<span class="hljs-number">1</span>].<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,fn);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="DOM事件流">DOM事件流</h3><p>事件流描述的是从页面中接收事件的顺序。</p><p>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即DOM事件流。</p><p><img src="DOM%E4%BA%8B%E4%BB%B6%E6%B5%81.png" alt="DOM事件流"></p><p>**事件冒泡：**IE最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到DOM最顶层节点的过程。</p><p>**事件捕获：**网景最早提出，由DOM最顶层节点开始，然后逐级向下传播到最具体的元素接收的过程。</p><p>注意：</p><ol><li>JS代码只能执行捕获或者冒泡其中的一个阶段。</li><li>onclick 和 attachEvent 只能得到冒泡阶段。</li><li><code>addEventListener(type,listen[,useCapture])</code>第三个参数如果是true，表示在事件捕获阶段调用事件处理程序；如果是false（不写的话默认是flase），表示在事件冒泡阶段调用事件处理程序。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//冒泡阶段，如果addEventListener第三个参数是 false 或者 省略 那么则处于冒泡阶段</span><br><span class="hljs-comment">// son -&gt; father -&gt; body -&gt;html -&gt; document</span><br><span class="hljs-keyword">var</span> son = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.son&#x27;</span>);<br>son.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;son&#x27;</span>);<br>&#125;,<span class="hljs-literal">false</span>);   <span class="hljs-comment">//false可以省略不写</span><br><span class="hljs-keyword">var</span> father = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.father&#x27;</span>);<br>son.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;father&#x27;</span>);<br>&#125;,<span class="hljs-literal">false</span>); <br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;document&#x27;</span>);<br>&#125;)<br></code></pre></div></td></tr></table></figure><ol start="4"><li>有些事件是没有冒泡的，比如<code>onblur</code>  <code>onfocus</code>   <code>onmouseenter</code>  <code>onmouseleave</code></li></ol><h3 id="事件对象">事件对象</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>div.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;&#125;<br>div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>    <span class="hljs-comment">// e = e || window.event；</span><br>&#125;)<br></code></pre></div></td></tr></table></figure><ol><li><code>event</code>就是一个事件对象 写到我们侦听函数的小括号里面，可以当做形参。</li><li>事件对象只有有了事件才会存在，它是系统给我们自动创建的，不需要我们传递参数。</li><li>事件对象，是我们事件的一系列相关数据的集合，跟事件有关，鼠标点击、键盘按下等。</li><li>事件对象可以由我们自己命名，比如<code>e</code></li><li>事件对象也存在兼容性问题，如ie678，用<code>window.event</code>可以处理。</li></ol><h4 id="事件对象的常见属性和方法：">事件对象的常见属性和方法：</h4><ol><li><code>e.target</code>返回的是触发事件的对象（元素），<code>this</code>返回的是绑定事件的对象（元素）。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>);  <span class="hljs-comment">//div</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&#125;);<br><span class="hljs-comment">//如何区别e.target 和 this</span><br><br><span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">quertSelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>ul.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>);<br>&#125;);<br><span class="hljs-comment">//当你点击li的时候  this指向绑定对象ul  但是e.target指向的是触发对象li（父元素和子元素）</span><br><br><span class="hljs-comment">//来处理兼容性问题(ie678中无e.target)</span><br>div.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>e = e || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br><span class="hljs-keyword">var</span> target = e.<span class="hljs-property">target</span> || e.<span class="hljs-property">srcElement</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ol start="2"><li><code>e.type</code>返回事件的类型。</li><li><code>e.preventDefault();</code>阻止默认行为（事件）。特别地，在ie678中使用returnValue属性。</li></ol><p>还可以用return false（会让这一条代码以上的代码无法执行，但无法阻止后续代码）。</p><ol start="4"><li><code>e.stopPropagation()</code>阻止冒泡。兼容性：<code>e.cancelBubble = true</code>。</li></ol><h4 id="事件委托">事件委托</h4><p>原理：不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响每个子节点。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;ul&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br><br><span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>ul.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>e.<span class="hljs-property">target</span>.<span class="hljs-property">backgroundcolor</span> = pink;  <span class="hljs-comment">//点击li使得li变色</span><br>&#125;)<br></code></pre></div></td></tr></table></figure><h4 id="文字无法选中和右键菜单栏隐藏">文字无法选中和右键菜单栏隐藏</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//1.contextmenu  我们可以禁用右键菜单</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;contextmenu&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>e.<span class="hljs-title function_">preventDefault</span>();<br>&#125;)<br><span class="hljs-comment">//2.selectstart 禁止选中文字</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;selectstartt&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>e.<span class="hljs-title function_">preventDefault</span>();<br>&#125;)<br></code></pre></div></td></tr></table></figure><h4 id="鼠标事件对象"><strong>鼠标事件对象</strong></h4><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">e<span class="hljs-selector-class">.clientX</span>     返回鼠标相对于浏览器窗口可视区的X坐标<br>e<span class="hljs-selector-class">.clientY</span>     返回鼠标相对于浏览器窗口可视区的Y坐标<br>e<span class="hljs-selector-class">.pageX</span>       返回鼠标相对于文档页面的X坐标<br>e<span class="hljs-selector-class">.pageY</span>       返回鼠标相对于文档页面的Y坐标<br>e<span class="hljs-selector-class">.screenX</span>     返回鼠标相对于电脑屏幕的X坐标<br>e<span class="hljs-selector-class">.screenY</span>     返回鼠标相对于电脑屏幕的Y坐标<br></code></pre></div></td></tr></table></figure><h4 id="mouseenter和mouseover-的区别">mouseenter<code>和</code>mouseover`的区别</h4><p><code>mouseenter</code>只会在经过自身盒子的时候触发；<code>mouseover</code>在鼠标经过自身盒子的时候触发同时也会在鼠标经过子盒子的时候触发。</p><p>原因：<code>mouseenter</code>不会冒泡。</p><h4 id="如何做一个鼠标图案？">如何做一个鼠标图案？</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;style&gt;<br>img&#123;<br><span class="hljs-attr">position</span>:absolute;<br>&#125;<br>&lt;/style&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//1.mousemove 只要我们鼠标移动1px，就会触发这个事件</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> x = e.<span class="hljs-property">pageX</span>；</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> y = e.<span class="hljs-property">pageY</span>;</span></span><br><span class="language-javascript"><span class="language-xml">pic.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = x + <span class="hljs-string">&#x27;px&#x27;</span>;  <span class="hljs-comment">//别忘了字符串拼接</span></span></span><br><span class="language-javascript"><span class="language-xml">pic.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = y + <span class="hljs-string">&#x27;px&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h4 id="键盘事件对象">键盘事件对象</h4><figure class="highlight xl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xl">onkeyup<br>onkeydown<br>onkeypress (不能识别功能键 如 ctrl shift等)、<br>三个事件的执行顺序：<span class="hljs-function"><span class="hljs-title">keydown</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">keypress</span> -&gt;</span>keyup<br></code></pre></div></td></tr></table></figure><p><code>e.key</code>返回按下的键</p><p><code>e.keycode</code>返回按下的键的ASCII码值</p><ol><li>keyup和keydown事件不区分字母大小写。</li><li>keypress区分字母大小写。</li></ol><h4 id="京东按S后focus搜索框">京东按S后focus搜索框</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> search = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br><span class="hljs-keyword">if</span>(e.<span class="hljs-property">keyCode</span> == <span class="hljs-number">83</span>)&#123;<br>search.<span class="hljs-title function_">focus</span>();<br>&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="BOM">BOM</h3><h4 id="什么是BOM">什么是BOM</h4><p>BOM是浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象为window。它是JS访问浏览器的一个接口。</p><p>BOM由一系列的对象构成，并且每个对象都提供了很多的方法与属性。</p><p>BOM缺乏标准，JS的语法标准化阻止是ECMA，DOM的标准化组织是W3C。因此兼容性差。</p><p>BOM包含DOM。window(document,location,navigation,screen,history)</p><h4 id="窗口加载事件">窗口加载事件</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br>或者<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;);<br></code></pre></div></td></tr></table></figure><p>window.onload是串口（页面）加载事件，当文档内容完全加载完成后会触发该事件（包括图像、脚本文件、CSS文件等），就调用的处理函数。</p><ol><li>有了<code>window.onload</code>就可以把JS代码写到页面元素上方，因为onload是等页面全部加载完毕后再去执行处理函数。</li><li><code>window.onload</code>传统注册事件只能写一次，如果有多个，会以最后一个<code>window.inload</code>为准。但用<code>addEventListener</code>则可以注册多个。</li><li><code>DOMContentLoaded</code>事件触发的时候，仅当DOM加载完毕，不包括样式表、图片、flash等。如果页面的图片很多的话，从用户访问到<code>onload</code>触发可能需要较长的事件，交互效果就不能实现，必然会影响用户体验，此处用<code>DOMContentLoaded</code>事件比较合适。</li></ol><h4 id="调整窗口大小事件">调整窗口大小事件</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>&#125;)<br></code></pre></div></td></tr></table></figure><ol><li>只要窗口大小发生变化就会触发。</li><li>我们经常利用这个事件完成响应式布局。<code>window.innerWidth</code>是当前的屏幕的宽度。</li></ol><h3 id="定时器">定时器</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>&#125;,<span class="hljs-number">1000</span>)<br><span class="hljs-keyword">var</span> timer1 = <span class="hljs-built_in">setTimeout</span>(callback,<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">var</span> timer2 = <span class="hljs-built_in">setTimeout</span>(callback,<span class="hljs-number">2000</span>);<br><br><span class="hljs-built_in">clearTimeout</span>(timer1);  <span class="hljs-comment">//可以用来停止定时器</span><br><span class="hljs-built_in">setInterval</span>(callback,<span class="hljs-number">1000</span>);  <span class="hljs-comment">//间隔定时器（每隔一定时间不断调用）</span><br><span class="hljs-built_in">clearInterval</span>();<br></code></pre></div></td></tr></table></figure><ol><li><p>window可以省略。</p></li><li><p>延时时间的单位是ms，可以省略。</p></li><li><p>调用函数的位置可以是直接定义函数也可以写函数名。或者<code>'函数名()'</code>。</p></li><li><p>页面中可能有很多的定时器，我们经常给定时器加标识符（名字）。</p></li><li><p>在定时器内的函数我们也称为回调函数<code>callback</code>，普通函数是按找代码顺序执行的，但是这个函数需要等待时间，时间到了采取调用这个函数，因此称为回调函数。简单理解：回调，就是回头调用的意思，上一件事情干完，回头在调用这个函数。</p></li><li><p>清除定时器<code>window.clearTimeout(timer)</code>。</p></li><li><p><code>setInterval(callback,1000)</code>也是一个定时器，区别在于每隔1s都会调用函数，而<code>setTimeout()</code>只会调用一次。</p></li></ol><h4 id="定时器实现倒计时">定时器实现倒计时</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> hour = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.hour&#x27;</span>);<br><span class="hljs-keyword">var</span> minute = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.minute&#x27;</span>);<br><span class="hljs-keyword">var</span> second = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.second&#x27;</span>);<br><span class="hljs-keyword">var</span> inputTime = +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;2022-5-13 18:00:00&#x27;</span>);  <span class="hljs-comment">//返回的是用户输入时间的总的毫秒数</span><br><span class="hljs-built_in">setInterval</span>(countDown,<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">countDown</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> nowTime = +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();  <span class="hljs-comment">//返回的是当前时间的总的毫秒数</span><br><span class="hljs-keyword">var</span> times = (inputTime - nowTime ) / <span class="hljs-number">1000</span>;<br><span class="hljs-keyword">var</span> d = <span class="hljs-built_in">parseInt</span>(times / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>);<br>d = d &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + d : d;<br><span class="hljs-keyword">var</span> h = <span class="hljs-built_in">parseInt</span>(times / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> % <span class="hljs-number">24</span>);<br>h = h &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + h : h;<br>    hour.<span class="hljs-property">innerHTML</span> = h;<br><span class="hljs-keyword">var</span> m = <span class="hljs-built_in">parseInt</span>(times / <span class="hljs-number">60</span> % <span class="hljs-number">60</span>);<br>m = m &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + m : m;<br>    minute.<span class="hljs-property">innerHTML</span> = m;<br><span class="hljs-keyword">var</span> s = <span class="hljs-built_in">parseInt</span>(times % <span class="hljs-number">60</span>);<br>s = s &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + s : s;<br>    second.<span class="hljs-property">innerHTML</span> = s;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="定时器实现按钮禁用和复原">定时器实现按钮禁用和复原</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">quertSelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br><span class="hljs-keyword">var</span> time = <span class="hljs-number">3</span>;<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>btn.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span>(time == <span class="hljs-number">0</span>)&#123;<br>btn.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-built_in">clearInterval</span>(timer);<br>button.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;发送&#x27;</span>；<br>time = <span class="hljs-number">3</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>btn.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;还剩下&#x27;</span>+ time +<span class="hljs-string">&#x27;秒&#x27;</span>;<br>time --;<br>&#125;<br>&#125;,<span class="hljs-number">1000</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="JavaScript的执行机制">JavaScript的执行机制</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>&#125;,<span class="hljs-number">0</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br><span class="hljs-comment">//A question: console.log的顺序是？   ——1、2、3</span><br></code></pre></div></td></tr></table></figure><h4 id="同步任务">同步任务</h4><p>同步任务都在主线程上执行，形成一个执行栈。</p><h4 id="异步任务">异步任务</h4><p>JS的异步是通过回调函数实现的。</p><p>一般而言，异步任务有以下三种类型。</p><ol><li>普通事件，如click、resize等。</li><li>资源加载，如load、error等。</li><li>定时器，包括setInterval、setTimeout等。</li></ol><p>异步任务相关回调函数添加到任务队列中（任务队列也称为消息队列）。</p><h4 id="执行机制">执行机制</h4><ol><li><p>先执行执行栈中的同步任务。</p></li><li><p>异步任务（回调函数）放到任务队列中。</p></li><li><p>一旦执行栈中的所有同步任务执行完毕后，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</p></li><li><p>只有经过异步进程处理的异步任务才能被写入任务队列。（如click的异步任务，不点击的话就不会进入异步任务队列，同时每次click后都会有异步任务进入任务队列）</p></li><li><p>主进程不断的获得任务、执行任务、再获取任务、再执行任务，这种机制叫做事件循环。</p></li></ol><h3 id="Location对象">Location对象</h3><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">location</span>.href        获取或者设置整个URL<br><span class="hljs-keyword">location</span>.host        返回主机（域名）<br><span class="hljs-keyword">location</span>.port        返回端口号（如果未写则返回空字符串）<br><span class="hljs-keyword">location</span>.pathname    返回路径<br><span class="hljs-keyword">location</span>.<span class="hljs-keyword">search</span>      返回参数<br><span class="hljs-keyword">location</span>.hash        返回片段  #后面内容（常见于链接锚点）<br><span class="hljs-keyword">location</span>.assign()    跟href一样，可以跳转页面（也称为重定向页面）<br><span class="hljs-keyword">location</span>.replace()   替换当前页面，因为不记录历史，所以不能后退页面<br></code></pre></div></td></tr></table></figure><h4 id="定时器自动跳转页面">定时器自动跳转页面</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;https://www.bitter-gourd.com&quot;</span>;<br>&#125;,<span class="hljs-number">5000</span>)；<br></code></pre></div></td></tr></table></figure><h4 id="数据在不同页面之间传递">数据在不同页面之间传递</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//利用form表单可以submit参数,在通过一些字符串操作把需要的参数分离出来</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(location.<span class="hljs-property">search</span>);  <span class="hljs-comment">//?uname=andy</span><br><span class="hljs-comment">//1.先去掉？  substr(&#x27;起始位置&#x27;，截取的字符数);</span><br><span class="hljs-keyword">var</span> params = location.<span class="hljs-property">search</span>.<span class="hljs-title function_">substr</span>(<span class="hljs-number">1</span>);  <span class="hljs-comment">//uname=andy</span><br><span class="hljs-comment">//2.利用=把字符串分割为数组  spilt(&#x27;=&#x27;);</span><br><span class="hljs-keyword">var</span> arr = params.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;=&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);  <span class="hljs-comment">//[uname,andy];</span><br></code></pre></div></td></tr></table></figure><h4 id="location对象的一些方法">location对象的一些方法</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//location.assign()  记录浏览记录，可以实现后退功能</span><br><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>location.<span class="hljs-title function_">assign</span>(<span class="hljs-string">&#x27;https://www.bitter-gourd.com&#x27;</span>);<br>&#125;)<br><br><span class="hljs-comment">//location.replace()  不记录浏览记录，不可以实现后退功能</span><br><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>location.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;https://www.bitter-gourd.com&#x27;</span>);<br>&#125;)<br><br><span class="hljs-comment">//location.reload()  相当于刷新页面</span><br><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>location.<span class="hljs-title function_">reload</span>();<br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="navigator对象">navigator对象</h3><p><code>navigator</code>对象包含有关浏览器的信息，它有很多属性，我们最常用的是<code>userAgent</code>，该属性可以返回由客户端发生服务器的<code>user-agent</code>头部的值。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>((navigator,userAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(phone|pad|pod|iphone|ipad|ipod|ios|Androdi|Mobile|BlachBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows phone)/i</span>)))&#123;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-comment">//移动端</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-comment">//PC端</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="history对象">history对象</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">history.<span class="hljs-title function_">forward</span>();  <span class="hljs-comment">//后退</span><br>history.<span class="hljs-title function_">back</span>();     <span class="hljs-comment">//前进</span><br>history.<span class="hljs-title function_">go</span>(参数);    <span class="hljs-comment">//后退和前进，参数1则前进1个页面，参数为-1则后退一个页面</span><br></code></pre></div></td></tr></table></figure><h3 id="本地存储">本地存储</h3><h4 id="本地存储特性">本地存储特性</h4><ol><li>数据存储在用户浏览器中。</li><li>设置、读取方便、甚至页面刷新不丢失数据。</li><li>容量较大，<code>sessionStorage</code>约5M、<code>localStorage</code>约20M。</li><li>只能存储字符串，可以将对象<code>JSON.stringify()</code>编码后存储。</li></ol><h4 id="window-sessionStorage"><code>window.sessionStorage</code></h4><ol><li>生命周期为关闭浏览器窗口。</li><li>在同一个窗口（页面）下数据可以共享。</li><li>以键值对的形式存储使用。</li></ol><p><code>sessionStorage.setItem(key,value)</code>存储数据</p><p><code>sessionStorage.getItem(key)</code> 得到数据</p><p><code>sessionStorage.removeItem(key)</code>删除数据</p><p><code>sessionStorage.clear()</code>清除所有数据</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ipt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.input&#x27;</span>);<br><span class="hljs-keyword">var</span> set = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.set&#x27;</span>);<br><span class="hljs-keyword">var</span> get = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.get&#x27;</span>);<br><span class="hljs-keyword">var</span> remove = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.remove&#x27;</span>);<br>set.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> val = ipt.<span class="hljs-property">value</span>;<br>sessionStorage.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;uname&#x27;</span>,val);<br>&#125;)<br>get.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> name = sessionStorage.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;uname&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br>&#125;)<br>remove.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    sessionStorage.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;uname&#x27;</span>);<br>&#125;)<br><br><span class="hljs-comment">//如何查看？   Application -&gt; Storage -&gt; Session Storage</span><br></code></pre></div></td></tr></table></figure><h4 id="window-localStorage"><code>window.localStorage</code></h4><ol><li>生命周期永久生效，除非手动删除否则关闭页面也会存在。</li><li>可以多窗口（页面）共享，前提是同一浏览器。</li><li>以键值对的形式存储。</li><li>用处：记住用户名的</li></ol><p><code>localStorage.setItem(key,value)</code>存储数据</p><p><code>localStorage.getItem(key)</code> 得到数据</p><p><code>localStorage.removeItem(key)</code>删除数据</p><p><code>localStorage.clear()</code>清除所有数据</p><h4 id="记住用户名的勾选框">记住用户名的勾选框</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//&lt;input type=&quot;text&quot; id=&quot;username&quot;&gt;</span><br><span class="hljs-comment">//&lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;remember&quot;&gt;</span><br><br><span class="hljs-keyword">var</span> username = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#username&#x27;</span>);<br><span class="hljs-keyword">var</span> remember = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#remember&#x27;</span>);<br><span class="hljs-keyword">if</span>(localStory.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;username&#x27;</span>))&#123;<br>username.<span class="hljs-property">value</span> = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;username&#x27;</span>);<br>remember.<span class="hljs-property">checked</span> = <span class="hljs-literal">true</span>;<br>&#125;<br>remember.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span>)&#123;<br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;username&#x27;</span>,username.<span class="hljs-property">value</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">removeItem</span>(<span class="hljs-string">&#x27;username&#x27;</span>);<br>&#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github上显示图片</title>
    <link href="/2022/05/10/github%E4%B8%8A%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/"/>
    <url>/2022/05/10/github%E4%B8%8A%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h2 id="在github上显示图片">在github上显示图片</h2><p>（1）首先在你的本地项目目录下新建一个Screenshots文件夹，用于来存放需要显示的图片，我放入1.png一张图片；</p><p>（2）在本地编辑.md文件，来引用这张图片，引用图片的语法如下：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">![Alt text](https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/用户名/</span>repository仓库名<span class="hljs-regexp">/raw/</span>分支名<span class="hljs-regexp">/存放图片的文件夹名/</span>.png .jpg)<br></code></pre></div></td></tr></table></figure><p>（3）最后把你的项目提交或者更新到Github上时，Github会自动解析这个语法，并把图片在.md文件中显示出来。</p><p>(4)  同时你会发现本地.md文件也可以解析文件地址，此时就可以愉快地删除本地文件了！因为这一操作等价于将图片上传到服务器上。</p>]]></content>
    
    
    <categories>
      
      <category>开发环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo+fluid使用指南</title>
    <link href="/2022/05/10/hexo-fluid%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2022/05/10/hexo-fluid%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo命令整理">Hexo命令整理</h2><h4 id="更新博客">更新博客</h4><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g -d</span><br><span class="hljs-attribute">hexo s</span><br></code></pre></div></td></tr></table></figure><h4 id="创建文章">创建文章</h4><p>执行如下命令创建一篇新文章，名为《测试文章》</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">hexo new post 测试文章<br></code></pre></div></td></tr></table></figure><p>执行完成后在<code>source\_posts</code>目录下生成了一个<code>.md</code>文件和一个同名的资源目录(用于存放图片)。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">测试文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2021-06-10 16:35:20</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">原创</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Javascript</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这是一篇测试文章</span><br><span class="hljs-type">![</span><span class="hljs-string">图片引用方法三](test.png)</span><br></code></pre></div></td></tr></table></figure><h4 id="删除文章">删除文章</h4><p>直接删除本地文件，然后更新博客。</p><h4 id="在文章里面显示图片">在文章里面显示图片</h4><p>插件<code>hexo-renderer-marked</code>解决了这个问题。可以只用<code>npm install hexo-renderer-marked</code>命令直接安装，之后在<code>config.yaml</code>中更改配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>之后就可以在使用<code>![](test.jpg)</code>的方式愉快的插入图片了。</p><h4 id="文章在首页的封面图">文章在首页的封面图</h4><p>对于单篇文章，在文章开头中配置 <code>index_img</code> 属性。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-5</span><span class="hljs-number">-10</span> <span class="hljs-number">22</span><span class="hljs-string">:00:00</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></div></td></tr></table></figure><p><code>/img/example.jpg</code> 对应的是存放在 <code>/source/img/example.jpg</code> 目录下的图片（目录也可自定义，但必须在 source 目录下）。</p><p>也可以使用外链 Url 的绝对路径。</p><p>如果想统一给文章设置一个默认图片（文章不设置 <code>index_img</code> 则默认使用这张图片），可在<strong>主题配置</strong>中设置：</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">post:</span><br><span class="hljs-symbol">  default_index_img:</span> <span class="hljs-keyword">/img/</span>example.jpg<br></code></pre></div></td></tr></table></figure><p>当 <code>default_index_img</code> 和 <code>index_img</code> 都为空时，该文章在首页将不显示图片。</p><h2 id="Hexo-fluid美化">Hexo+fluid美化</h2><h3 id="1-友链设置">1. 友链设置</h3><p>友情链接页用于展示好友的博客入口，默认关闭，开启需要先在 <code>navbar</code> 项中将 <code>links</code> 的注释(#号)删掉。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">navbar:</span><br>  <span class="hljs-attr">menu:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;links&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/links/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-link-fill&#x27;</span> &#125;<br><span class="hljs-string">Copy</span><br></code></pre></div></td></tr></table></figure><p>然后找到 <code>links</code> 的配置项，对页面内容进行配置：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">links:</span><br>  <span class="hljs-attr">items:</span><br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;Fluid Docs&#x27;</span>,<br>      <span class="hljs-attr">intro:</span> <span class="hljs-string">&#x27;主题使用指南&#x27;</span>,<br>      <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/&#x27;</span>,<br>      <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;/img/favicon.png&#x27;</span><br>    &#125;<br><span class="hljs-string">Copy</span><br></code></pre></div></td></tr></table></figure><ul><li><code>title</code>: 友链站的标题</li><li><code>intro</code>: 站点或博主的简介，可省略</li><li><code>link</code>: 跳转链接</li><li><code>image</code>: 头像图片，可省略</li></ul><h3 id="2-hexo支持emoji">2.hexo支持emoji</h3><p>首先进入博客目录,卸载<code>hexo</code>默认的marked渲染器，安装markdown-it渲染器，运行的命令如：</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">cd Documents/blog<br>npm un hexo-renderer-marked <span class="hljs-comment">--save</span><br>npm i hexo-renderer-markdown-<span class="hljs-keyword">it</span> <span class="hljs-comment">--save</span><br></code></pre></div></td></tr></table></figure><p>之后安装<code>markdown-it-emoji</code>插件：</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">npm install markdown-<span class="hljs-keyword">it</span>-emoji <span class="hljs-comment">--save</span><br></code></pre></div></td></tr></table></figure><p>这里的站点配置文件是指位于博客根目录下的 <code>_config.yml</code>，编辑它，然后在末尾添加如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment">## Markdown-it config</span><br><span class="hljs-comment">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span><br><span class="hljs-attr">markdown:</span><br>  <span class="hljs-attr">render:</span><br>    <span class="hljs-attr">html:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">xhtmlOut:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">breaks:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">linkify:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">typographer:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">quotes:</span> <span class="hljs-string">&#x27;“”‘’&#x27;</span><br>  <span class="hljs-attr">plugins:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-abbr</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-footnote</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-ins</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-sub</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-sup</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">markdown-it-emoji</span>  <span class="hljs-comment"># add emoji</span><br>  <span class="hljs-attr">anchors:</span><br>    <span class="hljs-attr">level:</span> <span class="hljs-number">2</span><br>    <span class="hljs-attr">collisionSuffix:</span> <span class="hljs-string">&#x27;v&#x27;</span><br>    <span class="hljs-attr">permalink:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">permalinkClass:</span> <span class="hljs-string">header-anchor</span><br>    <span class="hljs-attr">permalinkSymbol:</span> <span class="hljs-string">¶</span><br></code></pre></div></td></tr></table></figure><p>在anchors这里配置需要小心，我不是很喜欢这个风格，于是就删去了。</p><h3 id="3-评论">3.评论</h3><p>开启评论需要在<strong>主题配置</strong>中开启并指定评论模块：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">disqus</span><br></code></pre></div></td></tr></table></figure><p>然后在下方还要设置对应评论模块的参数，比如 disqus 对应设置：</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">disqus:</span><br><span class="hljs-symbol">  shortname:</span> fluid<br></code></pre></div></td></tr></table></figure><p>当前支持 Valine、Disqus、Gitalk、Utterances、畅言、来必力 (livere)、Remark42、twikoo，使用和参数设置需要自行查询各自的文档（文档地址在配置注释里）。</p><p>若需要自定义添加其他评论系统，请自行在 <code>fluid/layout/_partial/comments/</code> 目录内创建 ejs 文件，参照自带的 ejs 填入评论服务商提供的代码，再修改 <code>post.comments.type</code> 为对应文件名。</p><h3 id="4-生成站点地图">4.生成站点地图</h3><ol><li>安装站点地图生成插件</li></ol><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>hexo-generator-<span class="hljs-keyword">baidu-sitemap </span>--save<br>npm <span class="hljs-keyword">install </span>hexo-generator-sitemap --save<br></code></pre></div></td></tr></table></figure><ol start="2"><li>在博客根目录的<code>_config.yml</code>中添加自动生成sitemap的配置</li></ol><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">sitemap:</span><br><span class="hljs-symbol">  path:</span> sitemap.xml<br><span class="hljs-symbol">baidusitemap:</span><br><span class="hljs-symbol">  path:</span> baidusitemap.xml<br></code></pre></div></td></tr></table></figure><p>同时确认一下该文件里面url对应的是否是接下来要提交的域名</p><ol start="3"><li>生成和部署</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></div></td></tr></table></figure><p>此时会在<code>public</code>目录下生成两个文件</p><blockquote><p><code>sitemap.xml</code> 用于提交给谷歌</p><p><code>baidusitemap.xml</code> 用于提交给百度</p></blockquote><p>部署成功后，在浏览器打开 <code>你的域名/baidusitemap.xml</code>，成功展示即代表成功</p><p><img src="test.png" alt="部署测试"></p><h4 id="百度收录">百度收录</h4><p><strong>开发目的（摘录）：</strong></p><p>某些主机，比如Github，禁止百度爬虫访问博客，导致博客无法被百度收录。多亏百度提供了主动提交的接口，这才有了个补救的方法。</p><p>除此之外， 使用主动推送还会达到如下功效：</p><ul><li>及时发现：可以缩短百度爬虫发现您站点新链接的时间，使新发布的页面可以在第一时间被百度收录</li><li>保护原创：对于网站的最新原创内容，使用主动推送功能可以快速通知到百度，使内容可以在转发之前被百度发现</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>hexo-<span class="hljs-keyword">baidu-url-submit </span>--save<br></code></pre></div></td></tr></table></figure><p>配置根目录_config.yml写入以下配置：</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">baidu_url_submit:</span><br><span class="hljs-symbol">  count:</span> <span class="hljs-number">100</span>                          <span class="hljs-meta"># 提交最新的多少个链接</span><br><span class="hljs-symbol">  host:</span> https:<span class="hljs-comment">//yourname.gitee.io/    # 在百度站长平台中添加的域名</span><br><span class="hljs-symbol">  token:</span> your_token               <span class="hljs-meta"># 秘钥</span><br><span class="hljs-symbol">  path:</span> baidu_urls.txt                <span class="hljs-meta"># 文本文档的地址,新链接会保存在此文本文档里Copy</span><br></code></pre></div></td></tr></table></figure><p>修改<strong>站点url为自己购买的域名</strong>，最后获取token配置提交方案：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span> <span class="hljs-comment">## 这是原来的deployer</span><br>  <span class="hljs-attr">repo:</span><br>  <span class="hljs-attr">branch:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">baidu_url_submitter</span> <span class="hljs-comment">## 在这里添加新内容即可</span><br></code></pre></div></td></tr></table></figure><p>可以看出是增加了一个提交的type，然后执行部署提交的时候就可以实现主动推送了</p><p>同时在<code>hexo\.deploy_git\</code>路径下会生成一个<code>baidu_urls.txt</code>文件，其中包含了你站点中的URL链接。</p><p><strong>如何获取百度收录的token?</strong></p><p>您得注册百度站长工具，然后在<strong>工具-&gt;网页抓取-&gt;链接提交</strong>里找到你的密匙。</p><p>在注册百度站长工具的时候，需要我们验证个人信息、添加网站域名。</p><p><img src="%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%AB%99.png" alt="添加网站"></p><p>然后验证网站所有权。有三种方式：（我选择了第一种）</p><ol><li>文件验证。</li><li>HTML标签验证。</li><li>CNAME验证</li></ol><p><img src="%E9%AA%8C%E8%AF%81%E7%BD%91%E7%AB%99.png" alt="验证网站，找来的图有点糊"></p><p>下载文件，放在<code>themes/fluid/source</code>(或者其他主题的source目录下面)</p><p><strong>为什么放到主题的source下而不直接放在站点source下面呢？</strong></p><p>因为站点source下面的html文件都会被按照主题样式重新渲染，最后html文件的内容会被改变，百度验证就不能识别。</p><p><img src="your_token.png" alt="获取token"></p><p><strong>再次生成和部署</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></div></td></tr></table></figure><p><img src="success.png" alt="成功推送"></p><h4 id="谷歌收录">谷歌收录</h4><p><a href="search.google.com/search-console">谷歌搜索域名提交网站</a></p><p><img src="%E8%B0%B7%E6%AD%8C%E6%8F%90%E4%BA%A4%E7%BD%91%E7%AB%99.png" alt="谷歌添加网站"></p><p>然后需要验证，与百度验证的方式相同，下载文件放在<code>themes/fluid/source</code>(或者其他主题的source目录下面)</p><p><strong>生成和部署</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></div></td></tr></table></figure><p><img src="%E5%AE%8C%E6%88%90%E6%94%B6%E5%BD%95%E5%90%8E%E7%AD%89%E5%BE%85.png" alt="完成网站提交后需要等一天..."></p>]]></content>
    
    
    <categories>
      
      <category>开发环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js中===和==</title>
    <link href="/2022/05/09/js%E4%B8%AD-%E5%92%8C/"/>
    <url>/2022/05/09/js%E4%B8%AD-%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1>JavaScript 中 == 和 === 的区别</h1><p>和其他语言有些不同，在 JavaScript 中除了用<code>==</code>操作符来判断是否相等外，还有一个<code>===</code>操作符，它们的区别是：<code>==</code>操作符会先将两边的值进行强制类型转换再比较是否相等，而<code>===</code>操作符不会进行类型转换。<code>==</code>操作符只要求比较两个值是否相等，而<code>===</code>操作符不仅要求值相等，而且要求类型相同。<code>!=</code>和<code>!==</code>的区别也是类似的，<code>!=</code>号会做强制类型转换，而<code>!==</code>不会。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">55</span> == <span class="hljs-string">&#x27;55&#x27;</span><br><span class="hljs-comment">// true</span><br><span class="hljs-number">55</span> === <span class="hljs-string">&#x27;55&#x27;</span><br><span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure><p>第一个操作数是数值类型的<code>55</code>，第二个操作数是字符串类型的<code>&quot;55&quot;</code>。当一个操作数是字符串，另一个操作数是数值的时候，操作符<code>==</code>会把字符串转换成数值，所以结果就返回了<code>true</code>。而<code>===</code>不会做强制转换，所以数值类型的<code>55</code>和字符串类型的<code>&quot;55&quot;</code>当然是不相等的了。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-title class_">NaN</span> == <span class="hljs-title class_">NaN</span><br><span class="hljs-comment">// false</span><br><span class="hljs-title class_">NaN</span> === <span class="hljs-title class_">NaN</span><br><span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure><p>这里有一个特殊值<code>NaN</code>，即 Not a Number，表示非数字，它和任何数做相等比较，包括它自己，都会返回<code>false</code>。所以判断<code>NaN</code>最好用<code>isNaN()</code>函数。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span><br><span class="hljs-comment">// true</span><br><span class="hljs-literal">null</span> === <span class="hljs-literal">undefined</span><br><span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure><p><code>null</code>也让人觉得难以理解。<code>null</code>用来表示空值，<code>undefined</code>用来表示不存在，但这在实际开发中并没有什么用，而且==和===对它们的处理也不一样。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Problems-Using-Arch</title>
    <link href="/2022/05/09/Problems-Using-Arch/"/>
    <url>/2022/05/09/Problems-Using-Arch/</url>
    
    <content type="html"><![CDATA[<h1>Tons of problems bitter-gourd meets when using archlinux</h1><h3 id="前言：">前言：</h3><p>为了纪念存活17天的archlinux（4.9-4.25）以及懊恼于重装系统后搭建开发环境时第二遍踩入的坑。也为了防止下一次重装系统时走入歧途，同时希望对完成装载archlinux系统后配置环境的同学提供一些帮助，bitter-gourd决定写下一些文字。</p><p>此处特别鸣谢全世界最好的❤️鲨鱼姐姐❤️</p><p><strong>一些友情链接:</strong></p><p><a href="https://www.viseator.com/2017/07/02/arch_more/">1.viseator学长archlinux下配置开发环境</a></p><p><a href="https://www.viseator.com/2017/05/17/arch_install/">2.viseator学长安装arch教程</a></p><p><a href="https://github.com/JunkFood02/Arch-Linux-Installation-Guide">3.鲨鱼姐姐安装arch教程</a></p><h3 id="4-30补充："><strong>4.30补充</strong>：</h3><p>为了纪念存活4天的archlinux(4.26-4.29)bitter-gourd决定再写点配置过程中新遇到的坑和解决方案。</p><h3 id="配置git">配置git</h3><p>1.git默认编辑器为vi，而非vim，因此建议在安装vscode后将默认编辑器转换后再打开configuration file</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git config --global core.editor &quot;code --wait&quot;<br>git config --global -e<br></code></pre></div></td></tr></table></figure><p>2.但是我们如果需要配置git的代理，又不能打开configuration file该怎么办捏？</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git config --global http.proxy http://<br></code></pre></div></td></tr></table></figure><h3 id="使用yay过程中遇到的困难">使用yay过程中遇到的困难</h3><p>在一个<em>天xian气de晴dan朗teng</em>的下午想yay a package 但看到这个东西。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">error: GPGME error: No data<br>error: GPGME error: No data<br>error: GPGME error: No data<br>:: Synchronising package databases...<br> core                                                                974.9 KiB  1134 KiB/s 00:01 [#########################################################] 100%<br> extra                                                               974.9 KiB  1547 KiB/s 00:01 [#########################################################] 100%<br> community                                                           974.9 KiB  1486 KiB/s 00:01 [#########################################################] 100%<br>error: GPGME error: No data<br>error: GPGME error: No data<br>error: GPGME error: No data<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Solution:<br>sudo rm -R /var/lib/pacman/sync<br>sudo -E pacman -Syu<br></code></pre></div></td></tr></table></figure><h3 id="安装ZShell过程中遇到的困难">安装ZShell过程中遇到的困难</h3><p>1.<a href="https://ohmyz.sh/#install">oh-my-zsh的安装</a> 需要安装curl然后直接在官网复制命令行。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -Syu curl<br>sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;<br></code></pre></div></td></tr></table></figure><p>2.初次安装zsh选择设置时<s>脑抽</s>选到q，将设置界面跳过，关于如何再次打开和做处理。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">设置界面：<br>This is the Z Shell configuration function for new users,<br>zsh-newuser-install.<br>You are seeing this message because you have no zsh startup files<br>(the files .zshenv, .zprofile, .zshrc, .zlogin in the directory<br>~).  This function can help you with a few settings that should<br>make your use of the shell easier.<br><br>You can:<br><br>(q)  Quit and do nothing.  The function will be run again next time.<br><br>(0)  Exit, creating the file ~/.zshrc containing just a comment.<br>     That will prevent this function being run again.<br><br>(1)  Continue to the main menu.<br><br>(2)  Populate your ~/.zshrc with the configuration recommended<br>     by the system administrator and exit (you will need to edit<br>     the file by hand, if so desired).<br><br>--- Type one of the keys in parentheses --- <br><br>solution:<br>autoload -U zsh-newuser-install<br>zsh-newuser-install -f<br>成功打开 zsh-new-install 的界面<br>但是会发现界面变了，需要自己配置1、2、3然后按0保存退出（本人英语水平较差，此处也遇到困难）<br></code></pre></div></td></tr></table></figure><p>3.oh-my-zsh插件通过yay安装且添加到.zshrc后报错</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">error:<br>[oh-my-zsh] plugin &#x27;zsh-autosuggestions&#x27; not found<br>[oh-my-zsh] plugin &#x27;zsh-syntax-highlighting&#x27; not found<br><br>solution:<br>git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions<br>git clone https://github.com/zsh-users/zsh-syntax-highlighting ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting<br><br></code></pre></div></td></tr></table></figure><p>4.在zsh中始终出现 ➜  ~ git:(master) ✗ 如何改成 ~</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">error:<br>➜  ~ git:(master) ✗<br><br>solution:<br>code .zshrc<br>PROMPT=&quot;%(?:%&#123;$fg_bold[green]%&#125;➜ :%&#123;$fg_bold[red]%&#125;➜ ) %&#123;$fg[cyan]%&#125;%c%&#123;$reset_color%&#125;&#x27;<br></code></pre></div></td></tr></table></figure><p>补充：事实上只是 git init了home目录。</p><p>5.将zsh设为默认shell</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo chsh -s /bin/zsh username<br></code></pre></div></td></tr></table></figure><p>6.zsh内中文显示与git中文显示问题</p><p>发现将zsh locale设置成英文后，仍然有大量中文。</p><p>友情链接：</p><p><a href="https://wiki.archlinux.org/title/Locale_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E6%88%91%E7%9A%84%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AF%AD%E8%A8%80%E8%BF%98%E6%98%AF%E4%B8%8D%E5%AF%B9">https://wiki.archlinux.org/title/Locale_(简体中文)#我的系统的语言还是不对</a></p><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs makefile">cd ~/.config<br>code plasma-localerc<br><br><span class="hljs-section">delete:</span><br>[Translations]<br>LANGUAGE=en_US:zh_CN<br><br><span class="hljs-section">reason:</span><br>KDE Plasma change the locale in zsh<br></code></pre></div></td></tr></table></figure><p>git设置：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">code .zshrc<br>alias git=&#x27;LANG=en_GB git&#x27;<br></code></pre></div></td></tr></table></figure><h3 id="一些有用的package">一些有用的package</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -S tokei   (代码统计)<br>yay -S spectacle（截图工具，可以自己设置快捷键）<br>yay -S Yakuake  (终端模拟器,快捷键F12)<br>yay -S screenfetch (终端上显示archlinux系统信息)<br>yay -S deepin-wine-qq (qq)<br>yay -S typora  (typora)<br></code></pre></div></td></tr></table></figure><h3 id="中文输入法">中文输入法</h3><p>中文输入法需要安装<code>fcitx</code>包与<code>fcitx-im</code>集合包，再加上一个中文支持包，可以到下面这个链接中挑选一个喜欢的包装上。(推荐搜狗拼音)</p><p><a href="https://wiki.archlinux.org/index.php/fcitx#Chinese">https://wiki.archlinux.org/index.php/fcitx#Chinese</a></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -S fcitx<br>yay -S fcitx-im<br>yay -S fcitx-sogoupinyin<br></code></pre></div></td></tr></table></figure><p>装完以后需要修改<code>/etc/profile</code>文件，在文件开头加入三行：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">export XMODIFIERS=&quot;@im=fcitx&quot;<br>export GTK_IM_MODULE=&quot;fcitx&quot;<br>export QT_IM_MODULE=&quot;fcitx&quot;<br></code></pre></div></td></tr></table></figure><p>倘若在安装中文输入法的过程中不小心安装某些百度输入法会发现无法使用，且每次yay都会在“searching AUR for updates”中出现如下提示(孤儿包)：</p><p><a href="https://wiki.archlinux.org/index.php/fcitx#Chinese">https://wiki.archlinux.org/index.php/fcitx#Chinese</a></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Orphaned AUR Packages:  fcitx-baidupinyin<br><br>solution:<br>pacman -Qtdq | pacman -Rns -<br></code></pre></div></td></tr></table></figure><h3 id="系统时间">系统时间</h3><p>如果发现系统时间错乱(包括archlinux和windows)的解决方案：</p><p>友情链接：</p><p><a href="https://wiki.archlinux.org/title/System_time#Read_hardware_clock">https://wiki.archlinux.org/title/System_time#Read_hardware_clock</a></p><p><a href="https://wiki.archlinux.org/title/System_time#UTC_in_Microsoft_Windows">https://wiki.archlinux.org/title/System_time#UTC_in_Microsoft_Windows</a></p><h3 id="安装QQ">安装QQ</h3><p>友情链接：</p><p><a href="https://github.com/vufa/deepin-wine-qq-arch">https://github.com/vufa/deepin-wine-qq-arch</a></p><p>省流版：</p><p><code>deepin-wine-qq</code> 依赖<code>Multilib</code>仓库中的一些32位库，Archlinux默认没有开启 <code>Multilib</code>仓库，需要编辑<code>/etc/pacman.conf</code>，取消对应行前面的注释(<a href="https://wiki.archlinux.org/index.php/Official_repositories#multilib">Archlinux wiki</a>):</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">If you want to run 32 bit applications on your x86_64 system,</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">enable</span> the multilib repositories as required here.</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">[multilib-testing]</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Include = /etc/pacman.d/mirrorlist</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">-#</span><span class="language-bash">[multilib]</span><br><span class="hljs-meta prompt_">-#</span><span class="language-bash">Include = /etc/pacman.d/mirrorlist</span><br>+[multilib]<br>+Include = /etc/pacman.d/mirrorlist<br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -S deepin-wine-qq<br></code></pre></div></td></tr></table></figure><p>如果还是发现32位文件无法安装，应该是需要<code>-Syu</code></p><figure class="highlight perl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs perl">yay -Syu<br>或者上述命令改为 yay -Syu deepin-wine-<span class="hljs-keyword">qq</span><br></code></pre></div></td></tr></table></figure><p>-y 更新database<br>-u 更新系统<br>-Syu 需要一起出现！！！ 否则会出现新AUR包不匹配旧的系统。</p><p>长时间没有更新，则…喜提重装arch体验卡！</p><p>yay -Syu的时候是先更新系统再更新AUR包。</p><h3 id="视频无法播放">视频无法播放</h3><p>遇到YouTubu无法播放视频，原因很有可能是<a href="https://wiki.archlinux.org/title/PulseAudio">pulseaudio</a></p><p><strong>临时的解决方法</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pulseaudio --kill<br>pulseaudio --start<br></code></pre></div></td></tr></table></figure><p><strong>更好的解决方法</strong></p><p><a href="https://bbs.archlinux.org/viewtopic.php?id=276596">Browser Not Playing Video</a></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">yay -Rdd pulseaudio<br>yay -Syu pipewire-pulse<br></code></pre></div></td></tr></table></figure><h3 id="PC喇叭">PC喇叭</h3><p>遇到关机、休眠、重启时有“嘟”的一声，在wine-qq里面多按一下backspace键会有“嘟”的一声。<a href="https://wiki.archlinux.org/title/PC_speaker">PC speaker</a></p><p>可以通过在内核模块中移除<code>pcspkr</code> 模块来完全禁用PC喇叭：</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta"># rmmod pcspkr</span><br></code></pre></div></td></tr></table></figure><p>将 <code>pcspkr</code> 模块加入黑名单的方法可以阻止 udev 在启动时加载它。创建文件：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/m</span>odprobe.d/nobeep.conf<br>blacklist pcspkr<br></code></pre></div></td></tr></table></figure><h3 id="修正简体中文显示为异体（日文）字形">修正简体中文显示为异体（日文）字形</h3><p><strong>问题描述：</strong></p><p>安装完字体包后会有个别字的写法不符合简体中文世界的标准。</p><p><strong>解决方法：</strong></p><p><a href="https://wiki.archlinux.org/title/Localization_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)/Simplified_Chinese_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E4%BF%AE%E6%AD%A3%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E4%B8%BA%E5%BC%82%E4%BD%93%EF%BC%88%E6%97%A5%E6%96%87%EF%BC%89%E5%AD%97%E5%BD%A2">archwiki上给出了清晰的解决方法</a></p><h3 id="VScode安装相关">VScode安装相关</h3><p>1.about failing to use contension:<code>open in browers </code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Vscode Error : <br>Open browser failed!! Please check if you have installed the browser correctly!<br><br>solution:<br>~/.vscode/extentions/techer.open-in-browser-2.0.0/out/config.js<br>change google-chrome to google-chrome-stable<br><br>reason:<br>for google chrome in arch linux is google-chrome-stable<br></code></pre></div></td></tr></table></figure><p>2.<code>Live Server</code></p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">solution:<br>~<span class="hljs-regexp">/.vscode/</span>extentions<span class="hljs-regexp">/ritwickdet.liveserver-5.7.5/</span>out<span class="hljs-regexp">/src/</span>appModel.js<br>change google-chrome to google-chrome-stable<br><br>reason:<br><span class="hljs-keyword">for</span> google chrome <span class="hljs-keyword">in</span> arch linux is google-chrome-stable<br></code></pre></div></td></tr></table></figure><p>3.格式化代码快捷键变化</p><p><code>ctrl + shift + i </code></p>]]></content>
    
    
    <categories>
      
      <category>开发环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux命令全称</title>
    <link href="/2022/05/09/linux%E5%91%BD%E4%BB%A4%E5%85%A8%E7%A7%B0/"/>
    <url>/2022/05/09/linux%E5%91%BD%E4%BB%A4%E5%85%A8%E7%A7%B0/</url>
    
    <content type="html"><![CDATA[<h1>Linux命令缩写的全称</h1><h4 id="【前言】">【前言】</h4><p>为了方便记忆linux命令，bitter-gourd决定整理一些linux命令缩写的全称。</p><h4 id="【目录-文件】">【目录|文件】</h4><p>ls : list(列出目录内容)</p><p>pwd : print work directory(打印当前目录，现示当前工作目录的绝对路径)</p><p>cd : change directory(改变目录)</p><p>rmdir: remove directory(删除目录)</p><p>mkdir: make directory(创建目录)</p><p>rm : remove(删除目录或文件)</p><p>mv : move file (移动文件)</p><p>cp : copy file(复制文件)</p><p>cat : concatenate(连锁)</p><h4 id="【系统-权限】">【系统|权限】</h4><p>su : switch user(切换用户)</p><p>uname: unix name(用于打印当前系统相关信息)</p><p>chown: change owner(改变某和文件或目录所有者和所属的组，，)</p><p>chgrp: change group(用于改变文件或所属的用户组)</p><p>chmod: change mode(用于变更文件或目录的权限)</p><h4 id="【进程-磁盘】">【进程|磁盘】</h4><p>ps : process status(进程状态，类似于wins任务管理器)</p><p>常用参数: -auxf ps -auxf (进程现示状态)</p><p>df : disk free(显示磁盘可用空间数目信息及空间节点信息。换句话说，就是查看在任何安装的设备或目录中还剩多少自由空间)</p><p>du : disk usage(查看已使用空间)</p><h4 id="【打包管理】">【打包管理】</h4><p>rpm : redhat package manger(红帽子打包管理器)</p><p>dpkg: debian package manager</p><p>apt: advanced package tool</p><h4 id="【文件后缀】">【文件后缀】</h4><p>文件结尾的rc: resource configratin(如 .xinitrc, .bashrc等)</p><p>knnxxx/snnxxx(位于rcx.d目录下):k(kill),s(service);nn(执行顺序号);xxx(服务标识)</p><p>.a(扩展名a): archive ,static library</p><p>.s(扩展名so): shared object,dynamically linked library</p><p>.o(扩展名o): olbject file, compiled result of c/c++ source file</p><h4 id="【其他】">【其他】</h4><p>insmod: install module(载入模块)</p><p>lsmod: list modules(用于显示已加载到内核模块的状态信息)</p><p>rmmod:remove module</p><p>in -s : link -soft(创建一个软链接，相当于创建一个快捷方式)</p><p>touch man:manual</p><p>mkfs: make file system (创建linux系统文件)</p><p>fsck: file system check(用于检查并试图修复文件系统中错误)</p><p>ln : link file(用于文件创建连接分为硬盘连接和符号连接)</p><p>fg : foreground(用于后台作业放到前台终端运行)</p><p>bg : background(用于将作业放到后台运行)</p><p>umount: unmount(用于卸载已经加载的系统文件)</p><p>tar : tape archive</p><p>ldd : list dynamic dependencies</p><h4 id="【部分linux-目录-参数-缩写】">【部分linux 目录|参数 缩写】</h4><p>bin = binarines</p><p>/dev = devices</p><p>/dev = etcetera</p><p>/lib = library</p><p>/proc = processes</p><p>/sbin= superuser binaries</p><p>/tmp= temporary</p><p>/usr= unix shared resources</p><p>/var= variable</p><p>? fifo= first in ,fitst out</p><p>grub= grand unified bootloader</p><p>ifs= internal field seperators</p><p>lilo= linux loader</p><p>mysql= my是最初作者的女儿的名字，sql=structured query language</p><p>（<strong>MySQL</strong>的发明者名叫 Michael “Monty” Widenius，<strong>MySQL是</strong>以他女儿的名字“<strong>My</strong>” 来命名的。 对这位发明者来说，<strong>MySQL</strong>数据库就仿佛<strong>是</strong>他可爱的女儿。）</p><p>php= personal home page tools=php hypertext preprocessor</p><p>ps = prompt string</p><p>perl= pratical extraction and report language=pathologically eclectic rubbish lister python得名于电视剧monty python’s flying circus</p><p>tcl= tool command language</p><p>tk = toolkit</p><p>vt = video terminal</p><p>yast= yet another</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
